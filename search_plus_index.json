{"./":{"url":"./","title":"本文介绍","keywords":"","body":"Introduction关于文章的规范关于本文的结构组织TreeviewCopyright © aleen42 all right reserved, powered by aleen42 Introduction 关于文章的规范 关于本文的结构组织 Introduction介绍 2023-08-23 12:02:00我认为的人生只需要做两件事即可：计划+思考. 什么是计划？所有将要发生的是都在规划之中，好的计划甚至提供突发情况的容错性。 做计划的软件或产品有：飞书、Notion、腾讯文档 什么是思考？思考是对计划的反思、对自己的反思、对生活的反思。思考是需要根据阶段性计划定时产出的。 目前的思考产出规划： 标题 频次 所属 技术内容 每日一篇 技术 读书笔记 每周一篇 读书 阶段感悟 不限 生活 关于文章的规范 [x] 这是完成了 [ ] 这是没完成 https://www.webfx.com/tools/emoji-cheat-sheet/ 每篇文章头部必须包含： title: \"\" author: \"fmw666\" date: 2023-08-23 17:18:00 tags: [标签1, 标签2, ...] 并用 --- 上下包裹。 关于本文的结构组织 计划及记录/ 本周/ 归档/ 技术文章/ Python/ 垃圾回收机制.md Redis/ Redis 设计.md 系统设计/ 多租户系统架构设计.md 知识笔记/ 杂项（暂未归类） 音韵学/ 中国最后一个母系氏族——摩梭族.md 计算机类/ Go 微服务课程/ 哲学类/ 西方哲学史/ 哲学——死亡/ MaxWeber/ 死亡.md 逻辑类/ 本质和归因.md 红鲱鱼谬误.md 读书笔记/ 边城.md 经验分享/ 杂项（暂未归类） 工具 项目管理平台有哪些.md AI 知识库有哪些.md 面试/ 面试经验/ 面试实战/ 发展/ 岗位经验/ Golang 杭州哪个区适合发展.md 生活 社会话题 生活杂谈 兴趣 书评 影评 记录/ 看过的书.md 追过的剧.md 追星 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"tags.html":{"url":"tags.html","title":"标签归档","keywords":"","body":"标签归档标签归档介绍 gitbook mermaid 测试 技术 工作 开发 项目 读书 笔记 面试 记录 计算机 python golang 微服务 职场 岗位 经验 发展 Python Golang 短视频 生活 睡觉 上海 杭州 hr 计划介绍本文介绍 gitbook技术文章 > 杂项（暂未归档） > mermaid 测试.md mermaid技术文章 > 杂项（暂未归档） > mermaid 测试.md 测试技术文章 > 杂项（暂未归档） > mermaid 测试.md 经验分享 > 兴趣 > 追星 > taylorswift 技术技术文章 > 杂项（暂未归档） > 程序的运行对计算机cpu和内存到底有何影响.md 日常记录 > 杂项（暂未归档） > 开发的项目.md 知识笔记 > 计算机类 经验分享 > 发展 > 岗位 > PythonOrGolang.md 工作日常记录 > 工作 > 外接项目 > 之江实验室 > 复盘分析系统.md 经验分享 > 发展 > 工作 > 如何参与到外接项目中.md 经验分享 > 发展 > 工作 > 月薪1万的短视频运营一天工作内容.md 开发日常记录 > 工作 > 外接项目 > 之江实验室 > 复盘分析系统.md 日常记录 > 杂项（暂未归档） > 开发的项目.md 知识笔记 > 计算机类 经验分享 > 发展 > 工作 > 如何参与到外接项目中.md 项目日常记录 > 杂项（暂未归档） > 开发的项目.md 经验分享 > 发展 > 工作 > 如何参与到外接项目中.md 读书日常记录 > 读书笔记 > 盐镇.md 日常记录 > 读书笔记 > 边城 日常记录 > 读书笔记 > 边城 > 1.关于作者.md 笔记日常记录 > 读书笔记 > 盐镇.md 日常记录 > 读书笔记 > 边城 日常记录 > 读书笔记 > 边城 > 1.关于作者.md 面试日常记录 > 面试 > 面试记录.md 经验分享 > 面试 > 面试实战 > 上海聚界.md 经验分享 > 面试 > 面试实战 > 上海西井科技.md 经验分享 > 面试 > 面试实战 > 云途杭州.md 经验分享 > 面试 > 面试经验 > Python开发面试经验.md 经验分享 > 面试 > 面试题 > hr问题.md 记录日常记录 > 面试 > 面试记录.md 计算机知识笔记 > 计算机类 python知识笔记 > 计算机类 golang知识笔记 > 计算机类 微服务知识笔记 > 计算机类 职场经验分享 > 发展 > 企业 > 不同公司规模的选择.md 岗位经验分享 > 发展 > 企业 > 不同公司规模的选择.md 经验分享 > 发展 > 岗位 > PythonOrGolang.md 经验经验分享 > 发展 > 企业 > 不同公司规模的选择.md 经验分享 > 生活 > 生活杂谈 > 如何打地铺.md 发展经验分享 > 发展 > 岗位 > PythonOrGolang.md Python经验分享 > 发展 > 岗位 > PythonOrGolang.md 经验分享 > 面试 > 面试实战 > 上海聚界.md 经验分享 > 面试 > 面试实战 > 上海西井科技.md 经验分享 > 面试 > 面试实战 > 云途杭州.md 经验分享 > 面试 > 面试经验 > Python开发面试经验.md Golang经验分享 > 发展 > 岗位 > PythonOrGolang.md 短视频经验分享 > 发展 > 工作 > 月薪1万的短视频运营一天工作内容.md 生活经验分享 > 生活 > 生活杂谈 > 如何打地铺.md 睡觉经验分享 > 生活 > 生活杂谈 > 如何打地铺.md 上海经验分享 > 面试 > 面试实战 > 上海聚界.md 经验分享 > 面试 > 面试实战 > 上海西井科技.md 杭州经验分享 > 面试 > 面试实战 > 云途杭州.md hr经验分享 > 面试 > 面试题 > hr问题.md 计划计划安排 > 本周 > 0828.md 计划安排 > 本周 > 0829.md console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"date.html":{"url":"date.html","title":"时间归档","keywords":"","body":"时间归档时间归档 根据文章最新修改时间倒序排列 2023-09-05 2023-09-04 2023-08-29 2023-08-28 2023-08-27 2023-08-26 2023-08-25 2023-08-24 2023-08-23 2023-08-22 2023-08-21 2023-08-202023-09-05日常记录 > 面试 > 锤儿子科技-美国企业 > 2-coding测试题解读.md 日常记录 > 面试 > 锤儿子科技-美国企业 > 1-coding测试题.md 2023-09-04经验分享 > 发展 > 工作 > 月薪1万的短视频运营一天工作内容.md 2023-08-29经验分享 > 发展 > 工作 > 如何参与到外接项目中.md 计划安排 > 本周 > 0829.md 日常记录 > 面试 > 面试记录.md 2023-08-28日常记录 > 工作 > 外接项目 > 之江实验室 > 复盘分析系统.md 技术文章 > 杂项（暂未归档） > 程序的运行对计算机cpu和内存到底有何影响.md 计划安排 > 本周 > 0828.md 2023-08-27知识笔记 > 计算机类 日常记录 > 杂项（暂未归档） > 开发的项目.md 2023-08-26日常记录 > 读书笔记 > 牧羊少年奇幻之旅.md 2023-08-25日常记录 > 读书笔记 > 盐镇.md 技术文章 > 杂项（暂未归档） > mermaid 测试.md 2023-08-24经验分享 > 发展 > 企业 > 不同公司规模的选择.md 经验分享 > 发展 > 岗位 > PythonOrGolang.md 2023-08-23经验分享 > 生活 > 生活杂谈 > 如何打地铺.md 经验分享 > 面试 > 面试实战 > 上海聚界.md 经验分享 > 面试 > 面试实战 > 上海西井科技.md 经验分享 > 面试 > 面试实战 > 云途杭州.md 本文介绍 2023-08-22经验分享 > 面试 > 面试经验 > Python开发面试经验.md 经验分享 > 面试 > 面试题 > hr问题.md 2023-08-21经验分享 > 兴趣 > 追星 > taylorswift 2023-08-20日常记录 > 读书笔记 > 边城 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/Python/":{"url":"技术文章/Python/","title":"Python","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/Python/C3线性算法与MRO.html":{"url":"技术文章/Python/C3线性算法与MRO.html","title":"C3线性算法与MRO.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/Python/垃圾回收机制.html":{"url":"技术文章/Python/垃圾回收机制.html","title":"垃圾回收机制.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/Python/字符串的驻留模式.html":{"url":"技术文章/Python/字符串的驻留模式.html","title":"字符串的驻留模式.md","keywords":"","body":"字符串的驻留模式字符串的驻留模式 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/Redis/":{"url":"技术文章/Redis/","title":"Redis","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/Redis/redis设计.html":{"url":"技术文章/Redis/redis设计.html","title":"redis设计.md","keywords":"","body":"redis1. redis 的由来TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. redis 的由来 redis 全称：remote dictionary server（远程字典服务） 1. redis 的由来 解决问题的初衷：多个进程之间共享一类数据结构的数据。 特点： 内存数据库 kv 数据库（通过 k 来操作 v） 数据结构数据库（string、hash、list、set、zset） console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/杂项（暂未归档）/":{"url":"技术文章/杂项（暂未归档）/","title":"杂项（暂未归档）","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/杂项（暂未归档）/mermaid 测试.html":{"url":"技术文章/杂项（暂未归档）/mermaid 测试.html","title":"mermaid 测试.md","keywords":"","body":"mermaid 测试流程图时序图甘特图类图状态图饼图TreeviewCopyright © aleen42 all right reserved, powered by aleen42 mermaid 测试 流程图 时序图 甘特图 类图 状态图 饼图 mermaid 测试gitbook mermaid 测试 2023-08-25 00:41:00 官网语法：http://mermaid.js.org/intro/n00b-syntaxReference.html 流程图 flowchart LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] 时序图 sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! 甘特图 gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d 类图 classDiagram Class01 > Class01 Class09 --> C2 : Where am I? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { > int id size() } 状态图 stateDiagram-v2 [] --> Still Still --> [] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] 饼图 pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/杂项（暂未归档）/如何rebase.html":{"url":"技术文章/杂项（暂未归档）/如何rebase.html","title":"如何rebase.md","keywords":"","body":"git checkout feature/xxx git pull origin main git rebase main git checkout main git merge feature/xxx console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/杂项（暂未归档）/程序的运行对计算机cpu和内存到底有何影响.html":{"url":"技术文章/杂项（暂未归档）/程序的运行对计算机cpu和内存到底有何影响.html","title":"程序的运行对计算机cpu和内存到底有何影响.md","keywords":"","body":"程序的运行对计算机 CPU 和内存到底有何影响？CPU内存程序程序的什么因素会影响 CPU 负载？程序的什么因素会影响内存占用？按照程序任务的划分来考虑影响效果？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 程序的运行对计算机 CPU 和内存到底有何影响？ CPU 内存 程序 程序的什么因素会影响 CPU 负载？ 程序的什么因素会影响内存占用？ 按照程序任务的划分来考虑影响效果？ 程序的运行对计算机 CPU 和内存到底有何影响？技术 2023-08-28 11:37:00一台计算机，按照 冯诺依曼计算机结构 计算机体系结构，分为五个部分：运算器、控制器、存储器、输入和输出设备。 运算器（Arithmetic Logic Unit, ALU）：执行算术和逻辑运算，处理数据的各种计算操作。 控制器（Control Unit, CU）：解析指令，控制程序的执行，协调各部件工作，控制数据的流动。 存储器（Memory）：临时存储正在执行的程序和数据，作为CPU和其他部件之间的数据传输介质。 输入设备（Input Devices）：接收来自用户或外部源的数据，将其传递给计算机系统进行处理。 输出设备（Output Devices）：将计算机处理后的数据和信息展示给用户或传递给外部设备。 CPU CPU 全称是 Central Processing Unit，中央处理器，是计算机的核心部件，是计算机的大脑，是计算机的运算核心和控制核心（运算器 + 控制器）。 内存 冯诺依曼计算机结构中的存储器分为 内部存储器 和 外部存储器： 内部存储器：称为内存（或称主存）是用来存放欲执行的程序和数据。 外部存储器：主要存放“暂时”用不着的程序和数据，可以和内存交换数据。一般是磁盘、光盘、U盘、硬盘等。 内存是计算机的重要组成部分，是计算机的临时数据存储器，是计算机的主要存储器件，是计算机的运算器和控制器能直接寻址的存储空间。 内存在计算机中是一块连续地址空间，用于存储数据和指令。操作系统根据程序的需要和内存资源的可用性来分配和管理不同的内存区域，以便更好地管理和使用内存资源，并确保程序可以正确运行并且不会相互干扰。每个内存区域在功能和用途上都有所不同，这些区域的划分和管理方式可能因操作系统、硬件体系结构和编程语言而异。 内存的主要区域： 代码段（Text Segment）：也称为指令段，存储程序的指令，即编译后的机器码。这些指令在程序执行时被加载到内存中，由 CPU 执行。通常是只读的。 数据段（Data Segment）：存储已经初始化的全局变量、静态变量和常量。这些变量在程序运行时保持不变，其值可以被读取和修改。 BSS 段（BSS Segment）：存储未初始化的全局变量和静态变量。这些变量在程序启动时会被初始化为零或默认值。 堆（Heap）：用于动态内存分配。程序可以在运行时向堆申请一块特定大小的内存，用于存储动态创建的对象、数据结构等。堆的大小通常可以动态调整。 栈（Stack）：存储局部变量、函数参数、返回地址以及其他临时数据。栈是一种后进先出（LIFO）的数据结构，用于管理函数调用和返回。 内核区域（Kernel Area）：也称为内核空间，是操作系统的核心部分，用于管理系统资源、驱动硬件设备等。用户程序不能直接访问内核区域。 栈帧（Stack Frame）：在栈中，每个函数调用都会创建一个栈帧，用于存储函数的局部变量、参数和返回地址等信息。 常量区（Constant Area）：存储字符串常量等不可修改的数据。 虚拟内存区域（Virtual Memory）：在某些操作系统中，使用虚拟内存将物理内存扩展到硬盘上，使得程序可以使用比实际物理内存更大的地址空间。 不同区域的差异： 区域的属性：不同区域有不同的功能，并且它们可能具有不同的属性，例如访问权限、可读写性等。例如，代码段通常是只读的，因为程序的指令不应该被修改；而堆和栈区域通常是可读写的，以便程序动态地分配和使用内存。 速度差异：内存区域的读写速度可能会有所不同。栈区域通常在访问速度上较快，因为它是由硬件的堆栈指令支持的。堆的读写速度可能相对较慢，因为它涉及到动态分配和管理。 硬件支持：不同的内存区域可能受到硬件的不同支持。例如，栈操作有专门的硬件支持，而堆操作通常需要通过操作系统的内存管理器来实现。 分配和释放：堆和栈的内存分配和释放通常需要程序员显式地管理，而代码段、数据段、BSS 段的分配和释放在程序执行期间由操作系统和编译器自动管理。 程序 程序是计算机能够识别和执行的一系列指令的集合。一段普通的 C 语言程序如下： #include int main(void) { int a = 1; printf(\"hello world, a=%d\\n\", a); return 0; } 所有编程语言（如果能被当前指令架构的 CPU 所识别）都可以生成一个可执行文件（如在 windows 中该文件就是 .exe 文件），这个可执行文件就是一系列 CPU 能够识别和执行的指令集合。 程序的什么因素会影响 CPU 负载？ 代码的数量本身不会直接影响 CPU 的负担。CPU 在执行程序时，需要不断地获取指令并执行它们，无论代码的数量有多少。代码越多，CPU 需要执行的指令也会增加，但这主要影响的是程序的执行时间，而不是直接影响 CPU 的负载。 运算多了会影响 CPU 负载，因为进行大量的算术和逻辑运算需要 CPU 资源。运算密集型任务可能会导致 CPU 使用率增加，导致其工作负载变重。 一个典型的运算密集型任务就是通过递归来实现计算斐波那契数列的第 n 项，因为递归会涉及大量重复运算。以下是 C 语言代码实现示例： 请注意，此示例仅用于演示运算密集型任务，实际上，使用递归计算斐波那契数列并不是最优的方式，因为它在大量重复计算中效率较低。更好的方法是使用迭代或动态规划等技术来计算斐波那契数列。 #include // 计算斐波那契数列的第 n 项（递归方式） unsigned long long fibonacci(int n) { if (n 程序的什么因素会影响内存占用？ 代码经编译后形成可执行文件，当要运行该可执行文件时，操作系统负责将程序从硬盘加载到内存中，这个过程涉及分配一块内存来存放程序的代码和数据。 以 C 语言为例的程序运行时内存布局： 代码段（Text Segment）：可执行文件的代码段包含程序的指令，即程序的机器码。这些指令在程序运行时会被加载到内存中，并由 CPU 执行。这个段也被称为“文本段”，它存储了程序的可执行指令。 数据段（Data Segment）：数据段包含程序中初始化的全局变量和静态变量。这些变量在程序运行时保持不变，它们的值被保存在这个段中。数据段还可以包括程序中的字符串常量。 堆（Heap）：堆是用于动态内存分配的区域，用于存储程序运行时创建的对象和数据结构。堆的大小可以在运行时动态调整。 栈（Stack）：栈用于存储函数调用时的局部变量、参数和返回地址。它是一种后进先出（LIFO）的数据结构，用于管理函数的调用和返回。 BSS 段（Block Started by Symbol）：BSS 段用于存储未初始化的全局变量和静态变量。这些变量在程序启动时会被初始化为零或默认值。 尤其像 C 语言没有实现自动内存管理，任何因编写的代码、算法、数据结构以及程序的执行方式等因素都可能会影响内存的使用情况。 动态内存分配：使用 malloc()、calloc() 或 realloc() 等函数在堆中动态分配内存时，如果不正确地管理内存，可能导致内存泄漏（未释放内存）或内存碎片化（堆中的碎片过多）。 大型数据结构：声明大型的数组、结构体或其他数据结构，尤其是在栈上分配大型数组时，可能导致栈溢出或消耗大量栈空间。 递归：不正确的递归算法可能导致递归层级过深，从而消耗大量栈空间。没有合适的终止条件可能导致栈溢出。 大规模循环：使用循环处理大量数据时，如果不恰当地分配内存或者没有释放不再需要的内存，可能会导致内存消耗过多。 内存泄漏：在动态分配内存后未释放内存，或者释放内存的顺序不正确，可能导致内存泄漏，最终导致程序运行时内存越来越多。 资源管理问题：未关闭文件、套接字或其他资源可能会导致资源泄漏，进而影响内存使用。 复杂的数据处理：如果代码涉及复杂的数据处理、数据转换或算法，可能需要临时的额外内存空间来存储中间结果，从而增加内存使用。 第三方库和框架：使用第三方库或框架时，这些库可能会消耗大量内存，尤其在不正确使用或配置的情况下。 按照程序任务的划分来考虑影响效果？ 程序的具体作用就是用来处理特定计算机任务，不同类型的任务在消耗内存和 CPU 方面会有不同的特点，没有一个固定的规律适用于所有情况。以下是关于每种任务类型可能如何影响内存和 CPU 的一些示例： 运算密集型任务：需要大量 CPU 计算操作的任务，而不涉及太多的数据读写操作。通常包括：数值模拟、密码学、图像和视频处理、科学计算、3D 渲染等. CPU：主要依赖于 CPU 的运算能力，会占用大量的 CPU 资源。 内存：通常情况下，运算密集型任务对内存的需求相对较低，因为它们主要关注于计算操作，而不是大量的数据存储。 I/O 密集型任务：涉及大量的输入和输出操作，例如从文件或网络中读取数据，将数据写入文件，与数据库进行交互等。在这种情况下，CPU 往往需要等待 I/O 操作完成，因此程序的执行时间可能会主要受限于 I/O 操作的速度. CPU：的使用可能相对较少，因为在进行 I/O 操作时，CPU 往往需要等待外部设备的响应。 内存：可能会占用较多的内存，因为需要存储大量的输入和输出数据。 用户界面任务：程序可能需要与用户进行交互，例如通过图形用户界面（GUI）或命令行界面。这些任务涉及用户输入的处理、图形显示、界面元素的布局等. CPU：取决于界面的复杂程度和用户的交互行为。 内存：可能会占用一定的内存，以存储图形元素、界面组件等。 并发任务：指程序中有多个同时运行的部分，可能是多个线程或进程。这些任务可以是独立的，同时运行并协调彼此之间的交互. CPU：并发任务可能会涉及多个线程或进程同时运行，这可能会导致 CPU 使用率增加。 内存：取决于并发任务之间的数据共享和通信需求。 批处理任务：批处理任务是一组指令的序列，通常在无需用户交互的情况下自动执行。这种任务常见于数据处理、自动化脚本、定时任务等场景. CPU：取决于任务的性质。 内存：取决于任务的性质。 实时任务：要求在特定的时间限制内完成，以满足某些时间性要求。例如，嵌入式系统中的实时任务需要在预定的时间内响应和处理事件. CPU：实时任务通常需要及时响应，因此可能会要求较低的延迟。这可能会导致增加 CPU 使用率，以确保任务按时完成。 内存：取决于任务的性质。 网络通信任务：程序可能需要通过网络与其他计算机或设备进行通信，例如 Web 应用、网络服务器等. CPU：取决于通信频率和数据量。 内存：网络通信任务可能会占用一些内存来管理连接和数据缓冲区。 数据处理任务：涉及对数据的转换、过滤、排序、汇总等操作，这些操作可能会涉及较少的运算，但需要有效的数据管理和处理算法. CPU：可能会受到数据操作和处理的性质影响。 内存：取决于处理的数据量和算法的复杂性。 文件管理任务：程序可能需要管理文件和文件系统，包括文件的创建、删除、移动、复制等操作. CPU：取决于文件操作的类型和频率。 内存：可能会占用一些内存用于维护文件系统的数据结构。 安全性任务：安全性任务包括保护数据、防止恶意攻击和数据泄漏等，这可能需要加密、身份验证等措施. CPU：安全性任务可能会涉及加密和解密操作，这可能会占用一些 CPU 资源。 内存：取决于安全性算法和数据处理需求。 后台任务：后台任务是在程序后台运行的任务，通常不需要用户直接干预。这可能包括数据备份、更新检查、自动化任务等. CPU：取决于任务的性质。 内存：可能会占用一些内存，以存储后台进程的数据。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/算法/":{"url":"技术文章/算法/","title":"算法","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/算法/动态规划.html":{"url":"技术文章/算法/动态规划.html","title":"动态规划.md","keywords":"","body":"动态规划什么是动态规划？题目；求和最大子数组题目：乘积最大子数组题目：0-1 背包问题TreeviewCopyright © aleen42 all right reserved, powered by aleen42 什么是动态规划？ 题目；求和最大子数组 题目：乘积最大子数组 题目：0-1 背包问题 动态规划什么是动态规划？ \"动态规划法的基本思想是将待求解问题分解成若干子问题，先求解子问题，再结合这些子问题得解得到原问题的解。与分治法不同的是，适合用动态规划法求解的问题经分解得到的子问题往往不是互相独立的\" 动态规划算法适合于解最优化问题，通常可按以下 4 个步骤设计：① 找出最优解的性质，并刻画其结构特征；② 递归地定义最优值；③ 以自底向上的方式计算最优值；④ 根据计算最优值时得到的信息，构造最优解。 「动态规划」中包含三个重要的概念： 【最优子结构】 【边界】 【状态转移公式】 题目；求和最大子数组 对于给定序列 a1,a2,a3…an，寻找它的某个连续子段，使得其和最大。 如 (-2, 11, -4, 13, -5, -2) 最大子段是 {11, -4, 13}，其和为 20。 题目：乘积最大子数组 题目：0-1 背包问题 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/系统设计/":{"url":"技术文章/系统设计/","title":"系统设计","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/系统设计/协程详解.html":{"url":"技术文章/系统设计/协程详解.html","title":"协程详解.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/系统设计/垃圾回收机制详解.html":{"url":"技术文章/系统设计/垃圾回收机制详解.html","title":"垃圾回收机制详解.md","keywords":"","body":"详解垃圾回收机制（GC）什么是内存内存中字节数垃圾如何产生直接引用 & 间接引用内存分区堆的数据结构基于 C 语言的内存模型变量类型总结堆的分配器内存管理组件垃圾回收常见算法Go 垃圾回收实现Python 的垃圾回收实现参考文章TreeviewCopyright © aleen42 all right reserved, powered by aleen42 详解垃圾回收机制（GC） 什么是内存 内存中字节数 垃圾如何产生 直接引用 & 间接引用 内存分区 堆的数据结构 基于 C 语言的内存模型 变量类型总结 堆的分配器 内存管理组件 垃圾回收常见算法 Go 垃圾回收实现 Python 的垃圾回收实现 参考文章 详解垃圾回收机制（GC）垃圾回收机制，又称 GC（Garbage Collection）是一种自动内存管理机制。 编程语言会使用自动或手动两种方式管理内存。手动内存管理需要用户显式地分配和释放内存资源，以避免内存泄漏和内存溢出问题，如：C、C++、Assembly、Rust。自动内存管理通常使用垃圾收集机制来自动管理内存，让开发者有更多精力去关注软件设计，而不是底层的内存问题，如：Python、Ruby、Go、Java。 什么是内存 计算机的存储是基于二进制（取值为 0 或者 1）的一种方式，最小的存储单元为比特（bit），八个比特拼在一起组成一个字节（byte），存储范围为 0000,0000 ~ 1111,1111（即 0~255）。字节是内存的最小存储单元，一系列字节连续排列在一起就组成了程序设计过程中需要打交道的内存。 内存中字节数 垃圾如何产生 在编程语言定义一个变量时（如：Python 中执行 name = \"fmw\"），操作系统会调用硬件，在内存中开辟一块空间，将值 \"fmw\" 存放在这块内存空间中，然后将变量名 name 与这块内存空间的地址绑定在一起，程序通过变量名 name 的调用来唯一访问值 \"fmw\"。 通过访问变量名（栈区），找到其对应存储的变量值的内存地址，进而访问到变量值（堆区）： x = 10 y = 20 直接引用 & 间接引用 通过栈区的变量名直接找到堆区的变量值，这种引用（访问）就是直接引用。 通过从栈区出发引用到堆区后，再进一步引用才能找到变量值的内存地址，这种是间接引用。 x = 10 # 值 10 被变量名 x 直接引用 l2 = [20, 30] # 列表本身被变量名 l2 直接引用，包含的元素被列表间接引用 l1 = [x, l2] # 列表本身被变量名 l1 直接引用，包含的元素被列表间接引用 内存分区 （基于 C 语言内存模型）程序在内存上被分为堆区（Heap）、栈区（Stack）、全局区（Global Area）、代码区（Code Area）、常量区（Constant Area）五个部分。在应用程序中会使用到两种内存，分别为堆（Heap）和栈（Stack），GC 负责回收堆内存，而不负责回收栈中内存。栈是线程的专用内存，专门为了函数执行而准备的，存储着函数中的局部变量以及调用栈，函数执行完后编译器可以将栈上分配的内存直接释放。堆是程序共享的内存，自动内存管理也就是回收在堆上分配的内存。 垃圾是指程序向堆栈申请的内存空间，随着程序的运行已经不再使用这些内存空间，这时如果不释放他们就会造成垃圾也就是内存泄漏。 package main // 假设每个人都有手机 type Person struct { phone *Phone } type Phone struct { money int } func main() { // 定义一个人 p := new(Person) // 一开始用的是 iphone12 iphone := &Phone{money: 6599} p.phone = iphone // 后来用华为 huawei := &phone{money: 5899} p.phone = huawei } phone 从 iphone 变成华为后，iphone 所指向的内存空间就变成了垃圾。如果不及时对这些垃圾内存进行回收，就有可能造成内存泄漏。 堆的数据结构 基于 C 语言的内存模型 变量类型总结 变量种类变量类型变量名变量声明元素类型相应的指针类型size 非数组变量intaint a;N/Aint*4 charbchar b;N/Achar*1 floatcfloat c;N/Afloat*4 int*dint* d;N/Aint**4 char*echar* e;N/Achar**4 float*ffloat* f;N/Afloat**4 数组变量int[2]gint g[2];intint(*)[2]8 char[2][3]hchar h[2][3];char[3]char(*)[2][3]6 float[2][3][4]ifloat i[2][3][4];float[3][4]float(*)[2][3][4]96 int*[2]jint* j[2];int*int*(*)[2]8 char*[2][3]kchar* k[2][3];char*[3]char*(*)[2][3]24 float*[2][3][4]lfloat* l[2][3][4];float*[3][4]float*(* )[2][3][4]96 堆的分配器 Allocator malloc realloc free 内存管理组件 垃圾回收器的执行过程被划分为两个半独立的组件： 赋值器（Mutator）：负责将存活对象从一个内存区域（通常是堆内存）复制到另一个内存区域的组件。 回收器（Collector）：负责执行垃圾回收的代码。 用户程序（Mutator）会通过内存分配器（Allocator）在堆上申请内存，而垃圾收集器（Collector）负责回收堆上的内存空间，内存分配器和垃圾收集器共同管理着程序中的堆内存空间。 垃圾回收常见算法 引用计数 每个对象维护一个引用计数，当被引用对象被创建或被赋值给其他对象时引用计数自动 +1。如果这个对象被销毁，那么计数 -1，当计数为 0 时，回收该对象。 代表语言：Python、PHP、Swift 优点：对象可以很快被回收，不会出现内存耗尽或者达到阈值才回收。 缺点：不能很好的处理循环引用。 标记-清除 从根变量开始遍历所有引用的对象，引用的对象标记“被引用”，没有标记的则进行回收。 代表语言：Go 优点：解决了引用计数的缺点。 缺点：需要 STW（stop the world），暂时停止程序运行。 分代回收 Go 垃圾回收实现 Python 的垃圾回收实现 一句话总结就是：引用计数为主，标记清除和分代收集为辅。 Python 对象的核心就是一个结构体： typedef struct_object { int ob_refcnt; struct_typeobject *ob_type; } PyObject; 参考文章 python变量储存 python变量存储机制 python垃圾回收机制，面试必备，学完吊打面试官（基于C源码剖析） GO进阶(5) 垃圾回收机制 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"技术文章/系统设计/多租户系统架构设计.html":{"url":"技术文章/系统设计/多租户系统架构设计.html","title":"多租户系统架构设计.md","keywords":"","body":"多租户系统架构设计1. 什么是多租户系统TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. 什么是多租户系统 多租户系统架构设计1. 什么是多租户系统 常用于在 SaaS 产品中。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/句子摘抄/":{"url":"日常记录/句子摘抄/","title":"句子摘抄","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/句子摘抄/短句.html":{"url":"日常记录/句子摘抄/短句.html","title":"短句.md","keywords":"","body":"人工智能的危险已迫在眉睫，未来 5 年内人类就可能被人工智能超越。 —— 埃隆·马斯克 2020.07.28 生活中只有两种悲剧：一种是没有得到我们想要的，另外一种是得到了我们想要的。 ——王尔德 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/工作/":{"url":"日常记录/工作/","title":"工作","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/工作/外接项目/":{"url":"日常记录/工作/外接项目/","title":"外接项目","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/工作/外接项目/之江实验室/":{"url":"日常记录/工作/外接项目/之江实验室/","title":"之江实验室","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/工作/外接项目/之江实验室/复盘分析系统.html":{"url":"日常记录/工作/外接项目/之江实验室/复盘分析系统.html","title":"复盘分析系统.md","keywords":"","body":"复盘分析系统问题？设计为什么不用 flask swagger-ui 而是用其他在线 api 文档工具为什么需要测试用例？表TODO需求拆分登录页面TreeviewCopyright © aleen42 all right reserved, powered by aleen42 复盘分析系统 1. role based 登录、管理 问题？ 设计 为什么不用 flask swagger-ui 而是用其他在线 api 文档工具 为什么需要测试用例？ 表 TODO 需求拆分 登录页面 复盘分析系统工作 开发 2023-08-28 19:26:00 role based 登录、管理 前端是 vue，用 token 验证。 后端用 flask，现在用 flask-jwt-extended 做好了单一权限的用户注册、登录、编辑 一个数据库，9个表，要写一些增删查改。现在目前表建好了，业务已经写了一部分吧，我还没具体review另一个后端小姐姐的代码。用的 Flask-SQLAlchemy 主要需求是算法团队做实验，我们把实验数据的“路径”，实验结果的“路径”存到数据库里；然后再存一些实验中发生的问题，实验结论。为了方便以后查看。 现在团队有两个前端，两个外行临时来做后端 = = 出海后得到一些数据，在返航后分析数据 问题？ 增删改查需求 用户权限、用户身份表的额外设计 P49. 表数据在前端的展示（查找、过滤、返回结构）涉及到大量额外查询接口. P8. 图片下载、数据下载、生成文件等额外业务功能接口. P23. 您好，看完那些资料后我有几个问题想确认下： 关于 中，虽然您说让我不用管这个时间，但是我想确认的是最终交付是按照 中 \"第二个里程碑\" 为准吗？ 实验管理界面设计一些额外的表结构设计（包括权限、角色）、数据下载上传、前端特定格式展示 实验分析界面涉及大量额外查询接口、图片下载、数据下载、文件生成的业务。 演示文稿中的内容是团队自己做的还是需求方给的？ 实现效果的预期有吗？ 大家额外开发时间有多少？ 设计 实验管理界面、部分实验分析界面（大概 10 个？） 后端进行登录界面功能开发、实验管理功能开发；matlab 多线程调用分析功能开发；与前端交互接口 API 设计；数据库增删查改接口开发；编写单元测试用例 前后端对接 API 接口，联调功能与界面 后端按一阶段的完成情况和客户反馈，进行一阶段界面功能改进、问题修复；补充未完成的分析界面的算法调度、参数调整功能以及数据库的操作优化、组合查询功修改改进；开发权限管理功能，对用户、角色进行数据库建设和功能管理；开发过程与前端联调； 为什么不用 flask swagger-ui 而是用其他在线 api 文档工具 变量管理 认证访问 为什么需要测试用例？ 验证功能：测试用例可以确保你的代码实现了预期的功能，从而提高用户满意度。 Bug 检测和修复：即使是小项目，也可能存在潜在的错误。测试用例可以帮助你及早发现和修复 bug，防止在生产环境中出现问题。 代码稳定性：测试用例可以确保项目在修改和扩展代码时不会产生意外的副作用，从而保持代码的稳定性。 项目可维护性：测试用例可以作为文档，帮助你和其他开发者理解代码的预期行为和功能。当你回顾项目或其他开发者接手项目时，测试用例能提供清晰的指导。 持续集成和部署：在持续集成和部署流程中，自动化测试可以帮助你快速发现问题，从而确保每次部署都是可靠的。 防止回归问题：当你修改代码时，测试用例可以防止已经修复的问题再次出现，避免回归问题。 节省时间和资源：尽早发现和修复问题可以避免将问题推迟到项目后期，节省时间和资源。 提高开发速度： 测试用例可以让你更自信地重构和扩展代码，从而提高开发速度。 表 任务信息表：t_task_info 舰艇信息表：t_ship_info 阵信息表：t_array_info 上报事件表：t_event_info 航路信息表：t_route_info 数据存储路径表（包含阵的原始数据、音视频数据等各类以文件形式存储的数据）：t_datapath_info 实验信息表：t_experiment_info 分析结果表：t_experiment_analysis 实验结论表：t_experiment_conclusion 一个任务对应对个舰艇，一个舰艇对应多个阵 TODO [ ] 0829 创建 接口文档 [ ] 0830 根据阶段性任务补充对应需求的接口（请求方法，请求路径，请求体） [ ] 将 sqlite 改为 mysql（交付前） [x] 确认 api 设计 [ ] 0831 创建表，并添加 app，完善部分接口 [ ] 前端人员在页面开发中随时补充测试用例文档 [ ] 前端人员如果需要接口支持，补充在文档里，比如获取算法列表接口 [ ] 接口路由划分及定义 [ ] sqlalchemy model 定义和表设计文档不符，外键写在哪个里面？（我推荐 model 定义那样实现） model 定义版本： Task: id, name, ships(by framework) Ship: id, name, task_id 一个 Task 包含多个 Ship Task: 1, t1 2, t2 Ship: 1, s1, 1 2, s2, 1 总结：1对n，n那个模型去定义外键，这样可以通过1直接查到n 文档定义版本： ``` Task: id, name, ship_id Ship: id, name 一个 Task 包含多个 Ship Task: 1, t1, 10 1, t1, 11 Ship: 10, s10 11, s11 需求拆分 【安排】 每阶段的安排大致如下： 整理接口文档并完善 制定接口测试用例并完善 完成接口功能开发 构建数据并做前后端联调 根据测试用例结果修改 bug 或补充文档 === 【举例】 以第一阶段 9.3 前 [v0.1.5 完整时域波形分析] 任务为例： 8.30前完成(1day)：关于 1,2 今晚我会整理好 接口文档 和 接口测试 用例大纲，大家明天根据开发需求补充完整. @前后端人员一起 9.1前完成(2day)：针对接口文档，前端做页面，后端做接口. 9.2前完成(1day)：前后端联调，后端负责将测试数据构建好存入 sqlite，前端（或其他测试）人员运行前后端环境按测试用例进行测试. 9.3前完成(1day)：根据测试用例结果修改 bug 或补充遗漏接口. === 【说明】 接口文档：明确有哪些接口要实现，这些接口功能是什么？是否需要身份认证？请求方法是什么？请求路径是什么？请求体是什么？正确/错误的响应结构是什么？ 测试用例：用户所有的操作路径、边界情况、错误处理、（性能、安全）... 测试是否符合预期范围 登录页面 登录接口 POST /api/authentication/login {\"username\": \"admin\", \"password\": \"admin\"} === 附加功能： 删除系统 立即删除，但有回收站系统 删除前的丰富确认（哪些能立即删除，哪些有删除前的前置约束） 插件系统 用户可以自定义插件 队列形式的实验分析 嗯... 那如果是这样，系统可以这样设计，开始分析实验，前端也不用转圈圈等待，直接告诉用户，实验正在分析。然后把实验分析进度放到（比如页面下方的）任务队列中。每当任务队列中一个分析任务完成，页面右上角给个提示，“xxx 实验已分析完成...”，用户可以点击直接跳转到该页面查看该次分析结果。或者可以手动进入对应页面，通过查看历史分析记录，获取该次的实验结果。这样用户就可以先进入实验1，选好参数开始分析，然后进入实验2，选好参数开始分析（或某个实验选不同参数进行多次分析）。最后再把任务队列打开，实时查看各任务分析进度，也可以取消某次分析。 缓存系统 缓存实验结果数据 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/杂项（暂未归档）/":{"url":"日常记录/杂项（暂未归档）/","title":"杂项（暂未归档）","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/杂项（暂未归档）/开发的项目.html":{"url":"日常记录/杂项（暂未归档）/开发的项目.html","title":"开发的项目.md","keywords":"","body":"开发过的项目/工具/插件/应用gitbook 归档插件TreeviewCopyright © aleen42 all right reserved, powered by aleen42 开发过的项目/工具/插件/应用 gitbook 归档插件 开发过的项目/工具/插件/应用技术 项目 开发 2023-08-27 03:29:00gitbook 归档插件 时间：2023-08-25 ~ 2023-08-26（周五周六） 项目名称：gitbook 归档插件 项目地址：github.com/fmw666/gitbook-plugin-archive console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/生活感悟/":{"url":"日常记录/生活感悟/","title":"生活感悟","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/读书笔记/":{"url":"日常记录/读书笔记/","title":"读书笔记","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/读书笔记/牧羊少年奇幻之旅.html":{"url":"日常记录/读书笔记/牧羊少年奇幻之旅.html","title":"牧羊少年奇幻之旅.md","keywords":"","body":"牧羊少年奇幻之旅1. 读书笔记上部下部TreeviewCopyright © aleen42 all right reserved, powered by aleen42 牧羊少年奇幻之旅 1. 读书笔记 上部 下部 牧羊少年奇幻之旅2023-08-26 01:16:00出版社：北京十月文艺 作者：保罗·柯艾略 译者：丁文林 概览：本书描写了一个名为圣地亚哥的牧羊人 1. 读书笔记 上部 【P26】当总是面对同样的面孔，像在神学院里那样，就会渐渐让那些人成为生活的一部分。而由于他们是你生活的一部分，当然就想改变你的生活。如果你不像他们所期望的那样，他们就会不高兴。因为，对于该怎样生活，所有人都有固定的观念。但是他们对于自己该怎样生活却一头雾水。 【P30】有的时候，最好与羊群为伴，羊群不声不响，只顾吃草喝水。与书为伴也行，书总是在人们最想听故事的时候，告诉你一些意想不到的事情。但是，当人与人交谈的时候，有些人说的话会让我们无所适从，不知该怎样把谈话继续下去。 【P34】在这个星球上，存在一个伟大的真理：无论你是谁，无论你做什么，当你渴望得到某种东西时，最终一定能够得到，因为这愿望来自宇宙的灵魂。那就是你在世间的使命。 【P34】完成自己的天命是人类无可推辞的义务。万物皆为一物。当你想要某种东西时，整个宇宙会合力祝你实现愿望。 【P40】对她来说，生活日复一日，天天如此。实际上，每天都一成不变，是因为人们已经失去了对美好事物的敏锐感觉。 下部 【P148】明天卖掉你的骆驼，去买一匹马。骆驼令人看不透，它们就是走成千上万里，也不会露出疲惫之态，但突然之间就会跪倒在地，力竭而死。马则会逐渐显露疲劳，你随时会知道还能让它走多远，或者它会在何时死去。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/读书笔记/盐镇.html":{"url":"日常记录/读书笔记/盐镇.html","title":"盐镇.md","keywords":"","body":"盐镇目录序言盐约被弹起，也被掸落雷电闪在不远处有谁在釜溪河看见过鲑鱼白鹭飞走了到河的对岸去读书笔记TreeviewCopyright © aleen42 all right reserved, powered by aleen42 盐镇 目录 序言 盐约 被弹起，也被掸落 雷电闪在不远处 有谁在釜溪河看见过鲑鱼 白鹭飞走了 到河的对岸去 读书笔记 盐镇读书 笔记 2023-08-25 20:08:00出版社：新星出版社 作者：易小荷 目录 序言 盐约 被弹起，也被掸落 雷电闪在不远处 有谁在釜溪河看见过鲑鱼 白鹭飞走了 概览 1981 年，黄茜 为什么起这个标题 到河的对岸去 曾庆梅，1985年出生 读书笔记 社会学家费孝通在《乡土中国》里说，乡土社会是“礼治”的社会。这个“礼”未必指的都是彬彬有礼的东西，而是一种当地的传统。耳濡目染，这些才是在镇上生存的准则。 —— 《盐镇》· 到河的对岸去. p196 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/读书笔记/边城/":{"url":"日常记录/读书笔记/边城/","title":"边城","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/读书笔记/边城/1.关于作者.html":{"url":"日常记录/读书笔记/边城/1.关于作者.html","title":"1.关于作者.md","keywords":"","body":"关于作者作者简介TreeviewCopyright © aleen42 all right reserved, powered by aleen42 关于作者 作者简介 关于作者读书 笔记作者简介 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/面试/":{"url":"日常记录/面试/","title":"面试","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/面试/xxx.html":{"url":"日常记录/面试/xxx.html","title":"xxx.md","keywords":"","body":" 最终薪资 评估 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/面试/锤儿子科技-美国企业/":{"url":"日常记录/面试/锤儿子科技-美国企业/","title":"锤儿子科技-美国企业","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/面试/锤儿子科技-美国企业/1-coding测试题.html":{"url":"日常记录/面试/锤儿子科技-美国企业/1-coding测试题.html","title":"1-coding测试题.md","keywords":"","body":"Coding Challenge外企远程全职工作System ComponentsBasic requirementsBonusTo submit your project, please send jobs@fovus.co with the following Email titled “Coding Challenge Submission - [Full-time | Intern] - [Earliest job start date for this new job]”TreeviewCopyright © aleen42 all right reserved, powered by aleen42 System Components Basic requirements Bonus To submit your project, please send jobs@fovus.co with the following Email titled “Coding Challenge Submission - [Full-time | Intern] - [Earliest job start date for this new job]” Coding Challenge 外企远程全职工作 我们是美国企业，看重个人诚信，面试过程和工作中的任何失信行为与投机取巧之举都是零容忍。 完成此项目后，只有两轮面试。 不要求学历和经验，是为了给更多人机会。 简单英语读写要求，会用翻译软件即可。 此项目模拟我们现有产品技术栈，涵盖了我们用到的 80% 的 tools。 非算法面试，是因为会做题不等于会做项目。 非外包公司，直接跟美国公司签合同。 本公司无法提供 AWS 测试账号，但香港 AWS 账号是可以免费申请的，只需双币信用卡验证，本项目只会用到免费的服务和资源。遇到任何 AWS 问题请咨询 AWS 客服，请不要私信我们。 You are invited to build a simple full-stack project within 5 days. Free tier AWS resources should be enough for this project.We are keeping hiring. System Components2023-09-05 18:30:00 Responsive web UI (use ReactJS) with a text input and a file input Text input: “[InputText]” // [ ] means the string is changeable File input: [InputFile].txt [InputFile].txt content: “[File Content]” Submit button Upload the input file to S3 from the browser directly (do not send the file content directly to Lambda) S3 path: [BucketName]/[InputFile].txt Save the inputs and S3 path in DynamoDB FileTable via API gateway and Lambda Function id : [1] // auto-generated id via nanoid input_text: [InputText] input_file_path: [BucketName]/[InputFile].txt After the file is uploaded in S3 and added to DynamoDB, trigger a script run in a VM instance (EC2) via the DynamoDB Event. Create a new VM automatically Download the script from S3 to the VM (Upload the scripts to S3 via CDK or programmatically as the InputFile) Run the script in the VM Get the inputs from DynamoDB FileTable by id Download the input file from S3 [BucketName]/[InputFile].txt to the VM iii.Append the retrieved input text to the downloaded input file and save it as [OutputFile].txt [OutputFile].txt content: “[File Content] : [InputText]” Upload the output file to S3 1.S3 path: [BucketName]/[OutputFile].txt Save the outputs and S3 path in DynamoDB FileTable id : [1] output_file_path: [BucketName]/[OutputFile].out.txt erminate the VM automatically Basic requirements Use AWS CDK to manage AWS infrastructure (latest version) Use AWS SDK JavaScript V3 for Lambda (latest version, not V2) Do not put any AWS access key / credentials in your code. No SSH and no hard-coded parameters. Your parameter/variable names are reader-friendly. Your txt file in S3 is not public. Do not use any AWS Amplify frontend and backend resources. Follow the AWS Best Practices. After saving the inputs and S3 path in DynamoDB FileTable, your system will create a new VM (not a pre-provisioned VM) and trigger the script to run automatically with error handling. Bonus Early submission is a big plus Use AWS Cognito as API-Gateway Authorizer Your frontend code is hosted in S3 or Amplify (not backend) Use Flowbite TailwindCSS and ReactJS for Responsive UI To submit your project, please send jobs@fovus.co with the following Email titled “Coding Challenge Submission - [Full-time | Intern] - [Earliest job start date for this new job]” Demo - screenshots or videos Your source code (don't zip) in Cloud Drive or private git repo shared with xuanyi@fovus.co (don’t put it in any public git please) A README on how to set up and run your code (make sure I can deploy your code and test it by following your steps) A list of references that you used for coding. Your latest resume. Your online interview availability with us for the next 2 weeks. If you are qualified (finish all basic requirements), you will get our interview invite within 5 days. console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/面试/锤儿子科技-美国企业/2-coding测试题解读.html":{"url":"日常记录/面试/锤儿子科技-美国企业/2-coding测试题解读.html","title":"2-coding测试题解读.md","keywords":"","body":"解读翻译系统组件基本要求奖金要提交您的项目，请发送 jobs@fovus.co 并附上以下标题为“编码挑战提交 - [全职 | 全职] 的电子邮件” 实习生] - [这项新工作的最早工作开始日期]”解读TreeviewCopyright © aleen42 all right reserved, powered by aleen42 解读 翻译 系统组件 基本要求 奖金 [要提交您的项目，请发送 jobs@fovus.co 并附上以下标题为“编码挑战提交 - [全职 | 全职] 的电子邮件” 实习生] - [这项新工作的最早工作开始日期]”](#要提交您的项目，请发送-x6a111x62x73x40x66x6f118x75115x2ex63111-并附上以下标题为编码挑战提交---全职--全职-的电子邮件-实习生---这项新工作的最早工作开始日期) 解读 解读2023-09-05 18:47:00翻译 系统组件 具有文本输入和文件输入的响应式 Web UI（使用 ReactJS） 文本输入：“[InputText]” // [ ]表示字符串可更改 文件输入：[InputFile].txt [InputFile].txt内容：“[文件内容]” 提交按钮 直接从浏览器将输入文件上传到 S3（不要将文件内容直接发送到 Lambda） S3路径：[BucketName]/[InputFile].txt 通过 API 网关和 Lambda 函数将输入和 S3 路径保存在 DynamoDB FileTable 中 id : [1] 通过 nanoid 自动生成 id 输入文本：[输入文本] 输入文件路径：[BucketName]/[InputFile].txt 文件上传到 S3 并添加到 DynamoDB 后，通过 DynamoDB 事件触发在 VM 实例 (EC2) 中运行的脚本。 自动创建新虚拟机 将脚本从 S3 下载到 VM（通过 CDK 或以编程方式将脚本作为输入文件上传到 S3） 在虚拟机中运行脚本 按 id 从 DynamoDB FileTable 获取输入 将输入文件从 S3 [BucketName]/[InputFile].txt 下载到 VM 将检索到的输入文本附加到下载的输入文件并将其另存为[OutputFile].txt [OutputFile].txt 内容：“[文件内容]：[InputText]” 将输出文件上传到 S3 S3路径：[BucketName]/[OutputFile].txt 将输出和 S3 路径保存在 DynamoDB FileTable 中 编号：[1] 输出文件路径：[BucketName]/[OutputFile].out.txt 自动终止虚拟机 基本要求 使用 AWS CDK 管理 AWS 基础设施（最新版本） 使用适用于 Lambda 的 AWS 开发工具包 JavaScript V3（最新版本，而非 V2） 不要将任何 AWS 访问密钥/凭证放入您的代码中。 没有 SSH，也没有硬编码参数。 您的参数/变量名称是读者友好的。 您在 S3 中的 txt 文件不公开。 请勿使用任何 AWS Amplify 前端和后端资源。 遵循 AWS 最佳实践。 在 DynamoDB FileTable 中保存输入和 S3 路径后，您的系统将创建一个新 VM（不是预先配置的 VM）并触发脚本自动运行并进行错误处理。 奖金 尽早提交是一个很大的优势 使用 AWS Cognito 作为 API 网关授权方 您的前端代码托管在 S3 或 Amplify 中（不是后端） 使用 Flowbite TailwindCSS 和 ReactJS 实现响应式 UI 要提交您的项目，请发送 jobs@fovus.co 并附上以下标题为“编码挑战提交 - [全职 | 全职] 的电子邮件” 实习生] - [这项新工作的最早工作开始日期]” 演示 - 屏幕截图或视频 您的源代码（不要压缩）在 Cloud Drive 或与 xuanyi@fovus.co 共享的私人 git 存储库中（请不要将其放在任何公共 git 中） 关于如何设置和运行代码的自述文件（确保我可以按照您的步骤部署您的代码并对其进行测试） 您用于编码的参考列表。 你最新的简历。 您在接下来的两周内可以接受我们的在线面试。 如果您符合资格（完成所有基本要求），您将在 5 天内收到我们的面试邀请。 解读 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"日常记录/面试/面试记录.html":{"url":"日常记录/面试/面试记录.html","title":"面试记录.md","keywords":"","body":"面试记录TreeviewCopyright © aleen42 all right reserved, powered by aleen42 面试记录 面试记录面试 记录 2023-08-29 01:49:00跟踪状态可选：打招呼未读、打招呼已读不回、投简历未读、投简历已读不回、简历未通过、一面未通过、二面未通过、已招满. 无论怎样，一定要让尽最大努力对方读取消息并回复，尽管可能是拒绝，但是至少要得到回复并记录. 公司名称 公司规模 地点 应聘岗位 薪资范围 投递时间 跟踪 涿溪实验室 20~99 杭州·余杭区·未来科技城 Python 研发工程师 16-22k 2023-08-28 前往 → Apifox 20~99 广州·天河区·天河北 Python 工程师 13-18k·13薪 2023-08-28 投简历未读 万马汇科技 20~99 上海·徐汇区·漕河泾 Golang 开发 20-25k 2023-08-28 投简历已读不回 迅雷网络 1000~9999 深圳·南山区·科技园 Golang 高级开发工程师 25-45k·16薪 2023-08-28 投简历已读不回 理灵文化 20~99 杭州·滨江区·长河 Python 后端开发工程师 10-15k 2023-08-28 投简历已读不回 比邻星 20~99 杭州·拱墅区·上塘 Golang 后端开发工程师 10-15k 2023-08-28 投简历已读不回 荔藤 20~99 杭州·余杭区·仓前 Web3 后端开发 15-20k 2023-08-28 投简历已读不回 成功软件 100~499 杭州·西湖区·三墩 Golang 后端开发工程师 10-15k 2023-08-28 简历未通过 Longbridge 长桥 100~499 杭州·西湖区·西溪 Golang 开发工程师 22-40k·15薪 2023-08-27 打招呼未读 心光流美 100~499 杭州·滨江区·长河 Golang 开发工程师 11-22k·13薪 2023-08-27 打招呼已读不回 上海优宁维 500~999 上海·浦东新区·迪士尼 Python 开发工程师 15-23k·13薪 2023-08-27 投简历已读不回 懂球帝 100~499 杭州·滨江区·西兴 后端开发工程师 15-30k 2023-08-26 打招呼未读 云尖信息 1000~9999 杭州·萧山区·北干 Golang 开发工程师 12-20k·13薪 2023-08-26 打招呼已读不回 好省 100~499 杭州·余杭区·五常 Golang 研发工程师 15-25k·13薪 2023-08-25 投简历已读不回 上海西井科技 500~999 上海·长宁区·中山公园 Python 工程师 13-19k·13薪 2023-08-24 一面未通过 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/":{"url":"知识笔记/哲学类/","title":"哲学类","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/MaxWeber/":{"url":"知识笔记/哲学类/MaxWeber/","title":"MaxWeber","keywords":"","body":"Max Weber —— 马克斯韦伯1. Why does Capitalism exist?i. Protestantism makes you feel guiltyii. God likes hard workiii. All work is holyiv. It's the community, not the family, that countsv. There aren't miracles2. How do you develop Capitalism around the world?3. How can we change the world?i. Traditional authorityii. Charismatic authorityiii. Rational-legal authority (Bureaucratic authority)TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. Why does Capitalism exist? i. Protestantism makes you feel guilty ii. God likes hard work iii. All work is holy iv. It's the community, not the family, that counts v. There aren't miracles 2. How do you develop Capitalism around the world? 3. How can we change the world? i. Traditional authority ii. Charismatic authority iii. Rational-legal authority (Bureaucratic authority) Max Weber —— 马克斯韦伯 马克斯韦伯是曾经尝试对我们目前所生活的资本主义体系做出解释的诸多哲学家之一。 1864 年韦伯出生在德国的 Erfurt，他正目睹工业革命给德国带来的巨变。在那个年代，资本家取代旧贵族成为社会主要阶层。韦伯用他的一生尝试去解释这些变化，并提出了几个关键概念来帮助我们理解资本主义和它的未来。 1. Why does Capitalism exist? 标准观点认为，资本主义是技术的扩展（比如蒸汽机的结果）。但韦伯有一个很有趣的观点，他认为资本主义可能首先来自于一系列宗教观点，而且不是所有的宗教，只限于新教。在他的巨作《新教理论和资本主义精神》中，韦伯给出了为何新教对资本主义起源如此重要的原因。 i. Protestantism makes you feel guilty 韦伯认为，天主教徒的精神生活会很轻松，他们定期忏悔，并且通过向神父赎罪来获得心理安慰。而新教没那么纯真，他们只相信神能赦免原罪，不到审判日没人能渗透它的意志。因此韦伯认为新教徒生活在高度的不安定感中，并带着终生有罪的观念去向全知全能的上帝赎罪。 ii. God likes hard work 韦伯认为这种负罪感被引导为了勤奋工作的理念。韦伯称之为 “新教徒的工作理念” —— The protestant work ethic，即原罪只能通过汗水来补救，因此新教有着更少的节日和休息日（神不喜欢休息）。 iii. All work is holy 天主教观点里，神圣工作仅限于神职。但新教徒宣传，所有工作哪怕是面包师和会计都是神圣的，都可以以上帝的名义进行。这为其他世俗工作提供了道德满足感和正当性。 iv. It's the community, not the family, that counts 天主教观念里，家庭往往就是一切。但新教徒没有这么刻板，对于早期的新教徒来说，一个人要把自己的无私奉献精力用于整个社会的公共领域，以此来保障每个人的公平和尊严。 v. There aren't miracles 无论是资本主义还是新教徒都不再相信神迹，韦伯称之为，世界的怯魅。—— The disenchantment of the world disenchantment. n. 醒悟，清醒；不抱幻想; 祛魅，意为对于科学和知识的神秘性、神圣性、魅惑力的消解。 祛魅（Disenchantment）一词源于 马克斯·韦伯 所说的 “世界的祛魅”（In the modern age we are witnessing the disenchantment of the world with the rise of science and the declining influence of religion.） 汉语也可译作“去魅”、“去魔”、“解魅”、“解咒”，是指对世界的一体化宗教性解释的解体，它发生在西方国家从宗教神权社会向世俗社会的现代型转型中。 所以繁荣并不被认为是什么上天注定的东西，它只有可能来自于辛勤的工作。摆脱了对神迹的迷信，人们开始用科学来寻求解释和变化，这就促进了科学研究和技术的猛涨。 韦伯认为这五点相互作用，催化了资本主义的诞生。 马克思说过，宗教是人民的鸦片，是诱使人民被动接受资本主义恐怖的毒品。韦伯反转了这一说法，人们并不是因为宗教洗脑而忍受资本主义，相反，他们因为宗教而成为资本主义者。 2. How do you develop Capitalism around the world? 目前全球大约有 35 个发达资本主义国家，其中就有韦伯的家乡——德意志，但剩下的国家却生活在贫困之中，这让人们感到困惑，每年都有几十亿富国到穷国的援助。但韦伯的分析告诉我们，物质援助永远解决不了问题，因为这从来不是一个物质问题。 韦伯认为这些国家太依赖于奇迹而不感到迫切，庆祝所得到的援助，而不投资于未来。那些穷国的人认为损公济私是可以的，即使这只会让小家族的人受益，而不是大共同体社会。如今，韦伯会劝告那些希望传播资本主义的人把精力放在传播宗教文化上，正是一个国家的态度和对生活的认知决定了经济的蓬勃发展与否。要减少贫困，必须从思想上入手。根据韦伯的分析，世界银行和国际货币基金组织应该给予撒哈拉以南非洲的不是金钱和技术，而是一个新的前景。 3. How can we change the world? 韦伯在革命年代写作，他也希望事情能够有所转变，但他认为首先要弄清楚政治权力是如何运作的。韦伯认为人类社会有三种截然不同的权力类型。 i. Traditional authority 按照韦伯所说，较早的社会是按照 传统权威 来运作的，那时的国王依靠民间传说和神性来证明其权力的合理性。 ii. Charismatic authority 然后是 克里斯玛型权威 的时代，在这个时代，一个英雄般的个人（最著名的比如 拿破仑）可以凭借个人魅力上台，通过激情和意志改变一切。 iii. Rational-legal authority (Bureaucratic authority) 韦伯解释说，我们已经进入到第三个时代 —— 法理权威。官僚机构通过管理知识和科层实现其权力，只有官僚们知道管理系统是如何运作的，外人要花好几年时间才能搞清楚。因此我们大多数人会就此放弃，这对当权者来说是有益的。 人们常常以为改变或辞退一个国家领导人就可以改变一些东西来实现自己要达成的目的。但如果我们要改变一些东西，很多事情必须通过以下途径来实现：外表上不太引人注意的官僚程序将通过收集统计数据、向部长们耐心介绍情况、参考委员会和听证会的证词，以及对预算进行详细研究。 韦伯告诉了我们权力是如何运作的，并提醒我们，在改变国家方面，思想可能比工具或金钱重要得多。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/MaxWeber/欧洲宗教改革历程.html":{"url":"知识笔记/哲学类/MaxWeber/欧洲宗教改革历程.html","title":"欧洲宗教改革历程.md","keywords":"","body":"欧洲宗教改革历程宗教改革为什么首先发生在德国？一、马丁路德改革（德国）【探究 1】基督教教义规定，人生来都是有原罪的，教皇兜售赎罪券有何不可？为什么？【探究 2】马丁路德的《九十五条论纲》中，第 39 条的依据是什么？二、加尔文改革（瑞士日内瓦）【探究 3】既然上帝早已预定谁能被救赎，那努力还有用吗？加尔文的改革能不能体现人文主义？三、英国宗教改革——一桩离婚案引起的改革亨利八世改革伊丽莎白一世改革总结TreeviewCopyright © aleen42 all right reserved, powered by aleen42 宗教改革为什么首先发生在德国？ 一、马丁路德改革（德国） 【探究 1】基督教教义规定，人生来都是有原罪的，教皇兜售赎罪券有何不可？为什么？ 【探究 2】马丁路德的《九十五条论纲》中，第 39 条的依据是什么？ 二、加尔文改革（瑞士日内瓦） 【探究 3】既然上帝早已预定谁能被救赎，那努力还有用吗？加尔文的改革能不能体现人文主义？ 三、英国宗教改革——一桩离婚案引起的改革 亨利八世改革 伊丽莎白一世改革 总结 欧洲宗教改革历程宗教改革首先发生于 德国，其后扩展到 瑞士日内瓦 宗教改革为什么首先发生在德国？ 这与中世纪德意志地区四分五裂是紧密相关的，四分五裂的状态方便了教会对这里进行搜刮。教皇曾亲切地称德意志为：我的奶牛。只要教皇想喝奶了，就到德意志那里去挤一挤。 马丁路德在维滕堡教堂前向民众宣读他的《九十五条论纲》，这是宗教改革的开始。 一、马丁路德改革（德国） 1517 年，马丁路德发表《九十五条论纲》，反对教皇兜售 赎罪券，标志着德意志宗教改革的开始。 【探究 1】基督教教义规定，人生来都是有原罪的，教皇兜售赎罪券有何不可？为什么？ 教皇本尼迪克十二世（1334 ~ 1342） 赎罪券价目表 罪名 赦免价 杀人罪 8 个金币 谋杀双亲或兄弟姐妹 6 个金币 伪造文书 7 个金币 注：一个金币大约等于 3.5 克纯黄金，一克黄金大约是 290 元，一个金币大约是现在 1000 元。 在那个时代下，只要有钱，都可以逃避惩罚，这是不公平的。马丁路德认为，人应该靠自己的行为来赎罪，而不是靠金钱。 赎罪券实际上成了教会敛财的工具，甚至鼓励人们犯罪，导致社会秩序混乱。 【探究 2】马丁路德的《九十五条论纲》中，第 39 条的依据是什么？ 《九十五条论纲》第 39 条：最博大的神学家，也很难自圆其说。如果他同时向信众鼓吹赎罪券的功效，又宣扬真诚悔罪的必要性。 依据出自《圣经》：富人上天比骆驼过针眼都难。 天主教：因行称义（善功、教阶、繁琐的仪式） 马丁路德宗：因信称义（靠自己的信仰即可得救） 马丁路德用德语翻译《圣经》，用民族语言传播宗教，形成民族意识，逐渐推动民族国家的形成。 二、加尔文改革（瑞士日内瓦） 加尔文于 1536 年出版《基督教原理》，提出 预定论/先定论，认为人的一生早已被上帝预定，人的一切都是上帝安排好的，人无法改变。 “被拣选者将永得上帝护佑，谁能被拣选，取决于上帝。” —— 于洪，《信仰的崩溃与重建》，第111页 【探究 3】既然上帝早已预定谁能被救赎，那努力还有用吗？加尔文的改革能不能体现人文主义？ 加尔文的预定论，是一种宿命论，是一种消极的思想，是一种不劳而获的思想，是一种不努力的思想。 上帝把人类分为 选民 和 弃民，选民得救，弃民沉沦。但是没有人能确认自己是选民还是弃民，大家都没见过上帝。也没有人看过上帝定的那份名单。 谁是选民，谁是弃民，这个标准就掌握在加尔文手里。加尔文认为：人在现世的成功与失败，就是得救与否的标志，就是选民与弃民的标志。（出自加尔文《基督教原理》） 所以加尔文认为，在人世间，你得努力地让自己成功。那对于资产阶级来说，获取更多的资产就是成功。因此鼓舞了新兴资产阶级的进取精神，所以说该教义更符合新兴资产阶级的利益，更为激进。 三、英国宗教改革——一桩离婚案引起的改革 亨利七世在位时期，让其儿子亚瑟王娶了西班牙公主凯瑟琳。但是亚瑟王还没继承王位就去世了，亨利七世为了维护与西班牙的关系，让其次子亨利八世娶了凯瑟琳，并继承王位。 亨利八世在这个时期喜欢上了凯瑟琳身边的陪嫁侍女安妮博林。亨利八世写了离婚申请书找到教皇，开始根据天主教的规定，天主教徒必须是一夫一妻制，教皇并不批准亨利八世的离婚。亨利八世一气之下，宣布自己成为英国国教的首领，由他自己担任英国国教的教皇，自己批准自己离婚。 亨利八世改革 通过《至尊法案》，英王为教会首脑，教皇无权干涉。 保留天主教基本教义和仪式。 伊丽莎白一世改革 重申《至尊法案》，神职人员都必须宣誓效忠国王。 通过了《三十九条信纲》，标榜信仰得救，把《圣经》定为信仰的唯一标准。 总结 类别 领导者身份 核心 马丁路德改革 修道士 因信称义 加尔文改革 修道士 先定论 英国改革（安立甘宗） 国王 确立英王为教会首脑 英国改革是自上而下的，解决了教俗关系，而非纯粹的神学问题。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/哲学—死亡/":{"url":"知识笔记/哲学类/哲学—死亡/","title":"哲学—死亡","keywords":"","body":"哲学——死亡哲学——死亡 笔记源自视频 【耶鲁大学】知名公开课：哲学 —— 死亡 | 谢利·卡根（Shelly Kagan） 形而上学（人的同一性） 价值论（如果死亡是终结，那它是坏事吗？） console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/死亡.html":{"url":"知识笔记/哲学类/死亡.html","title":"死亡.md","keywords":"","body":"死亡概要宗教科学TreeviewCopyright © aleen42 all right reserved, powered by aleen42 概要 宗教 科学 死亡概要 死亡 定义：不可逆。 理解死亡后会有恐惧感。这也是宗教的一个重要功能，驱散死亡恐惧。 宗教 所有的宗教都是为了解决死亡恐惧而产生的，回答的第一个问题都是人死后去哪里。 现在世界上存在的三大宗教：基督教、伊斯兰教、佛教。地理分布是：基督教主要分布在欧美，伊斯兰教主要分布在中东，佛教主要分布在东亚。 基督和伊斯兰的线不断来回争扯，几乎主导了过去 2000 年整个亚欧大陆战争动荡的原因。比如很多影视剧提到的十字军东征，就是基督教徒为了夺回耶路撒冷，而和伊斯兰教徒打了几百年的仗。耶路撒冷也是人类历史上战火最鼎盛的地方，因为基督教、伊斯兰教、犹太教都认为耶路撒冷是圣地，都想要占领耶路撒冷。因此耶路撒冷也被称为三大宗教的圣地，三教圣地。耶路撒冷在 1500 年间被屠城了 44 次，被攻陷了 118 次。 在我国，广东和福建等沿海地区的人群信佛的比例会高出很多，海洋之上的确有强烈的命定意识，相信凡事都是命中注定，可以缓解非常多的无力感。 佛教是一个非常典型的驱散死亡恐惧的模式。佛教死后有六道轮回，入六道，本是因下是果，因果循环，不断轮回，直到修成正果，成佛。 中国的传统道教也有类似的解释方式，人死后分为魂和魄，魂很轻往上，魄很重往下，三魂七魄两个方向走。 基督教和伊斯兰教都有天堂和地狱的概念，此生做好事，来世就能进天堂，此生做坏事，来世就会下地狱。 中国有很多杂糅，极其复杂，可以归纳统称为中国传统迷信。如清明烧纸钱，就是来自于拜火教，拜火教是一个古老的宗教，信仰火神，认为火神是最强大的神，可以驱散一切邪恶，所以要烧纸钱给火神，让火神驱散邪恶。 儒家对死亡没有解释，弟子问过孔子，说死了之后我们会到哪里？孔子说，未知生，焉知死。 道家给的解释更超脱，庄子老婆去世后，庄子敲锣打鼓，很开心，非常愉快。庄子认为伴侣去到了要去的地方，认为那是逍遥之境。（道法自然） 科学 所有宗教、迷信等多死亡的想象在近三四百年时间里无一例外的崩塌掉，所以才有现在普遍的死亡焦虑存在，好像至少在我们现代科学范畴之内，无法解释。 一位日籍的科普作家加来道雄，写了一本书，叫《平行宇宙》，用通俗的理论物理学解释和论证这个世界会有无数个平行宇宙。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/西方哲学史/":{"url":"知识笔记/哲学类/西方哲学史/","title":"西方哲学史","keywords":"","body":"西方哲学史西方哲学史 参考 武汉大学 赵林 《西方哲学史》 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/哲学类/西方哲学史/1-绪论.html":{"url":"知识笔记/哲学类/西方哲学史/1-绪论.html","title":"1-绪论.md","keywords":"","body":"绪论绪论 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/杂项（暂未归类）/":{"url":"知识笔记/杂项（暂未归类）/","title":"杂项（暂未归类）","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/杂项（暂未归类）/中国最后一个母系氏族—摩梭族.html":{"url":"知识笔记/杂项（暂未归类）/中国最后一个母系氏族—摩梭族.html","title":"中国最后一个母系氏族—摩梭族.md","keywords":"","body":"中国最后一个母系氏族 —— 摩梭族摩梭族的起源泸沽湖的摩梭人婚姻制度摩梭人现在的婚姻态度为什么摩梭人的婚姻制度在主流社会中不能推广TreeviewCopyright © aleen42 all right reserved, powered by aleen42 摩梭族的起源 泸沽湖的摩梭人婚姻制度 摩梭人现在的婚姻态度 为什么摩梭人的婚姻制度在主流社会中不能推广 中国最后一个母系氏族 —— 摩梭族摩梭族的起源 摩梭族位于四川泸沽湖。摩梭两个字最早见于西汉元鼎 6 年的《后汉书》以及《华阳国志》，当时称为 摩沙。现摩梭族基本居住在中国四川和云南的交界处一块。 泸沽湖的摩梭人婚姻制度 首先摩梭族中最出名的莫过于 “走婚” 一词。“走婚” 一词最早出现于我国五六十年代，当时去泸沽湖调研时的专家出版了两本书，一本叫做《永宁阿注婚姻》，最早他们把这种婚姻称之为 “阿注” 婚姻。摩梭族自己把这种婚姻模式称为 “sisi”，即 “出去走走” 的意思。因为摩梭语的语义概括性太强，“sisi” 表示 “两个人正在走婚” 的意思，在平常表示说 “散会儿步” 之类意思。 走婚制度：即男女双方纯感情约束的婚姻制。传统的走婚形式是，男方看上某个女方，需要给女方家里一些彩礼（通常只是水果、烟酒），然后晚上去女方房间羞羞，第二天一大早离开。女方可以与多个男性进行这样的羞羞 一旦女方有了孩子，那这个孩子，归属于男方大家庭和女方大家庭两方管，但是男女双方也不会过门，女方依然在自己大家庭生活，男方依然在自己大家庭生活。孩子一般归属于女方，女方也可以和其他男人继续羞羞，生孩子，生下来的孩子依然按照这个奉行。一旦男女双方出现感情破裂，即男方想找其他女的羞羞，那么孩子归女方，男方和女方没啥关系了。但是依据大家庭制度，他们共同的孩子有给男方送终的义务。所以这种走婚制就导致，一个大家庭中，会有很多小孩子，各个小孩子都不知道自己父母是谁，而且这也不重要。 为啥会出现这种走婚制呢？因为最早摩梭人信仰宗教，奉行《达巴经》，其中谈到男女双方结为夫妻，需要缴纳课税、媒礼税、宴席税等。为了逃税，男的看上某个女的，晚上就偷偷跑进女方房间，第二天天还没亮就溜走，因为怕被土司发现，生下孩子就共同养育，因此出现了这种形式的走婚。 摩梭人现在的婚姻态度 中国唯一一个母系氏族——摩梭族，因为旅游业等复杂关系影响，导致其大家庭中分配问题出现很多分歧，暴露了走婚制的大家庭弊端，因此摩梭族年轻人更多还是愿意组成自己小家庭。 摩梭族传统大家庭：即以一个祖母为家族核心，其下都是自己的家族成员，家族成员中没有明确的关系约束，都隶属于某个祖母的大家庭。 因为这是族群、小范围社会群体的选择，不是说个人或夫妻双方的奉行标准，能不能在我们所处社会适用，一定是看这种模式在社会上有没有保持的价值。那就基于他们自己摩梭年轻人来说，传统的农耕大家庭模式，在现在社会很难保持：传统农耕社会大家庭中每个人都有自己分配到的任务，而现在旅游业等行业的发展，年轻人出门干活，老年人在家休养、打牌，因此大家庭之内的分配出现一定分歧和矛盾。更多年轻人选择组成小家庭模式，即我们现在的父母单独住，年轻人单独住。而且现在摩梭族只有一个地方是纯粹的大家庭模式，现规模一大家人 28 个人，就说明这种模式本身在他们族群内也变成了小部分群体的选择。 为什么摩梭人的婚姻制度在主流社会中不能推广 摩梭族所在位置位于国家级贫困县深山老林里面，人口只有五万人。为什么呢？因为这种社会制度缺乏竞争力，他们根本走不出去，他们采用的是消极竞争的策略。古代山之移民、战争移民都是如此，避祸上山，即战争打完了，等到天下太平才想办法下山。好就好在，发现他们的是新中国，是秉持着共同发展和共同进步的中华民族的包容性。如果是 1840 年的英国人发现他们，甚至可能已经出现在博物馆、动物园里面了。被那些殖民者残害、剥削、压迫。因为摩梭族那样的族群没有任何能力抵御外部入侵。 男人都躺平了，社会如何发展？谁来组织发展？谁来组织家庭以外的劳动力去做该做的事情？为什么中国要打开国门和别人发展，为什么大清朝、大明朝固步自封最后就落后了。就是因为一个文明如果不能和别人做交融，它就一定会被历史淘汰，只有庆幸自己不要被发现，被发现就会被消灭。即《三体》中的 “黑暗森林法则”。落后的社会生产制度必然被先进的社会生产制度所淘汰。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/杂项（暂未归类）/音韵学/":{"url":"知识笔记/杂项（暂未归类）/音韵学/","title":"音韵学","keywords":"","body":"音韵学音韵学 参考 武汉大学 万献初 《音韵学》 https://www.bilibili.com/video/BV1v3411P7Mn console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/杂项（暂未归类）/音韵学/1-绪论.html":{"url":"知识笔记/杂项（暂未归类）/音韵学/1-绪论.html","title":"1-绪论.md","keywords":"","body":"绪论绪论 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/英语类/":{"url":"知识笔记/英语类/","title":"英语类","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/计算机类/":{"url":"知识笔记/计算机类/","title":"计算机类","keywords":"","body":"计算机类TreeviewCopyright © aleen42 all right reserved, powered by aleen42 计算机类 计算机类计算机 技术 python golang 微服务 开发 2023-08-27 23:58:00包含 Python、Golang、微服务、Docker、K8S console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/计算机类/AWS云计算/":{"url":"知识笔记/计算机类/AWS云计算/","title":"AWS云计算","keywords":"","body":"AWS 云计算AWS 云计算https://www.bilibili.com/video/BV1vW411G75e console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/计算机类/AWS云计算/1-什么是云计算.html":{"url":"知识笔记/计算机类/AWS云计算/1-什么是云计算.html","title":"1-什么是云计算.md","keywords":"","body":"什么是云计算？如何接入 AWS？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 什么是云计算？ 如何接入 AWS？ 什么是云计算？“云计算” 指按需交付的 IT 资源和应用程序，通过互联网使用，按使用量收费。是种新的交付模式，让用户可以像获取水、电、气这类资源一样快速获取 IT 资源，按需使用、按需付费。 按需使用 高弹性 超大规模 如何接入 AWS？ infrastructure as code 基础设施即代码. http://aws.amazon.com/tools/ RESTful API 接口 SDK 开发工具包 Command Line Interface 命令行工具 Management Console 管理控制台 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/逻辑类/":{"url":"知识笔记/逻辑类/","title":"逻辑类","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/逻辑类/本质和归因.html":{"url":"知识笔记/逻辑类/本质和归因.html","title":"本质和归因.md","keywords":"","body":"本质和归因本质和归因本质和表象是对立的一组词，本质是事物的内在属性，表象是事物的外在表现。本质和表象是对立的统一，本质决定表象，表象反作用于本质。 归因是指对事物的本质进行分析，找出事物的本质属性。归因是对本质的认识，是对本质的把握，是对本质的把握的过程。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"知识笔记/逻辑类/红鲱鱼谬误.html":{"url":"知识笔记/逻辑类/红鲱鱼谬误.html","title":"红鲱鱼谬误.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/":{"url":"经验分享/兴趣/","title":"兴趣","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/书评/":{"url":"经验分享/兴趣/书评/","title":"书评","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/影评/":{"url":"经验分享/兴趣/影评/","title":"影评","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/影评/天下第一刀.html":{"url":"经验分享/兴趣/影评/天下第一刀.html","title":"天下第一刀.md","keywords":"","body":"天下第一刀1. 电影信息TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. 电影信息 天下第一刀1. 电影信息 又名：一刀倾城 导演：洪金宝 上映日期： 1993-07-15 故事背景：故事发生在 1898 年的中国晚清。1895 年，甲午中日战争爆发，清朝惨败，以签署《马关条约》为结束，中国大大加深了半殖民地化程度。一大批爱国志士开始了新中国救亡图存之路，其中 1898 年，戊戌变法进入高潮，谭嗣同受京朝康老（康有为）引荐，上京推行新政。谭嗣同上京途中结识了大刀会王五、清朝官员袁世凯。变法失败后，谭嗣同为表自己变法决心，醒悟大众，甘愿被捕。王五得知后心急如焚，多方打探，密谋救谭，却遭谭嗣同拒绝。9 月 27 日，谭嗣同等“戊戌六君子”被监斩于宣武门外菜市口，王五得知后悲痛欲绝。1900 年，义和团反帝爱国运动在北方兴起，王五率众积极参加，与义和团并肩作战，杀洋人，攻打教堂。10 月 25 日，王五等顺源镖局团被清兵围住，因寡不敌众，被八国联军枪杀。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/记录/":{"url":"经验分享/兴趣/记录/","title":"记录","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/记录/看过的台剧.html":{"url":"经验分享/兴趣/记录/看过的台剧.html","title":"看过的台剧.md","keywords":"","body":"看过的台剧看过的台剧 不良执念清除师 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/记录/看过的日剧.html":{"url":"经验分享/兴趣/记录/看过的日剧.html","title":"看过的日剧.md","keywords":"","body":"看过的日剧番TreeviewCopyright © aleen42 all right reserved, powered by aleen42 番 看过的日剧龙樱 第一季/第二季 豆瓣链接：https://movie.douban.com/subject/1915312/ 孤独的美食家1 天国与地狱 宠女青春白皮书 全裸导演 第一季 继母与女儿的蓝调 行骗天下JP 弥留之国的爱丽丝 第一季 弥留之国的爱丽丝 第二季 核灾日月 我是大哥大 番 间谍过家家1 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/记录/看过的美剧.html":{"url":"经验分享/兴趣/记录/看过的美剧.html","title":"看过的美剧.md","keywords":"","body":"看过的美剧看过的美剧 我们有人在撒谎 第一季/第二季 怪奇物语 第一季/第二季/第三季/第四季 越狱 第一季/第二季/第三季/第四季 地球百子 第一季/第二季/第三季/第四季/第五季/第六季/第七季 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/记录/看过的韩剧.html":{"url":"经验分享/兴趣/记录/看过的韩剧.html","title":"看过的韩剧.md","keywords":"","body":"韩剧韩剧模范出租车 第一季 黑暗荣耀 第一季/第二季 太阳的后裔 顶楼 第一季/第二季/第三季 365：逆转命运的1年 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/追星/":{"url":"经验分享/兴趣/追星/","title":"追星","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/追星/taylorswift/":{"url":"经验分享/兴趣/追星/taylorswift/","title":"taylorswift","keywords":"","body":"Taylor Swift个人信息发行专辑获奖情况为什么粉丝叫她霉霉？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 Taylor Swift 个人信息 发行专辑 获奖情况 为什么粉丝叫她霉霉？ Taylor Swift测试 2023-08-21个人信息 姓名：Taylor Swift 中文名：泰勒·斯威夫特 又称：霉霉 国籍：美国 民族：美国人 出生地：美国宾夕法尼亚州雷丁 出生日期：1989 年 12 月 13 日 身高：178cm 体重：54kg 星座：射手座 职业：歌手、演员、词曲作家、音乐制作人 毕业院校：纽约大学 发行专辑 早期：童年和初次涉足音乐界（2006 年以前） [x] 2006年：《Taylor Swift》 乡村音乐时期（2006 年 ~ 2009 年） 流行音乐转型时期（2010 年 ~ 2014 年） 流行音乐巅峰时期（2014 年 ~ 2017 年） 2008年：《Fearless》 2010年：《Speak Now》 2012年：《Red》 2014年：《1989》 个人和社会探索时期（2017 年至今） [x] 2017年：《Reputation》 [x] 2019年：《Lover》 [x] 2020年：《Folklore》 [x] 2020年：《Evermore》 重置版时期 [x] 2021年：《Fearless (Taylor's Version)》 [x] 2021年：《Wildest Dreams (Taylor's Version)》 [x] 2021年：《Red (Taylor's Version)》 [x] 2022年：《Midnights》 [x] 2023年：《Speak Now (Taylor's Version)》 获奖情况 2007年：全美音乐奖最佳新人 2008年：全美音乐奖年度专辑《Fearless》 2009年：全美音乐奖年度专辑《Fearless》 2010年：全美音乐奖年度专辑《Fearless》 2010年：格莱美奖年度专辑《Fearless》 2010年：全美音乐奖年度艺人 2010年：全美音乐奖最佳乡村音乐女艺人 2010年：全美音乐奖最佳乡村音乐专辑《Fearless》 2010年：全美音乐奖最佳乡村音乐歌曲《White Horse》 2010年：全美音乐奖最佳乡村音乐歌曲《You Belong With Me》 为什么粉丝叫她霉霉？ 泰勒·斯威夫特因为出道时候年纪比较小，所以人们称她为小美女，在中文里“美”和“霉”同音，再加上每次当泰勒·斯威夫特冲击Billboard Hot100榜单冠军时，都会遇到强有力的对手，屈居亚军的位置，所以人们都觉得泰勒·斯威夫特非常倒霉，这就是“霉霉”的来历了。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/追星/taylorswift/2006_Taylor-Swift/":{"url":"经验分享/兴趣/追星/taylorswift/2006_Taylor-Swift/","title":"2006_Taylor-Swift","keywords":"","body":"2006 年 《Taylor Swift》专辑信息专辑背景专辑曲目TreeviewCopyright © aleen42 all right reserved, powered by aleen42 专辑信息 专辑背景 专辑曲目 2006 年 《Taylor Swift》专辑信息 专辑名称：Taylor Swift 发行时间：2006年10月24日 发行公司：Big Machine Records 流派：乡村音乐 专辑语言：英语 专辑背景 《Taylor Swift》是美国乡村音乐歌手泰勒·斯威夫特的首张录音室专辑，于2006年10月24日通过Big Machine Records发行。专辑由泰勒·斯威夫特和她的制作人内森·查普曼共同制作。专辑的歌曲主要由泰勒·斯威夫特创作，其中包括她与其他词曲作者合作的两首歌曲。专辑的歌曲主要以泰勒·斯威夫特的个人经历为主题，其中包括她的童年、青少年时期的恋爱经历以及她的想象力。专辑的歌曲主要是乡村流行音乐，其中包括一些流行乐和乡村摇滚的元素。专辑的歌曲在创作时，泰勒·斯威夫特主要使用吉他和钢琴，专辑的歌曲的制作则使用了一些乡村乐器，如钢琴、小提琴和曼陀林。 专辑曲目 Tim McGraw Picture To Burn Teardrops On My Guitar A Place In This World Cold As You The Outside Tied Together With A Smile Stay Beautiful Should've Said No Mary's Song (Oh My My My) Our Song I'm Only Me When I'm With You Invisible A Perfectly Good Heart Teardrops On My Guitar (Pop Version) Our Song (Radio Single Version) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/兴趣/追星/taylorswift/2006_Taylor-Swift/1_Tim-McGraw.html":{"url":"经验分享/兴趣/追星/taylorswift/2006_Taylor-Swift/1_Tim-McGraw.html","title":"1_Tim-McGraw.md","keywords":"","body":"Tim McGrawTim McGraw -音标 -歌词 -翻译 He said the way my blue eyes shined, 他说我的蓝眼睛闪耀着光芒 Put those Georgia stars to shame that night 那天晚上，把佐治亚州的星星都比下去了 I said, \"That's a lie.\" 我说：“那是谎言。” Just a boy in a Chevy truck, 只是一个开着雪佛兰卡车的男孩 That had a tendency of gettin' stuck 他有个习惯，就是经常被卡住 On backroads at night 在夜晚的小路上 And I was right there beside him all summer long 整个夏天，我都在他身边 And then the time we woke up to find that summer'd gone 然后有一天我们醒来，发现夏天已经过去了 But when you think Tim McGraw 但是当你想起蒂姆·麦格劳 I hope you think my favorite song 我希望你能想起我最喜欢的歌 The one we danced to all night long 我们整晚都在跳的那首歌 The moon like a spotlight on the lake 月亮像是湖面上的聚光灯 When you think happiness 当你想到幸福 I hope you think that little black dress 我希望你能想到那件小黑裙 Think of my head on your chest 想到我把头枕在你的胸口 And my old faded blue jeans 还有我那条旧旧的褪色蓝色牛仔裤 When you think Tim McGraw 当你想起蒂姆·麦格劳 I hope you think of me 我希望你能想起我 September saw a month of tears 九月，眼泪满满 And thankin' God that you weren't here 感谢上帝你不在这里 To see me like that 不然你会看到我那样（泪流） But in a box beneath my bed 但是在我床底下的一个盒子里 Is a letter that you never read 有一封你从未读过的信 From three summers back 来自三年前的那个夏天 It's hard not to find it all a little bitter sweet 很难不觉得这一切都有点苦涩 And lookin' back on all of that, it's nice to believe 回想起那一切，很高兴能相信 When you think Tim McGraw 当你想起蒂姆·麦格劳 I hope you think my favorite song 我希望你能想起我最喜欢的歌 The one we danced to all night long 我们整晚都在跳的那首歌 The moon like a spotlight on the lake 月亮像是湖面上的聚光灯 When you think happiness 当你想到幸福 I hope you think that little black dress 我希望你能想到那件小黑裙 Think of my head on your chest 想到我把头枕在你的胸口 And my old faded blue jeans 还有我那条旧旧的褪色蓝色牛仔裤 When you think Tim McGraw 当你想起蒂姆·麦格劳 I hope you think of me 我希望你能想起我 And I'm back for the first time since then 我自那以后第一次回来 I'm standin' on your street 我站在你的街上 And there's a letter left on your doorstep 你的门口有一封信 And the first thing that you'll read 你读到的第一件事 Is when you think Tim McGraw 就是当你想起蒂姆·麦格劳 I hope you think my favorite song 我希望你能想起我最喜欢的歌 Someday you'll turn your radio on 总有一天你会打开收音机 I hope it takes you back to that place 我希望它能把你带回到那个地方 When you think happiness 当你想到幸福 I hope you think that little black dress 我希望你能想到那件小黑裙 Think of my head on your chest 想到我把头枕在你的胸口 And my old faded blue jeans 还有我那条旧旧的褪色蓝色牛仔裤 When you think Tim McGraw 当你想起蒂姆·麦格劳 I hope you think of me 我希望你能想起我 Oh, think of me 哦，想起我 Mmm 嗯~ He said the way my blue eyes shined, 他说我的蓝眼睛闪耀着光芒 Put those Georgia stars to shame that night 那天晚上，把佐治亚州的星星都比下去了 I said, \"That's a lie.\" 我说：“那是谎言。” console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/":{"url":"经验分享/发展/","title":"发展","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/企业/":{"url":"经验分享/发展/企业/","title":"企业","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/企业/不同公司规模的选择.html":{"url":"经验分享/发展/企业/不同公司规模的选择.html","title":"不同公司规模的选择.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/城市/":{"url":"经验分享/发展/城市/","title":"城市","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/城市/上海哪个区域最适合工作生活.html":{"url":"经验分享/发展/城市/上海哪个区域最适合工作生活.html","title":"上海哪个区域最适合工作生活.md","keywords":"","body":"大语言模型，后端开发 核心技术：算法为主 demo -> 商业版本（前端已找到） console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/城市/杭州哪个区域最适合工作生活.html":{"url":"经验分享/发展/城市/杭州哪个区域最适合工作生活.html","title":"杭州哪个区域最适合工作生活.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/岗位/":{"url":"经验分享/发展/岗位/","title":"岗位","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/岗位/PythonOrGolang.html":{"url":"经验分享/发展/岗位/PythonOrGolang.html","title":"PythonOrGolang.md","keywords":"","body":"Python or GolangTreeviewCopyright © aleen42 all right reserved, powered by aleen42 Python or Golang Python or Golang技术 岗位 发展 Python Golang 2023-08-24 00:21:00 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/岗位/外包岗位有没必要.html":{"url":"经验分享/发展/岗位/外包岗位有没必要.html","title":"外包岗位有没必要.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/工作/":{"url":"经验分享/发展/工作/","title":"工作","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/工作/如何参与到外接项目中.html":{"url":"经验分享/发展/工作/如何参与到外接项目中.html","title":"如何参与到外接项目中.md","keywords":"","body":"如何参与到外接项目中外包项目外协项目TreeviewCopyright © aleen42 all right reserved, powered by aleen42 如何参与到外接项目中 外包项目 外协项目 如何参与到外接项目中项目 开发 工作 2023-08-29 16:51:00外接项目分为两种，一是外包项目，二是外协项目。 外包项目 这个项目的总负责人由你独立承担，你需要和客户沟通需求，然后组织团队完成项目。 外协项目 这个项目的总负责人由客户独立承担，你需要和客户沟通需求，然后参与客户团队完成项目。 你的任务核心：理解需求，明白自己要参与的部分，了解里程碑，了解项目完成标志。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/发展/工作/月薪1万的短视频运营一天工作内容.html":{"url":"经验分享/发展/工作/月薪1万的短视频运营一天工作内容.html","title":"月薪1万的短视频运营一天工作内容.md","keywords":"","body":"月薪一万的短视频运营一天工作内容早上十点上班看一下账号数据11 点追今日热榜：今日热榜官网下午两点上班，写本月脚本分镜脚本拍摄统筹表TreeviewCopyright © aleen42 all right reserved, powered by aleen42 早上十点上班看一下账号数据 11 点追今日热榜：今日热榜官网 下午两点上班，写本月脚本 分镜脚本 拍摄统筹表 月薪一万的短视频运营一天工作内容短视频 工作 2023-09-04 10:11:00早上十点上班看一下账号数据 播放总量 完播率 2s跳出 5s完播 平均播放时长 点赞 评论 收藏 分享 赞播比 评播比 粉播比 视频带粉 184.7w 28.90% 11.69% 62.57% 26.58 1.9w 671 5310 453 1.01% 0.04% 0.11% 2088 703w 31.30% 16.00% 73.00% / 8.4w 1.6w 9873 2265 1.19% 0.23% 0.16% 1.1w 81.27w 46.00% 1.00% 86% 41 6351 975 1822 49 0.78% 0.15% 0.15% 1257 33.9w 18.00% 13.41% 57% 21.22 7673 402 1915 169 2.26% 0.12% 0.28% 965 111.5w 25.30% 10.00% 76% / 3.1w 5507 6796 813 2.78% 0.49% 0.33% 3660 39.47w 47.00% 1.00% 90% 43 1.06w 1041 5832 18 2.69% 0.26% 0.61% 2388 11 点追今日热榜：今日热榜官网 下午两点上班，写本月脚本 脚本分为 分镜脚本 喝 拍摄统筹表 内容脚本 脚本大纲 xxx 镜号 时长（s） 场景 景别 动作 台词 字幕 道具 服装 1 2 过道 中景 行走 口播 冰波球花西子喷雾画眼线神奇腮红调粉底液的板板化妆刷礼服打包袋 一件夸张的礼服一套比较日常好看的衣服 2 3 客厅 近景转特写 走到客厅打开养生的东西 3 2 近景 喝一支或者吃一点大家好奇的养生的东西 4 2 中景 走动去沙发旁边，换上那个瘦腿的鞋 5 4 中景-特写 把礼服从熨烫机上拿下来，装进打包袋子里（那种很夸张的） 6 2 厨房 近景 拿着花西子散粉打开的状态 7 2 卫生间 特写 8 4 特写转近景 9 1 中景 10 4 11 5 近景 12 3 中景 13 2 近景 14 3 15 3 16 2 17 1 玄关 特写-中景 18 2 中景 分镜脚本 分镜脚本 镜号 场景 景别 动作 台词 音乐 后期 画面参考 音效 背景音乐 屏幕后期 字幕 1 2 拍摄统筹表 拍摄统筹表 脚本 道具 服装 是否有外景 拍摄顺序 备注 出差前准备 mini洗衣机行李箱化妆包护肤品分装pad帽子洗牙器 外出的衣服睡衣 运动装 否 110:30-11:30 每条开拍前留20min换装调试灯光准备道具拍摄顺序需要根据拍摄场地、时间点的需求安排 关于面试 / 正式的套装 睡衣 否 211:50-12:50 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/工具/":{"url":"经验分享/工具/","title":"工具","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/工具/项目管理平台有哪些.html":{"url":"经验分享/工具/项目管理平台有哪些.html","title":"项目管理平台有哪些.md","keywords":"","body":" 飞书 gitbook ai https://app.gitbook.com/ apitable https://github.com/apitable/apitable console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/杂项（暂未归类）/":{"url":"经验分享/杂项（暂未归类）/","title":"杂项（暂未归类）","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/杂项（暂未归类）/2023-4-16-关于B站的未来.html":{"url":"经验分享/杂项（暂未归类）/2023-4-16-关于B站的未来.html","title":"2023-4-16-关于B站的未来.md","keywords":"","body":"关于 B 站的未来1. 写这篇文章的起因TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. 写这篇文章的起因 关于 B 站的未来 2023 年 4 月 16 日 1. 写这篇文章的起因 + 1. 写这篇文章的起因   2023 年 4 月 15 日凌晨，我在 b 站推荐页看到自己关注的 UP 主（智能路障）发布的名为《B站到底应该如何逆天改命？做了四年UP主的一些感想。》一期视频。联系到前段时间大量 UP 主针对停更潮的反应，我好奇地点进了这个视频中。   UP 主 智能路障 他提到了自己面临到的一些问题， console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/杂项（暂未归类）/云顶之弈教学.html":{"url":"经验分享/杂项（暂未归类）/云顶之弈教学.html","title":"云顶之弈教学.md","keywords":"","body":"「 云顶之奕 」教学与其他棋类游戏差别扣血规则金币规则卡池概率卡的属性玩法核心赌狗阵容赌三星五费TreeviewCopyright © aleen42 all right reserved, powered by aleen42 与其他棋类游戏差别 扣血规则 金币规则 卡池概率 卡的属性 玩法核心 赌狗阵容 赌三星五费 「 云顶之奕 」教学Teamfight-Tactics 掌握核心逻辑，读懂游戏。 所有数据基于 S8 版本云顶之奕标准模式，当前时间 2023/01/08 与其他棋类游戏差别 相比于象棋，云顶之弈是组建战力，而象棋是已有一只军队，对战中消耗战力 云顶之弈带有很多运气成分 扣血规则 在基础扣血量上，敌方场上每多剩一只怪，则多扣两滴血。 如果没打过野，其中每个野怪也按一颗棋子计算，不加额外扣血量。 阶段 基础扣血量 2-* 阶段 0 3-* 阶段 3 4-* 阶段 4 5-* 阶段 6 6-* 阶段 9 金币规则 金币获取来源分为三个部分：1. 卖卡；2. 每回合固定收益；3. 金币利息；4. 特殊海克斯或羁绊效果 卖卡 卡的获取有三种来源：1. 开局及每阶段中间时刻的选秀；2. 卡池购买；3. 特殊海克斯或羁绊效果； 其中如果 2费及以上的卡合成为 两星或三星，卖卡时会亏损一块钱。 卡池概率 注：卡池概率只按照等级算，与人口数量无关。可能因版本的特殊海克斯、羁绊、英雄技能等影响概率。 等级 一费卡 二费卡 三费卡 四费卡 五费卡 2 级 100% 0% 0% 0% 0% 3 级 75% 25% 0% 0% 0% 4 级 55% 30% 15% 0% 0% 5 级 45% 33% 20% 2% 0% 6 级 9% 15% 30% 30% 16% 7 级 9% 15% 30% 30% 16% 8 级 9 级 9% 15% 30% 30% 16% 10 级 9% 15% 30% 30% 16% 卡的属性 每张卡的属性有六个部分组成：血量、蓝量 玩法核心 赌狗阵容 所谓赌狗，就是在低等级的情况下，利用低费卡概率 六级->七级：36 经验值 八级->九级：80 经验值 赌三星五费 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/杂项（暂未归类）/我的童年.html":{"url":"经验分享/杂项（暂未归类）/我的童年.html","title":"我的童年.md","keywords":"","body":"我不知道是不是每个人像我一样，有个值得回味的童年。可能是因为我家族人多，我从小和我爷爷奶奶与其他家族人走动很多，而每个人本身就具有特别鲜明的性格。 每个人的故事又是这么跌宕起伏，剧情又充满高潮。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/杂项（暂未归类）/短视频.html":{"url":"经验分享/杂项（暂未归类）/短视频.html","title":"短视频.md","keywords":"","body":"短视频短视频穿 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/":{"url":"经验分享/生活/","title":"生活","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/生活杂谈/":{"url":"经验分享/生活/生活杂谈/","title":"生活杂谈","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/生活杂谈/如何打地铺.html":{"url":"经验分享/生活/生活杂谈/如何打地铺.html","title":"如何打地铺.md","keywords":"","body":"如何打地铺TreeviewCopyright © aleen42 all right reserved, powered by aleen42 如何打地铺 如何打地铺生活 经验 睡觉 2023-08-23 17:58:00我的需求是：夏天使用、在别人的住宿中新增一个床位，使用几个月时间、要睡得舒服、防蚊防虫（广东的夏天！） 我选择的是 1.5x2m 的榻榻米，地垫选择的 1.6x2m，床单大于榻榻米就行。买个空调被和枕头、再加个蚊帐完事。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/社会话题/":{"url":"经验分享/生活/社会话题/","title":"社会话题","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/社会话题/两性/":{"url":"经验分享/生活/社会话题/两性/","title":"两性","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/社会话题/两性/社会资源分配的不平等是怎么在性别上体现的.html":{"url":"经验分享/生活/社会话题/两性/社会资源分配的不平等是怎么在性别上体现的.html","title":"社会资源分配的不平等是怎么在性别上体现的.md","keywords":"","body":"社会资源分配的不平等是怎么在性别上体现的1. 男女在社会资源分配上的不平等是怎么形成的？1.1. 性的划分和确立1.2. 母系社会到父系社会的转变1.3. 为什么会有男女社会资源分配上的不平等？2. 男女在社会资源分配上的不平等体现在哪些方面？2.1. 联合国针对妇女权利的支持2.2. 联合国妇女问题世界会议上提出的 12 个重大关切领域2.3. 一、妇女与贫穷2.4. 二、妇女的教育和培训2.5. 三、妇女与保健2.6. 四、对妇女的暴力行为2.7. 五、妇女与武装冲突2.8. 六、妇女与经济2.9. 七、妇女参与权力和决策2.10. 八、提高妇女地位的机制2.11. 九、妇女的人权2.12. 十、妇女与媒体2.13. 十一、妇女与环境2.14. 十二、女童男女在社会资源分配上的不平等应当如何消除？全球呼吁注：希拉里在此前为女性的权力而斗争的履历地方呼吁广告改良的有效性提供法律上的社会资源支持参考资料TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. 男女在社会资源分配上的不平等是怎么形成的？ 1.1. 性的划分和确立 1.2. 母系社会到父系社会的转变 1.3. 为什么会有男女社会资源分配上的不平等？ 2. 男女在社会资源分配上的不平等体现在哪些方面？ 2.1. 联合国针对妇女权利的支持 2.2. 联合国妇女问题世界会议上提出的 12 个重大关切领域 2.3. 一、妇女与贫穷 2.4. 二、妇女的教育和培训 2.5. 三、妇女与保健 2.6. 四、对妇女的暴力行为 2.7. 五、妇女与武装冲突 2.8. 六、妇女与经济 2.9. 七、妇女参与权力和决策 2.10. 八、提高妇女地位的机制 2.11. 九、妇女的人权 2.12. 十、妇女与媒体 2.13. 十一、妇女与环境 2.14. 十二、女童 男女在社会资源分配上的不平等应当如何消除？ 全球呼吁 注：希拉里在此前为女性的权力而斗争的履历 地方呼吁 广告改良的有效性 提供法律上的社会资源支持 参考资料 社会资源分配的不平等是怎么在性别上体现的梳理这个问题，可以从以下几个方面来考虑： 男女在社会资源分配上的不平等是怎么形成的？ 男女在社会资源分配上的不平等体现在哪些方面？ 男女在社会资源分配上的不平等应当如何消除？ 特别注意：笔者一方之词，仅供参考。 1. 男女在社会资源分配上的不平等是怎么形成的？ 1.1. 性的划分和确立 根据法国精神分析学家 雅克·拉康（Jacques Lacan） 的研究，人类一开始只有一种性别，唯一一种性别的标记——Phallus，指的是 Masculine，即男性。这种性别标记本身具有无根性，并不区分性别的对立，男性的阳具也只是纯粹的偶然性机制。由于生物学的筛选，器官进化，男性的外阴变得更明显，女性得外阴变得不明显。这种器官差异，男性就认为性机制是二元对立的，而女性也就被动充当起对立面，被动接受二元化的性秩序。由此男女性从生理和社会上被划分和确立。 1.2. 母系社会到父系社会的转变 从考古发现，母系社会大概从四五万年前开始，到一万年前进入成熟期。考古证明如仰韶文化、河姆渡文化、马家窑文化等都有母系社会留下的遗存。另外从上古神话中，也可证明母系社会的痕迹，例如《诗经》中的“天命玄鸟，降而生商，宅殷土芒芒。”等。 母系社会的特点是：氏族成员都能够追溯到一个女性的共祖，由这个女性担任大家长采取群婚制或走婚制。由于群婚制和走婚制，母家中的孩子往往不知道自己的亲生父亲是谁，只和舅舅生活在一起（因此摩梭人有句格言：“天上飞的鹰最大，地上走的舅舅最大”。可以看出舅舅的社会地位），也就是只知其母，不知其父，财产也有母亲掌管。 注： 群婚制：原始时代中的一种婚姻形式，指一个集团的一群男子与另一个集团的一群女子集体相互通婚，而集团内部的男女则禁止通婚。 走婚制：发展到今天摩梭人一族的婚姻形式，指男女双方不结婚，通过情投意合的方式，男方在女方家过夜，天未亮回到自己家，女方生育的孩子归母家生养。 关于母系社会到父系社会的转变，恩格斯在其著作《家庭、私有制和国家的起源》中主要观点表示：母系社会转向父系社会，生产方式的改变是很重要的一个原因。经济价值等因素决定了社会主导地位的转变。从前的母系社会，男人负责打猎捕鱼、防御野兽，女人负责采果子、采蜂蜜、挖植物的块茎、烤制食物、缝制衣服等。由于打猎捕鱼的男性经常会空手而归，因此部落里面的女性提供着绝大部分的食物。到了农耕文明，男耕女织模式开启，农耕工具的产生导致生产力增加，人口增加。人地矛盾在各族开始紧张，部落之间开始接触有了冲突和战争。而由于部落族群需要繁衍，女人可以生育，是部落的希望，因此男人负责打仗。在随后几千年的战争社会中，男性逐步确立了自身的主导地位。 1.3. 为什么会有男女社会资源分配上的不平等？ 人们普遍认为，在母系氏族中，部落里的男女非常平等。经济价值决定社会主导地位， 母 2. 男女在社会资源分配上的不平等体现在哪些方面？ 2.1. 联合国针对妇女权利的支持 联合国对妇女权利的支持始于《联合国宪章》（《宪章》）。《宪章》第一条指出：联合国的一大宗旨是“促成国际合作，……不分种族、性别、语言或宗教，增进并激励对于全体人类之人权及基本自由之尊重。” 2.2. 联合国妇女问题世界会议上提出的 12 个重大关切领域 1995 年 9月 4-15 日，中国北京举行的第四次妇女问题世界会议，此次会议是前四次妇女问题会议中最重要的一次。本次会议是全球性别平等议程的一个重要转折点。189 个国家一致通过的《北京宣言》和《行动纲要》旨在增强妇女权能的议程，如今已被视为实现性别平等的关键性全球政策文件。文件明确了战略目标和应采取的行动，以在 12 个重大关切领域提高妇女地位和实现性别平等： 妇女与贫穷 妇女的教育和培训 妇女与保健 对妇女的暴力行为 妇女与武装冲突 妇女与经济 妇女参与权力和决策 提高妇女地位的机制 妇女的人权 妇女与媒体 妇女与环境 女童 2.3. 一、妇女与贫穷 收入差距：在全球范围内，女性通常相对于男性更容易陷入贫困。收入差距是其中一个重要原因。女性在很多国家和地区的工资普遍较低，很多女性从事的工作也更容易遭受剥削和不稳定性，使她们更易受到贫困的影响。 妇女就业机会：在某些地区，妇女可能面临就业机会的限制，特别是在一些发展中国家。缺乏平等的就业机会和经济资源访问使得妇女更容易陷入贫困和经济依赖。 妇女在家庭经济中的地位：在一些社会中，妇女承担着家务劳动和照顾家庭的责任，但她们可能缺乏对家庭经济决策的参与权和控制权。这限制了她们在家庭资源分配中的地位和权益，可能导致贫困的加剧。 教育机会：妇女的受教育水平与贫困之间存在密切关系。缺乏教育机会和接受质量教育的机会使得妇女更难逃离贫困循环。教育不仅能提高妇女的就业机会，还能增强她们的自主权和社会参与度。 妇女暴力和剥削：妇女面临的暴力和剥削问题也与贫困相关。贫困环境中，妇女更容易成为性别暴力和性剥削的受害者，这进一步限制了她们的发展机会和脱离贫困的能力。 2.4. 二、妇女的教育和培训 缺乏基础教育机会：在某些地区，妇女仍面临基础教育机会的不足。例如，在冲突地区或贫困地区，女性和女童可能无法获得接受教育的机会。 职业培训和技能发展机会不平等：妇女在一些行业和领域中面临就业机会的限制。 学校安全和性别暴力：妇女在校园环境中经常面临性别暴力和骚扰的风险，这会阻碍她们的学习和发展。 社会和文化观念的挑战：一些社会和文化观念仍然认为妇女不适合接受教育和培训，或者认为妇女的角色应该局限在家庭和家务劳动中。 2.5. 三、妇女与保健 保健服务的可及性：在某些地区，妇女可能面临获得基本保健服务的障碍，确保妇女能够获得易于接触和负担得起的保健服务是关键。 生殖健康和计划生育：妇女在生殖健康和计划生育领域可能面临一系列问题。包括缺乏性教育和信息、避孕方法的不可及性、堕胎的合法性和安全性问题，以及与家庭规划和性健康相关的社会和文化观念。推广全面的性教育、提供安全的避孕和堕胎服务，并倡导妇女的生殖权益是需要解决的问题。 妇女健康问题：妇女面临一系列特定的健康问题，例如乳腺癌、子宫颈癌、妇科疾病和更年期健康问题等。确保妇女能够获得早期检测、诊断和治疗的机会，提供定期的健康检查和预防性保健服务是关键。 性别暴力和心理健康：妇女经常面临性别暴力和虐待的风险，这对她们的身体和心理健康产生负面影响。提供心理健康支持和咨询服务，设立匿名举报机制，加强性别暴力的预防和制止措施是需要解决的问题。 妇女在紧急情况下的保健需求：在灾难和紧急情况下，妇女有特殊的保健需求。这包括孕产妇的紧急医疗和生理需求，提供安全的分娩条件，保障乳母婴的喂养和保健需求，以及妇女在难民营和紧急救援场所的保健需求。 2.6. 四、对妇女的暴力行为 ？打官司、维权难等问题 ？原告是有举证责任的，但是在性骚扰、性侵犯等案件中，原告往往是女性，而且往往是在没有证据的情况下，很难举证，这就导致了很多性骚扰、性侵犯案件的被告往往是无罪的。 2.7. 五、妇女与武装冲突 https://www.icrc.org/zh/document/observation-and-opinion-sexual-violence-4 2.8. 六、妇女与经济 2.9. 七、妇女参与权力和决策 2.10. 八、提高妇女地位的机制 2.11. 九、妇女的人权 2.12. 十、妇女与媒体 2.13. 十一、妇女与环境 2.14. 十二、女童 ？不仅公共资源的倾斜度不一样，社会对于男女性的宽容性也是不一样的。在上世纪，西方女性没有投票权，在一些国家女性是不能单独去酒吧喝酒的，有一些国家的女性不能单独出门，都体现了性别资源分配的不均。在当代，工作、薪酬、农村妇女的土地继承权等等，也都存在着极大的性别差异，可见从公到私都存在不平衡。 ？ 社会资源分配的不平等，主要体现在以下几个方面： 教育文化 习俗传统 就业 经济 政治 家庭 社会地位 ？(优质的教育和卫生服务、公平地享有经济资源和参与政治生活的权利) ？（受教育、同工同酬、不受滋扰） ？边缘地区：女性受教育权、工作权、独立权 ？城市地区：工作机会保障、社会福利保障、政治参与权 男女在社会资源分配上的不平等应当如何消除？ 全球呼吁 联合国秘书长安东尼奥•古特雷斯先生表示，实现性别平等并增强妇女和女童权能是我们这个时代的未竟事业，也是当今世界最大的人权挑战。 1995 年第四次联合国世界妇女大会上希拉里的发言，她提出了“Human rights are women's rights, and women’s rights are human rights”（人权即是女性的权力，女性的权利即是人权）的口号 5。直到 2000 年 5 年后的第五次联合国世界妇女大会针对性别平等问题的《北京宣言》和《行动纲要》执行情况进行审查。这次审查会议中，尽管取得了很大进展，但从会员国的反馈来看，在《行动纲要》的执行层面仍需做出更多的努力。暴力和贫困仍是阻碍全球实现性别平等的两大领域。全球化为这两个领域增加了新维度，给《行动纲要》的执行带来了新挑战，例如贩卖妇女和女童、武装冲突的性质发生变化、国家之间和性别之间的差距不断扩大、宏观经济政策与社会保护问题脱节等。直到今天，实现性别平等并增强妇女和女童权能的路依然还有很长一段。 注：希拉里在此前为女性的权力而斗争的履历 笔者将希拉里 1995 年前为女性的权力而斗争履历放到这里是为了让大家更好的辩证看待希拉里在世界妇女大会中的个人言论，希拉里在 1995 年之前为女性的权力而斗争的履历是非常值得我们学习的。 希拉里·黛安·罗德姆，1947 年 10 月 26 日出生于伊利诺斯州芝加哥市北区的一个联合卫理公会家庭。当希拉里还是个孩子的时候，她就是公立学校老师们眼中的红人，多项体育获奖无数。希拉里的母亲对她给予了很高的期望，并建议她尝试成为美国第一位最高法院女法官。不过，希拉里更希望自己成为一名宇航员，14 岁时她给美国航空航天局写信主动请缨，结果被对方告知不需要女宇航员。 1961 年，希拉里入读缅因州梅因东区中学。因为优秀的表现，她被选为美国国家高中荣誉生会（National Honor Society）成员，高中竞选学生会主席时，结果在第一轮投票中就遭遇惨败，并被竞争对手嘲笑：“你认为一个女孩能够当选主席？这种想法真愚蠢。” 1965 年 9 月 12 日，希拉里进入高等学府韦尔斯利学院，主修政治学，这所学校追求的精神是“不必因为女性而屈居第二位”。 1968 年初，希拉里当选韦尔斯利学院学生自治会主席。同年 4 月，希拉里组织了一次为期两天的学生罢课，要求进行温和变革，招收更多的黑人学生和教师。 1968 年美国总统选举，她因不满理查德·尼克松，加上反对越战以及对女权运动与非裔美国人民权运动的支持，她从支持共和党转而支持民主党。 1969 年，希拉里获得了文学学士学位， 同时授予政治学系荣誉学士。 5 月 31 日，作为学生会主席的希拉里被同学推选成为韦尔斯利女子学院历史上第一个在毕业典礼上发言的学生。希拉里没有按照事先准备好的发言稿发言，而是做了一场批判执政者的即兴反战演讲。 她批评主流社会不尊重弱势群体，指出政府失去了年轻人的信任等，她的演讲赢得听众长达七分钟的起立鼓掌， 发言被全国知名媒体比如《生活》杂志、《纽约时报》等报道。芝加哥一家电视台还对她进行了采访。 同时，她收到了来自美国女性选民联盟的邀请，请她参加其青年顾问委员会。 1969 年 9月，希拉里同时向哈佛法学院和耶鲁法学院递交了申请，并同时被录取。在选择学校时，希拉里亲自去学校做了考察，因为一个哈佛教授的出言不逊和轻视，希拉里选择了耶鲁。这位教授对她说：“我们这里并不需要更多的女人。”当时耶鲁法学院的 235 名新生中只有 27 名女生，希拉里就是其中一员。 1974 年，26 岁的希拉里接受耶鲁大学教授伯克·马歇尔的推荐到美国众议院“司法委员会弹劾调查工作组”工作，是工作组 44 名律师中的 3 名女律师之一。这个调查组的工作直接导致了时任美国总统尼克松因为水门事件辞职下台。 完成尼克松案的希拉里，被普遍认为是美国民主党内的一颗希望之星，留在华盛顿或者到纽约等大城市前途无限。但是，她做出了“情感战胜理智”的选择，去了克林顿的家乡，1974 年 8 月，希拉里成为阿肯色大学法学院仅有的 2 名女教师之一。 阿肯色州，是一个位于美国南方的小州。当时人口不到 200 万，偏僻，落后，观念保守。当希拉里决定跟随克林顿到阿肯色后，很多朋友都叹息她做出了错误的选择，放弃了自己的大好前程。 在阿肯色大学第一学期末，希拉里争取到美国联邦的资金支持建立了一个新的阿肯色州立大学法律援助中心，在她领导的第一年中，这家中心就服务了 300 名请不起律师的客户。同时，她还倡导建立了大学所在地费耶特维尔德市第一家性侵害危机处理中心。 1975 年 10 月 11 日，希拉里与比尔·克林顿在阿肯色州的费耶特维尔举行婚礼。 1977 年 2 月，希拉里加入了美国历史最悠久的律师事务所之一罗斯律师事务所（Rose Law Firm），成为该所第一个女律师，并在 1979 年成为事务所历史上第一位女性合伙人。她还参与创建了阿肯色儿童与家庭保护组织，这是该州第一个关注儿童的社会组织。 1977 年，时任美国总统詹姆斯·厄尔·卡特任命 30 岁的希拉里担任美国法律服务公司（Legal Services Corporation）董事会成员，并在几个月后升任董事会主席直到 1981 年年底。律服务公司是由美国参议院成立的一个全国性法律援助机构，由政府出资为穷人提供法律援助。该机构拥有 5000 名律师，每年处理上百万件案子，希拉里是该机构历史上的第一个女性负责人。在她任职期间，法律服务公司获得的扶持资金从 9000 万美元增加到了 3 亿美元。 1978 年 11 月，克林顿竞选阿肯色州州长成功，希拉里成为阿肯色州的第一夫人。 1980年 2 月 27 日，希拉里生了一个女儿，切尔西·维多利亚·克林顿。 1983 年，希拉里出任州长教育标准委员会主席领导阿肯色州的教育改革。希拉里在 1983 年被评为阿肯色州年度最佳女性，1984 年被评为阿肯色州年度最佳母亲。1985 年，她又提出了阿肯色州第一个学龄前儿童的家庭教育规划，帮助学龄前儿童的父母参与到孩子的教育中来。 从 1987 年到 1991 年，希拉里担任美国律师协会妇女职业委员会的第一任主席，该委员会旨在解决法律职业中的性别歧视问题，并促使协会采取措施来打击它。在 1988 年和 1991 年，希拉里两度被评为“全美 100 位最具影响力律师”。在这期间，她还曾担任美国零售业巨头沃尔玛公司和拉法基公司的董事职位。希拉里是沃尔玛董事会第一位女性成员，她向董事长山姆·沃尔顿（Sam Walton）施压，要求其任命更多女性。在那里，她成功地推动沃尔玛采取了环保措施，但在一次争取更多女性加入公司管理层的活动中，却没有成功。 1992 年，46 岁的克林顿竞选美国总统。克林顿在竞选中甚至宣传选择克林顿是“买一送一”的明智选择：“投票克林顿，就可以赢得克林顿和希拉里两位杰出政治家为美国服务。” 希拉里首次遭遇到个人形象的危机，是她在克林顿竞选总统时提到，她不会做个在家里烤甜饼的男人背后的小女人。这番话立即在全美招致保守派人士的狂轰滥炸。希拉里过去在儿童和妇女问题上表现出的意识形态和道德记录受到了共和党人士的攻击，在主要出版物中，至少有 20 篇文章拿她和麦克白夫人做比较。 在 1992 年美国共和党全国代表大会上，共和党总统提名人帕特·布坎南指责希拉里是“大逆不道的激进女权主义者”；《华尔街日报》专栏作家保罗·吉戈特撰文抨击希拉里维护儿童权益是连“自由派人士都抛弃了的‘伟大社会’式主张”，希拉里由此成为美国选举史上第一位在初选阶段就遭到对手猛烈抨击的总统候选人夫人。 1992 年 11 月 4 日，比尔·克林顿赢得了总统选举的胜利，希拉里成为美国历史上第一个拥有博士学位的第一夫人，也成为美国历史上学历最高的第一夫人。她也是除了通常在白宫东翼拥有第一夫人办公室外，第一个在白宫西翼拥有办公室的第一夫人。 1994 年，希拉里与时任司法部长珍妮特·雷诺在美国司法部创建“美国暴力侵害妇女问题办事处”（Office on Violence Against Women）。 1995 年 3 月，在没有克林顿的陪同及国务院的批准下，第一夫人希拉里携带女儿切尔西访问南亚五国，试图改善与印度和巴基斯坦的关系。希拉里被她遇到的当地妇女权利的困境所困扰，但她得到了访问过的国家人民的热情回应，并与美国记者团建立了更好的关系。 1995 年 9 月 5 日，第一夫人希拉里在中国北京代表美国参加第四届联合国世界妇女大会，宣称“再也不能接受把妇女的权利隔离在人权之外的讨论了”。 来自 180 多个国家代表听到她说：“如果这次大会里能够有一个信息向外部传递，那就是人类的权利就是妇女的权利，妇女的权利也是人类的权利。毕其功于一役。”这篇演讲内容至今仍备受世界各地妇女运动的推崇。 ... 地方呼吁 技术进步推动女性创业，实现经济独立。 广告改良的有效性 广告等媒体的改良，消除性别歧视。那我们注意到2021年深圳出台了《深圳市广告性别平等审视指南》，它是全国首个广告层面的性别平等指南，非常有价值。但也需要看到的是，它叫指南，没有叫法律条例，就没有上升到法律法规的层面。当然，更重要的是，这样的指导性要求应该怎样去规范落实。 女性主义广告（Femvertising，由 Feminism 和 Advertising 组合而成）一定程度上宣传了契合性别平等的观点，对于改善性别观念是有益的。但是广告的营销属性已经决定了它的市场导向，这种立足于女性主义的营销策略也可能是志不在性别平等，而是利润最大化。例如上世纪二三十年代，美国很多商家为了营销香烟而告诉女性抽烟是独立自主的表现，香烟一度被描述为是“自由之火” 5。因此女性主义广告并不能被奉为女性主义的读本。 目前中国存在许多微博号、营销号炒作的女权，都是伪女权，本质都是消费主义的软性广告。他们要么宣扬一种女性精致利己主义，刺激特定人群女性消费；要么刻意挑动男女对立，吸引流量的同时转移矛盾。 提供法律上的社会资源支持 由于缺乏相应的社会资源支持，维权成本非常高。构建社会系统资源包括：文化观念和习俗的改变、法律援助、心理援助、社工、医疗卫生、教育和就业等各个方面。 同时法律工作者的性别平等意识和相关技能的培训也很重要。从事性别平等工作，与从业人员的性别本身没有必然联系，只跟这个从业者是否接受过系统的、持续的性别平等意识和相关实操技能的强化培训有关系。在性别刻板印象的教育理念下，专业能力过硬以及荣誉加身的女检察官也会因为性别偏见影响到相应案件处理的公平公正。（十几年前重庆一起家暴以暴制暴杀夫案的审判中，一名女检察官在起诉书中不但丝毫未提及死者丈夫婚后 30 年长期对被告妻子实施家庭暴力甚至虐待的事实，反而用了“顿生杀人恶念”“仅因家庭琐事”等措辞，建议法院对被告妇女从重处罚） 中国 2023 年 1 月 1 日起，《妇女权益保障法》经全面修订后正式实施，新妇女法。 解决妇女维权困境（如性别暴力类案件：家庭暴力、性骚扰、性侵犯、涉卖淫类违法犯罪、校园霸凌等；婚姻家庭类；就业歧视）； 参考资料 豆瓣小组·权力社会与人类文明 —— 《关于男权社会的一点常识》. 2021-03-11 知乎·远方青木 —— 《母系社会人人平等，为什么被历史所淘汰？》. 2021-10-29 联合国人权文书 ——《消除对妇女一切形式歧视公约》. 1979-12-18 联合国全球议题·性别平等 澎湃新闻之女性友好城市十问 ——《如何破解性别资源分配不均？万喆：可从社会性别预算切入》. 2023-03-12 风闻 ——《香烟曾被包装为女性的「自由之火」，事实上它是「自由的枷锁」》. 2019-04-28 联合国会议·妇女与性别平等 —— 《第四次妇女问题世界会议，1995年9月4-15日，中国北京》 bilibili·第四次联合国世界妇女大会：希拉里发言【双语字幕】 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/生活/社会话题/两性/话语权的不平等是怎么在性别上体现的.html":{"url":"经验分享/生活/社会话题/两性/话语权的不平等是怎么在性别上体现的.html","title":"话语权的不平等是怎么在性别上体现的.md","keywords":"","body":"话语权的不平等是怎么在性别上体现的1. 社会刻板印象2. 参与度和代表性3. 性别暴力和骚扰4. 社会期待和规范TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1. 社会刻板印象 2. 参与度和代表性 3. 性别暴力和骚扰 4. 社会期待和规范 话语权的不平等是怎么在性别上体现的 话语权的定义：话语权是指对于社会群体或个人而言，通过语言、文字、图像等方式表达自己的意见、观点、态度、情感等，能够决定、控制和影响公众舆论、信息流动以及意识形态的能力和权力。 1. 社会刻板印象 媒体对于性别的表现和描绘往往存在性别刻板化和性别歧视。男性在媒体中通常被描绘为强大、独立、成功和有影响力的形象，女性在媒体中往往被强调外貌、性感化，并被局限于特定的角色和定位，如家庭角色等。 2. 参与度和代表性 在公共领域和决策层级，男性通常占据着更多的话语权和代表性。政治、商业、科学等领域中，男性的声音和观点更容易被聆听和接受，而女性的参与和表达则受到限制和忽视。这种性别不平等导致女性在决策过程中的权力和话语权受到削弱，他们的观点和需求往往无法得到充分的表达和关注。 3. 性别暴力和骚扰 女性在公共领域发声和表达意见时，面临着更高的性别暴力和骚扰风险。这种威胁和恐惧使得女性更加不愿意参与公共话语，并限制了她们在社会中自由表达的权利。这种恶性循环进一步加剧了性别话语权的不平等。 4. 社会期待和规范 社会对于性别角色和行为的期待和规范也限制了女性的话语权。女性可能受到社会的压力和偏见，对于某些话题或观点持保守态度，或者担心被贴上负面标签。这种社会压力使得女性更加谨慎和保守，限制了她们在公共话语中的自由表达。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/":{"url":"经验分享/面试/","title":"面试","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/":{"url":"经验分享/面试/面试实战/","title":"面试实战","keywords":"","body":"内容基本格式： ## 整体概述 tagsstart tagsstop 公司全称： 注册资本： 成立时间： 公司地址： 团队规模： 业务范围： 工作时间：9:00-20:30，其中 中午 12:00-13:30 以及 15:00-15:15 休息，大小周 晋升方式： 五险一金：杭州标准的最低系数缴纳。 薪资结构：基本工资（包含绩效工资）+ 立项项目奖金 + 年终奖 最终定薪：xxk xx薪 ## 面试时间 一面 2023-08-16 19:00 腾讯会议 周经理 ... ## 个人评价 ## 面试题目 ### 一面 ### ... console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/上海聚界.html":{"url":"经验分享/面试/面试实战/上海聚界.html","title":"上海聚界.md","keywords":"","body":"整体概述面试时间个人评价面试题目一面TreeviewCopyright © aleen42 all right reserved, powered by aleen42 整体概述 面试时间 个人评价 面试题目 一面 整体概述面试 Python 上海 2023-08-23 17:18:00公司全称：上海聚界信息科技有限公司 注册资本：100 万人民币 成立时间：2019-01-18 公司地址：上海静安区聚能湾大厦 3 楼 团队规模：10 人左右开发团队 业务范围：大语言模型产品。 工作时间： 晋升方式： 五险一金： 薪资结构： 最终定薪： 面试时间 一面 2023-08-16 19:00 腾讯会议 俞礽（总经理） 及 其他两位 个人评价 大语言模型公司？类似 chatgpt？能成功吗？ 一面中得知目前已出了demo版本，团队基本都是算法人员，目前需要一个后端开发，前端开发已经找到。那既然 19 年初成立，为什么现在才出 demo，之前盈利方式是怎样的呢？目前是还没有正常盈利吗？ 面试题目 一面 请先做一个简单的自我介绍 请介绍一下你在简历中所罗列的这些项目 谈一下diango当中的MTV和mvc模式 什么是orm 你对docker有多少了解？ 你是如何打包和部署项目的？ 你是否有参与过运维的经验？ 为什么选择了离职，离职了之后再做什么？ 请讲一下，你在项目开发中遇到比较困难的点，你是如何应对和处理的？ 说一说解决死锁的方式 与前端人员协作开发的一个基本流程是什么？ 你是否用过chatgpt或其他的大语言模型产品？ 你觉得这些大语言产品有什么作用？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/上海西井科技.html":{"url":"经验分享/面试/面试实战/上海西井科技.html","title":"上海西井科技.md","keywords":"","body":"面试题TreeviewCopyright © aleen42 all right reserved, powered by aleen42 面试题 面试题面试 Python 上海 2023-08-23 17:18:00 请先做一个简单的自我介绍？ 为什么想着来上海？ 预计到岗时间？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/云途杭州.html":{"url":"经验分享/面试/面试实战/云途杭州.html","title":"云途杭州.md","keywords":"","body":"整体概述面试时间个人评价面试题目一面二面TreeviewCopyright © aleen42 all right reserved, powered by aleen42 整体概述 面试时间 个人评价 面试题目 一面 二面 整体概述面试 Python 杭州 2023-08-23 17:18:00公司全称：云途（杭州）智能科技有限公司 注册资本：100 万人民币 成立时间：2019-11-14 公司地址：杭州西湖区杭州华星科技大厦（东南门）9 楼 团队规模：10 人左右开发团队 业务范围：智慧城市系统与数字交通服务提供商。 工作时间：9:00-20:30，其中 中午 12:00-13:30 以及 15:00-15:15 休息，大小周 晋升方式：通过参与立项项目获取“经验值”，累计一定的“经验值”可以申请升职。 五险一金：杭州标准的最低系数缴纳。 薪资结构：基本工资（包含绩效工资）+ 立项项目奖金 + 年终奖 最终定薪：14.5k 14薪 面试时间 一面 2023-08-16 19:00 腾讯会议 周经理 二面 2023-08-19 17:00 腾讯会议 储总 个人评价 无额外餐补类的福利补贴，也无加班费，工作时间实在太长。 虽然所处地段很好，位于杭州较好的位置，而且做得内容是有一定前景的。 面试题目 一面 你工作的主要内容是什么？ 你要如何实现一个较难的新需求，你的思路是什么？ 先进行需求拆分，罗列出涉及到哪些业务模块？ 根据拆分的结果，先咨询上级或同事，是否有类似需求或项目已经实现过的，如果有的话，多学习和了解之前的实现方案，然后再根据自己的理解和思考，结合之前的实现方案，来实现自己的需求。 如果没有的话，就自己根据每块业务进行技术可行性评估，以及实现所需时长评估。 同上级确认该评估结果的合理性，然后再根据评估结果，来决定是否实现该需求，或者如何安排工作计划。比如是一个人多少天完成，还是几个人共同处理。 如果是多人共同处理，那么就需要进行任务拆分，然后再根据每个人的技术能力和工作量，来安排每个人的任务。 根据需求选择合适的技术方案，然后再根据技术方案，来进行技术实现。 你为什么离职？ 数学建模奖项？主要参与了哪些部分？你认为占比多少？ 讲讲你项目中最难的一点 为什么使用 Protobuff 而不是 json？ fastapi 的异步是如何实现的？ 如果要实现一个表单提交的 post 请求，如何用 fastapi 去做？ 基于装饰器去实现 fastapi 路由时，如果要为该路由添加日志，使用日志装饰器，该在路由装饰器上面还是下面 前后端项目中认证方式？ token 的生成原理？ 如何部署应用？ docker 如何部署和发布容器？ 如何实现跨域？ 目前的一个职业规划是啥？ 二面 你上一份工作为什么离职？ 你最近一年做了什么？ 为什么想着来杭州发展？ 你分享一下近期读了哪些书？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/反卷营地.html":{"url":"经验分享/面试/面试实战/反卷营地.html","title":"反卷营地.md","keywords":"","body":"简介面试题你所做的项目里面的技术难点？你的项目上线了吗？如果服务器通过 docker 判题，如何保证性能？你考虑的最大并发量是多少？有什么量化数据来体现你做过的需求效果比较好？你们公司产品支持的最大并发量是多少？非关系型数据库和关系型数据库的区别是什么？MySQL 支持的最大并发量是多少？python 协程底层实现的原理？python 有线程为什么还要协程呢？python 一个协程卡死，会影响其他的协程吗？tcp 和 udp 区别？tcp 怎么保证可靠传输的？http 和 https 的区别？http 的 get 和 post 的区别？vue 双向绑定的底层原理是什么？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 面试题 你所做的项目里面的技术难点？ 你的项目上线了吗？ 如果服务器通过 docker 判题，如何保证性能？你考虑的最大并发量是多少？ 有什么量化数据来体现你做过的需求效果比较好？ 你们公司产品支持的最大并发量是多少？ 非关系型数据库和关系型数据库的区别是什么？ MySQL 支持的最大并发量是多少？ python 协程底层实现的原理？ python 有线程为什么还要协程呢？ python 一个协程卡死，会影响其他的协程吗？ tcp 和 udp 区别？ tcp 怎么保证可靠传输的？ http 和 https 的区别？ http 的 get 和 post 的区别？ vue 双向绑定的底层原理是什么？ 简介大语言模型 前后端 中间层 模型组：人比较多 70/80 人 前后端：目前没人，从零开始 主要团队在美国 居家办公 面试题 你所做的项目里面的技术难点？ 在线判题项目主要有两个难点吧？一个是安全问题，另一个是定时任务问题。 安全问题主要面临用户提交代码，服务端要运行代码可能存在的注入问题。当时使用了 docker 去做代码沙箱安全方案，使用 docker 容器为每个用户提交的代码创建了一个独立的容器，实现隔离。 定时任务是因为项目中涉及比赛报名开始和截至，比赛运行开始和截至等。使用的 celery 做的定时任务方案。 你的项目上线了吗？ 是的，我的项目曾经上线过。在初期阶段，我们成功地将项目部署到线上环境，并确保其正常运行。 然而，鉴于当前的项目阶段和需求，我们决定将其暂时下线。这并不是因为项目出现了问题，而是因为目前没有持续上线的紧迫需要。 我们已经建立了自动化的 Docker 部署环境，以确保将来可以轻松地重新上线，实现更灵活的部署和管理。 如果服务器通过 docker 判题，如何保证性能？你考虑的最大并发量是多少？ 我自己在考虑该项目的并发量的时候，最大业务并发用户数大概为 100，判题接口的并发量为 50。因为本身是个毕业设计项目，没有考虑上线后的规模问题，所以在第一次部署，采用的是阿里云学生服务器，我没记错应该是 2核，2G，1M 带宽。虽然没有进行系统的压力测试，但是多个人同时访问和使用都是没问题的。我自己当时预估的是 50 左右。 判题接口的优化主要有几个方面：一是通过异步任务也就是 celery 框架处理这个耗时任务。二是针对 docker 每个容器做了资源上限，因为每个算法提交代码大致资源都有一个标准，提前通过数据库存储每道题需要的 docker 资源标准，在执行时做好 docker 的资源上限。第三就是容器复用，尽可能地重用已创建的容器，以避免频繁地创建和销毁容器的开销。Docker 的容器是轻量级的，但启动和停止仍然有一些开销。第四是数据库优化，如果判题系统涉及数据库操作，确保数据库的索引、查询和连接池等方面进行了优化。 有什么量化数据来体现你做过的需求效果比较好？ 是这样的，由于是产品线的迭代版本功能，是提供给已购买产品用户的增值服务，所以这个数据衡量可以从两方面侧面体现出，一是新版本推出后的，增加了产品的优势，吸引到了更多客户，二是原有客户对新功能普遍比较满意。 因为我做的只是迭代版本的其中一些需求，所以没有针对单个需求量化统计，但是因为公司业务增长，所以该季度绩效提升。 你们公司产品支持的最大并发量是多少？ 因为我们产品售卖后是在客户本地环境进行单机部署，本质是一套管理系统，所以本身业务上并发量和吞吐量没有那么高要求。 非关系型数据库和关系型数据库的区别是什么？ 数据模型： 关系型数据库：使用表格（表）和行的结构来组织数据。数据被组织成结构化的表，表之间通过关系进行连接。 非关系型数据库：使用不同的数据模型，包括文档型、键值对、列族型和图形型等。非关系型数据库可以更灵活地存储和检索非结构化或半结构化的数据。 架构设计： 关系型数据库：遵循ACID（原子性、一致性、隔离性、持久性）原则，确保数据的一致性和完整性。通常采用固定的模式，需要预定义表的结构。 非关系型数据库：更灵活，可能牺牲一些ACID属性以换取更好的可扩展性和性能。常用BASE（基本可用、柔性状态、最终一致性）作为一致性模型。 数据一致性： 关系型数据库：通过事务保持强一致性，事务要么全部执行成功，要么全部失败，保持数据库的一致性。 非关系型数据库：可能采用 eventual consistency（最终一致性）模型，即在一定时间内系统将达到一致状态，但不要求实时一致性。 扩展性： 关系型数据库：垂直扩展（增加更强大的硬件）相对容易，但水平扩展（通过添加更多节点）相对困难。 非关系型数据库：通常设计为能够水平扩展，通过添加更多节点来增加存储和处理能力。 适用场景： 关系型数据库：适用于需要强一致性、事务处理和复杂查询的场景，例如金融系统、企业管理系统等。 非关系型数据库：适用于需要高可扩展性、灵活的数据模型和大量读写操作的场景，例如社交媒体、日志记录、实时分析等。 MySQL 支持的最大并发量是多少？ 8核 16G 的数据库大体是几千个数量级。 优化：读写架构分离、热冷点数据、同步到缓存。 python 协程底层实现的原理？ 在 Python 中，协程的底层实现主要依赖于生成器和事件循环的概念。我们使用 async def 来定义异步函数，内部使用 await 来挂起执行，而事件循环则负责调度协程的执行。 生成器的特性允许我们在函数执行期间暂停并保持状态，然后在需要时继续执行，这就是协程能够实现非阻塞异步操作的关键。整个过程让我们能够更有效地处理异步 I/O 操作，提高程序的性能。 python 有线程为什么还要协程呢？ 第一是轻量性：相比于线程，协程的切换不需要涉及操作系统的系统调用，线程是操作系统级别的调度单元，相对较重量级。 第二是无需锁：在多线程编程中，由于线程间共享内存空间，可能涉及到对共享数据的加锁操作以保证数据的一致性。这种锁机制在并发场景下可能导致死锁和性能问题。协程通过避免共享状态，减少了对锁的需求，简化了并发编程。 第三是适用于I/O密集型任务：协程特别适用于 I/O 密集型任务，例如网络请求、文件读写等。在这些任务中，线程可能会因为等待 I/O 操作完成而被阻塞，浪费了系统资源。而协程可以在等待期间主动让出控制权，执行其他任务，提高了并发效率。 第四是单线程执行：协程运行在单线程中，避免了多线程编程中的竞争条件和并发控制问题。虽然 Python 中的全局解释器锁（GIL）会限制多线程的并行执行，但协程在单线程内的执行不受 GIL 的限制，因此能够更好地利用系统资源。 python 一个协程卡死，会影响其他的协程吗？ 当一个协程卡死时，它确实会占用系统资源，但并不会影响到其他协程的执行。这是因为协程是在线程下的，属于用户态，操作系统对协程是无感知的。在线程内的多个协程是通过协程的调度获得CPU时间的，所以它们是串行的。也就是说，当线程下的某个协程在运行时，其他协程会被挂起，没有在运行。但是需要注意的是，如果这个卡死的协程持有了其他协程需要的资源，那么这些协程可能会受到影响。因此，我们需要在编写协程代码时注意避免无限循环或递归调用，合理使用异常处理机制，以及定期检查协程状态，及时终止卡死的协程。 tcp 和 udp 区别？ TCP和UDP是两种不同的网络传输协议。它们的主要区别可以从以下几个方面进行阐述： 连接方式：TCP是一种面向连接的协议，这意味着在传输数据之前需要先建立一条专用的通信连接。而UDP则不需要建立这样的连接，可以直接发送和接收数据。 服务对象：TCP是一对一的两点服务，即一条连接只有两个端点。相比之下，UDP支持一对一、一对多、多对多的交互通信。 可靠性：TCP致力于可靠地交付数据，保证数据可以无差错、不丢失、不重复、按需到达。然而，UDP的交付机制是尽最大努力交付，无法保证数据的可靠交付。 应用场景：TCP和UDP的使用场景是不同的。TCP适用于对数据传输可靠性要求较高的场景，如文件传输、电子邮件等。而UDP则适用于对实时性要求较高的场景，如语音通话、视频直播等。 tcp 怎么保证可靠传输的？ TCP，作为一种面向连接的传输层协议，提供了全双工逻辑通信信道，能够保证端到端的可靠性传输。可靠传输意味着通过TCP连接传送的数据是没有差错、不会丢失、不重复并且按序到达的。 要实现这一目标，TCP主要依赖以下几个关键技术： 序列号：TCP会为每个字节分配一个序列号，这样接收方就能够按照正确的顺序重组数据。 检验和：TCP会对每个字节进行校验，以便检测出数据传输过程中可能出现的错误。 确认应答信号：接收方在收到数据后会发送一个确认应答信号，以通知发送方数据已经成功接收。 重发机制：如果发送方没有收到来自接收方的确认应答信号，那么它会对数据进行重新发送。 连接管理：TCP会跟踪哪些数据已经被发送和接收，哪些还在等待发送或接收，从而确保数据的有序性和完整性。 窗口控制：TCP可以通过调整发送窗口的大小来优化网络资源的使用。 http 和 https 的区别？ HTTPS则在HTTP协议的基础上，通过SSL/TLS加密协议在应用层和传输层之间添加了一层安全层，保证了数据传输的安全性。 HTTP使用明文方式传输数据，这种方式下，数据容易被截获和篡改。相反，HTTPS会对数据进行加密处理，从而防止敏感信息被第三方获取。 HTTP使用明文方式传输数据，这种方式下，数据容易被截获和篡改。相反，HTTPS会对数据进行加密处理，从而防止敏感信息被第三方获取。 HTTPS协议需要到CA机构申请证书，大部分免费的证书很少，通常需要支付一定的费用。在这个过程中，Web服务器需要获得一个服务器证书并将该证书与要使用SSL的服务器绑定。 http 的 get 和 post 的区别？ GET 和 POST 是 HTTP 请求方法，它们在数据传输方式、数据传输大小限制、安全性、幂等性和缓存等方面有一些不同。 GET 请求将数据附加在 URL 中，适合传输小量的非敏感信息，而 POST 请求将数据放在请求体中，适合传输大量或敏感信息。 GET 是幂等的，而 POST 不是幂等的，可能产生不同的结果。 此外，GET 可以被浏览器缓存，而 POST 不容易被缓存。 vue 双向绑定的底层原理是什么？ Vue 双向绑定的底层原理主要包括数据劫持、Getter 和 Setter、发布-订阅模式，以及虚拟 DOM 的应用。 通过使用 Object.defineProperty 对数据进行劫持，为每个属性添加 getter 和 setter，实现数据的监听。 Getter 负责依赖收集，Setter 负责触发更新，通过发布-订阅模式确保数据变化时通知所有依赖的 Watcher 进行更新。 引入虚拟 DOM 的概念，通过对比新旧虚拟 DOM 树的差异，最小化更新范围，提高性能。 在具体实现中，v-model 是双向绑定的体现，通过对输入框的事件监听和值的动态绑定，实现数据和视图的双向同步。这些原理的结合使得 Vue 能够实现数据和视图之间的实时同步，提升开发效率。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/招商金科.html":{"url":"经验分享/面试/面试实战/招商金科.html","title":"招商金科.md","keywords":"","body":"linux 上如何查询一个文件被那个进程打开？linux 上如何确认服务端口正确打开？Python 静态类和动态类的区别？Python 数据类是什么，有什么作用？redis 常用数据类型redis hash 数据类型有什么作用？高可用部署在线上，服务怎么稳定TreeviewCopyright © aleen42 all right reserved, powered by aleen42 linux 上如何查询一个文件被那个进程打开？ linux 上如何确认服务端口正确打开？ Python 静态类和动态类的区别？ Python 数据类是什么，有什么作用？ redis 常用数据类型 redis hash 数据类型有什么作用？ 高可用部署在线上，服务怎么稳定 linux 上如何查询一个文件被那个进程打开？ 使用 lsof 命令 lsof filename 使用 fuser 命令 fuser filename 使用 ps 命令 ps -ef | grep filename linux 上如何确认服务端口正确打开？ 使用 netstat 命令 netstat -anp | grep port 使用 telnet 命令 telnet ip port 使用 nc 命令 nc -zv ip port Python 静态类和动态类的区别？ 静态方法可以直接使用类名调用，而动态方法需要先创建实例对象，然后通过实例对象调用。 动态方法是为了调用本类时不再写多余的本类类名，而是直接使用 cls，比如 django Model 中 create 方法等。 静态方法不提供 self 本实例，动态方法提供 cls 本类。 如果子类继承父类静态方法，调用的还是父类方法和属性；子类继承父类动态方法，调用的是子类的方法和属性。 Python 数据类是什么，有什么作用？ 数据类是指类的属性和方法都是数据属性和数据方法，没有类方法和类属性。 数据类的应用场景是：数据类的实例对象可以作为字典的 key。 class DataClass: def __init__(self, name): self.name = name def __hash__(self): return hash(self.name) def __eq__(self, other): return self.name == other.name data_class = DataClass('data_class') data_dict = {data_class: 'data_class'} print(data_dict[data_class]) redis 常用数据类型 String、Hash、List、Set、Sorted Set redis hash 数据类型有什么作用？ hash 数据类型是指一个 key 对应一个字典，字典中的 key 和 value 都是字符串。 hash 数据类型的应用场景是：存储对象、存储用户信息、存储商品信息等。 高可用部署在线上，服务怎么稳定 服务的高可用部署，主要是指服务的容灾和负载均衡。 容灾指的是：当某个服务不可用时，能够自动切换到其他服务上。 容灾的方式： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/杭州谛听.html":{"url":"经验分享/面试/面试实战/杭州谛听.html","title":"杭州谛听.md","keywords":"","body":"你知道哪些 git 的用法？你了解哪些 linux 命令？你了解哪些加密方法？哈希算法包含哪些？数字签名算法包含哪些？docker 如何部署应用？docker 镜像和容器的区别？docker 副本是啥？有啥作用？docker 副本的调度策略是什么？cookie 和 session 的用途是什么？cookie 和 token 对比？JWT 是什么？token 由哪些部分组成？token 的生成过程是什么？token 的存储位置？哪些地方会用到 JSON 和 XML？什么是 CSRF？如何防范？如何设置跨域？如何考量项目中的时间复杂度？上一段工作中比较有成就感的事情？websocket 实现的原理是什么？fastapi 是如何实现异步的？什么是 ASGI、WSGI？什么是 uvicorn？提问？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 你了解哪些 linux 命令？ 你了解哪些加密方法？ 哈希算法包含哪些？ 数字签名算法包含哪些？ docker 如何部署应用？ docker 镜像和容器的区别？ docker 副本是啥？有啥作用？ docker 副本的调度策略是什么？ cookie 和 session 的用途是什么？ cookie 和 token 对比？ JWT 是什么？ token 由哪些部分组成？ token 的生成过程是什么？ token 的存储位置？ 哪些地方会用到 JSON 和 XML？ 什么是 CSRF？如何防范？ 如何设置跨域？ 如何考量项目中的时间复杂度？ 上一段工作中比较有成就感的事情？ websocket 实现的原理是什么？ fastapi 是如何实现异步的？ 什么是 ASGI、WSGI？ 什么是 uvicorn？ 提问？ 你知道哪些 git 的用法？ 添加和提交 git add和git commit用来将代码提交到本地仓库。 分支管理 git branch、git checkout、git merge用来管理代码分支。 版本回退 git reset和git revert可以用来回退版本。 仓库同步 git fetch、git pull、git push用来同步本地仓库和远程仓库。 团队协作 git clone、fork、PR(Pull Request)用于团队协作编码。 代码审查 git diff和git log查看代码改动。 标签管理 git tag用于给版本打标签。 其他常用命令 git status、git rm、git stash等。 当然，更常用的是 ide 提供的图形化 git 支持。 你了解哪些 linux 命令？ 文件操作类：touch、mkdir、rm、cp、mv、ls、find、grep、head、tail 权限：chmod、sudo 系统监控：top、ps、free 网络管理：ifconfig、ping 进程管理：kill 软件包管理：apt、yum 文件压缩解压缩：tar、gzip、bzip2、zip、unzip 文本处理：vim、grep、sed 你了解哪些加密方法？ 对称加密 原理是：发送方和接收方使用同一个密钥进行加密和解密，这种加密方式加密速度快。加密流程就和玩魔方一样。 常见的对称加密算法： DES、AES、RC4、RC5 等。 缺点是：密钥的传输和管理是一个问题，如果密钥被截获，那么加密的数据也就不安全了。 优点是：加密速度快。 非对称加密 原理是：每个人都有一个公钥和私钥，通信双方获取对方公钥。我用对方的公钥加密消息，对方用自己的私钥解密消息。这样保证了消息的安全性。 非对称加密分为：哈希算法、数字签名算法。 常见的非对称加密算法：RSA、ECC、ElGamal、DSA 等。 哈希算法包含哪些？ 原理是：将任意长度的数据映射为固定长度的摘要，这个摘要值也称为哈希值。 常见的哈希算法：MD5、SHA-1、SHA-2、SHA-3 等。 哈希算法的特点是：不可逆、输出确定、快速、抗修改、抗碰撞。 缺点是： 由于输入内容无限可能，这就导致了哈希有可能出现碰撞。 因为用户很多密码都很简单，而且哈希算法计算很快，因此常用的密码以及对应的哈希值可以存储下来作为彩虹表。黑客可以通过彩虹表攻击破解用户密码。 哈希算法的延申： 哈希加盐 原理是：通过在原始密码的基础上添加随机字符串，然后再进行哈希计算，这样就可以防止彩虹表攻击。 密钥延申哈希算法 原理是：通过在原始密码的基础上添加随机字符串，以及指定成本参数，然后再进行哈希计算。成本参数越大，计算越耗时，破解难度也越大。 数字签名算法包含哪些？ 原理是：消息 → 哈希算法 → 消息摘要 → 非对称加密算法 → 数字签名 docker 如何部署应用？ docker 部署应用，首先需要编写 Dockerfile 文件，然后使用 docker build 命令构建镜像，最后使用 docker run 命令启动容器。 Dockerfile 文件 FROM python:3.7 ADD . /code WORKDIR /code RUN pip install -r requirements.txt CMD [\"python\"， \"main.py\"] docker build -t app_name:1.0 . docker run -d -p 8000:8000 --restart=always --name app_name app_name:1.0 docker 镜像和容器的区别？ 镜像是一个只读的模板，容器是镜像运行时的实体。 docker 副本是啥？有啥作用？ 副本是指：同一个服务的多个实例。 副本的作用是：提高服务的可用性。 如何创建副本：使用 docker service scale 命令创建副本。 docker 副本的调度策略是什么？ 当副本所在的节点宕机或者不可达时，副本会被重新调度。 docker 副本的调度策略是：随机调度。 docker 副本的调度策略可以通过 --strategy 参数指定，可选值有：random、spread、binpack。 random：随机调度，即随机选择一个节点进行调度。 spread：均匀调度，即将副本均匀调度到所有节点上。 binpack：紧凑调度，即将副本调度到当前负载最小的节点上。 cookie 和 session 的用途是什么？ cookie 和 session 都是用来保存用户状态的。 cookie 是保存在客户端的，session 是保存在服务器端的。 服务器中用户登录时生成一个唯一标识 sessionid 并作为映射表存放在服务器中，服务器在响应客户端请求时会将 sessionid 通过 set-cookie 头部传送过去，客户端也就是浏览器，会将该 sessionid 存储到 cookie 中，下次请求，浏览器会带上该 sessionid 给服务端，做身份验证。 cookie 和 token 对比？ cookie 的有效期是：一般四个月，大小为 4 KB。 token 可以携带丰富的用户信息。 token 能处理多端身份验证，也能防止 CSRF 攻击。 JWT 是什么？ JWT 的全称是 JSON Web Token，它是一种基于 JSON 的开放标准，用于在用户和服务器之间传递安全可靠的信息。 JWT(JSON Web Token)既可以使用非对称加密，也可以使用对称加密，主要取决于其中的签名(signature)部分的生成方式。 如果签名部分使用 RSA 或者 ECDSA 等公钥/私钥对生成和验证，那么就是非对称加密。 如果签名部分使用 HMAC + 对称密钥生成，那么就是对称加密。 常见的 JWT 应用场景有：用户认证、单点登录、API 授权等。 单点登录是指：用户只需要登录一次，就可以访问多个应用程序。 token 由哪些部分组成？ token 只是一个令牌，那常用的生成方式一般基于 jwt 标准。 jwt 的 token 由三部分组成：header、payload、signature。用 . 拼接组合成字符串。 header：header 部分主要是用来描述 token 的元数据，比如 token 的类型、加密算法等。 # header { \"typ\": \"JWT\"， \"alg\": \"HS256\" } payload：payload 部分主要是用来存放用户信息，比如用户的 id、用户名等。 # payload { \"user_id\": 1， \"username\": \"admin\" } signature：signature 部分主要是用来对 token 进行签名，以防止 token 被篡改。 # signature # 1. 将 header 和 payload 进行 base64 编码 header_encoded = base64.urlsafe_b64encode(json.dumps(header).encode(\"utf-8\")).decode(\"utf-8\") payload_encoded = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\")).decode(\"utf-8\") # 2. 将编码后的 header 和 payload 用 `.` 进行拼接 header_payload = header_encoded + \".\" + payload_encoded # 3. 使用指定的加密算法（sha256）对拼接后的字符串进行加密 signature = hashlib.sha256(header_payload.encode(\"utf-8\")).hexdigest() token 的生成过程是什么？ token 的生成过程是：首先将 header 和 payload 进行 base64 编码，然后将编码后的 header 和 payload 用 . 进行拼接，然后使用指定的加密算法对拼接后的字符串进行加密，最后将加密后的字符串用 . 进行拼接，就生成了 token。 Python 示例： import base64 import hashlib import json header = { \"alg\": \"HS256\"， \"typ\": \"JWT\" } payload = { \"user_id\": 1， \"username\": \"admin\" } header_encoded = base64.urlsafe_b64encode(json.dumps(header).encode(\"utf-8\")).decode(\"utf-8\") payload_encoded = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\")).decode(\"utf-8\") signature = hashlib.sha256((header_encoded + \".\" + payload_encoded).encode(\"utf-8\")).hexdigest() token = header_encoded + \".\" + payload_encoded + \".\" + signature print(token) Go 示例： package main import ( \"crypto/hmac\" \"crypto/sha256\" \"encoding/base64\" \"encoding/json\" \"fmt\" ) func main() { header := map[string]string{ \"alg\": \"HS256\"， \"typ\": \"JWT\"， } payload := map[string]interface{}{ \"user_id\": 1， \"username\": \"admin\"， } header_encoded := base64.URLEncoding.EncodeToString([]byte(json.Marshal(header))) payload_encoded := base64.URLEncoding.EncodeToString([]byte(json.Marshal(payload))) h := hmac.New(sha256.New， []byte(\"secret\")) h.Write([]byte(header_encoded + \".\" + payload_encoded)) signature := base64.URLEncoding.EncodeToString(h.Sum(nil)) token := header_encoded + \".\" + payload_encoded + \".\" + signature fmt.Println(token) } token 的存储位置？ token 的存储位置有：内存、数据库、redis、客户端（cookie、storage） 数据库：需要建立 token 表，安全可靠，但是每次验证都需要查询数据库，影响性能。（通过字段设置过期时间） redis：速度快，并且可以设置过期时间，需要运行和维护缓存服务。 一般采用 数据库+redis 混合存储。 哪些地方会用到 JSON 和 XML？ JSON 和 XML 都是可以用作数据存储和传输。 在存储方面，JSON 更适合简单配置，XML 适合存储需要层级结构和复杂度的配置文件。 在传输方面，JSON 更适合传输数据，XML 适合传输文档。 什么是 CSRF？如何防范？ CSRF 的全称是 Cross-site request forgery，中文名为跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。 如何设置跨域？ 跨域是指浏览器的同源策略限制,从一个域名的网页去请求另一个域名的资源时,如果域名、协议、端口有任何一个不同,都是跨域。 跨域的解决方案有：JSONP、CORS、postMessage、WebSocket、nginx 反向代理、nodejs 中间件代理等。 跨域的解决方案我目前只用过 CORS， CORS(Cross-Origin Resource Sharing) 是跨域资源共享的缩写,它是一种浏览器的技术规范,允许在一定条件下进行跨域访问控制,保证安全的跨域数据传输。 客户端发起跨域请求：浏览器检测到这是一个跨域请求,会在请求头中自动添加 Origin 字段。 服务端响应CORS头：服务端需要在响应头中添加Access-Control-Allow-Origin字段,表明允许的请求源。 预检请求验证：当浏览器检测到跨域请求为复杂请求（PUT、DELETE / 自定义头 / application/json 非简单内容类型）时，会提前发送一个 options 请求进行预检，服务器需要响应是否通过这次预检。 如何考量项目中的时间复杂度？ 识别关键算法，找到项目中的核心算法，验证该算法的时间复杂度。 考量输入规模，根据实际输入量来确认实际影响。 对比不同解法，分析不同解法的时间复杂度。 考虑缓存优化 加入监控指标。 上一段工作中比较有成就感的事情？ 应该是当我入职了一段时间后，比较熟悉公司的整体业务，公司下发给我了一个新的需求。当我进行详细的需求拆分后，我发现这个需求要实现起来涉及的细节很多，但我的领导还是相信了我，让我独立完成。因为我上一家公司做的是云计算服务，当时的需求简单来说就是给一个学校机房的虚拟桌面提供批量开机服务。关于能否开机就涉及到很多底层资源考量，以及如何启动、启动得优先级是什么等等？关于底层资源考量我当时整理了很多文档，也和对应的同事沟通了很多。关于启动优先级，我复习了计算机组成原理中 CPU 调度算法，参考 非抢占式优先级调度算法 和 多级队列调度算法，最终实现了一个云桌面启动调度算法。自己那段期间学到了很多，也整理了很多文档，最终实现了这个需求，也得到了领导的认可。 websocket 实现的原理是什么？ 总体来说，websocket 通过 tcp 协议完成握手，自定义数据帧格式传输，算一种长连接协议。它相比 HTTP 来说，协议头部数据相对较小，减少通信开销。http 采用轮询方式与服务端建立短连接。 建立连接： 客户端发起 HTTP 请求到服务器，通过 Connection、Upgrade、Sec-WebSocket-Key 等字段表明这是一个 websocket 协议。服务器端检查协议，并返回 Switching Protocols响应，表示协议切换成功。 数据格式： websocket 定义了自己的帧格式，包含 opcode、payload length、payload data 等字段。opcode 表示数据类型，payload 包含实际数据。 数据传输： 连接建立后，客户端和服务器端就可以通过 websocket 自定义的帧格式传递数据。所有传输数据都在一个 TCP 连接内完成。 心跳检测 客户端和服务器端可以互相发送 ping-pong 消息来进行心跳检测，判断连接是否正常。 关闭连接 客户端或服务器端可以发送 close 帧来关闭连接，包含关闭原因代码和原因短语。 fastapi 是如何实现异步的？ 基于ASGI(Asynchronous Server Gateway Interface)标准，这是Python异步Web框架的规范。 使用uvicorn作为ASGI服务器，它基于uvloop实现异步IO，性能很高。 内部使用异步函数，并通过asyncio模块实现异步逻辑。 通过async和await关键字定义异步函数。await可以暂停函数执行，等待IO操作完成。 通过请求中间件(middleware)实现请求拦截器，可以异步处理请求和响应。 核心代码使用异步语法，让整个框架可以异步运行，不会阻塞线程。 数据库操作使用数据库接口的异步模式，发挥异步IO的优势。 什么是 ASGI、WSGI？ ASGI(Asynchronous Server Gateway Interface)和WSGI(Web Server Gateway Interface)都是Python的Web服务器和框架之间的规范接口。 WSGI是同步Web的规范，被大多数同步框架如Flask、Django支持。基于线程或进程，一个请求占用一个线程。 ASGI是异步Web的规范，被异步框架如FastAPI、Starlette支持。基于异步IO，一个线程可以处理多个请求。 什么是 uvicorn？ uvicorn 是一个支持 ASGI 的高性能异步 web 服务器，用于实现 Python 异步框架和应用。它的主要特点包括: 支持 ASGI - uvicorn 实现了 ASGI(异步服务器网关接口)规范，可以与任何基于 ASGI 的框架配合使用，如 FastAPI。 基于 uvloop - uvicorn 底层基于 uvloop 库实现异步 IO，该库建立在 libuv 和 Cython 之上，性能出色。 高吞吐量 - 通过异步和 uvloop，uvicorn 可以实现非常高的吞吐量，支持大规模并发。 支持 HTTP/1.1 和 HTTP/2 - uvicorn 支持常见的 HTTP 协议。 轻量级 - uvicorn 是一个轻量的服务器，可以作为最小化部署的选择。 插件生态 - uvicorn 提供中间件插件，实现自定义修改请求和响应处理流程。 命令行使用 - uvicorn 提供了命令行接口，可以方便运行 ASGI 应用。 提问？ 我想了解更多关于该岗位的工作内容以及服务对象？ 我想了解下整个企业有哪些团队，都是在负责什么内容？我所在的岗位起到一个什么样的作用？ 我想冒昧请问下，企业目前的，盈利模式和商业模式是什么呢？ 谛听这部分业务仅针对 谛听公司开由股份，跟之江实验室紧密合作。分工；对外研发项目。 两年不能出国，不能去外资企业，军工企业。控股公司，跟谛听签合同 跟 之江实验室 联合开发项目。学习和了解。项目属于谛听。 工作内容：军方保密项目（长期稳定），后台管理平台，python flask + vue 管理军方数据. 国家拨款. 50~60 人，项目团队，一半算法，做理论，不做应用产品。 外部合作团队。 薪资结构： 岗位工资+ 组成 14薪 五险一金按杭州标准 午餐补贴、加班八点以后，晚餐津贴20元。 按经费 15 * 14 = 210 试用期 3-6 个月。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/汉堂软件.html":{"url":"经验分享/面试/面试实战/汉堂软件.html","title":"汉堂软件.md","keywords":"","body":"Redis 是单线程还是多线程？之前工作中使用到的Django中的权限管理是如何实现的？请列举Django中内置的权限如果有一个权限管理系统需要进行测试，尝试编写一套自动化测试方案进行测试？垃圾回收机制flask 框架中的蓝图是什么？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 之前工作中使用到的Django中的权限管理是如何实现的？ 请列举Django中内置的权限 如果有一个权限管理系统需要进行测试，尝试编写一套自动化测试方案进行测试？ 垃圾回收机制 flask 框架中的蓝图是什么？ Redis 是单线程还是多线程？ Redis 是单线程的，它的所有操作都是在一个线程中完成的。 Redis 为什么是单线程的？ 因为 Redis 的数据都是存储在内存中的，而内存的读写速度非常快，所以 Redis 可以通过单线程来完成所有的操作。 如果 Redis 使用多线程，那么线程之间的切换会消耗一定的时间，这样反而会降低 Redis 的性能。 当然，Redis 也支持多线程，但是它的多线程只是用来处理 Redis 中的 IO 之前工作中使用到的Django中的权限管理是如何实现的？ 使用Django内置的认证系统auth,可以方便地实现用户账号的注册、登录、密码修改等基本功能。 基于auth,我们可以创建不同的用户组Group,表示不同的角色权限。 对于访问控制,Django提供了permission系统,可以把不同权限用permission表示,并分配给不同用户组。 视图函数可以使用装饰器如@permission_required来检查用户是否具有指定权限,不存在则返回403。 请列举Django中内置的权限 Django中内置的权限有：add、change、delete、view 针对管理员权限: auth.add_user auth.change_user auth.delete_user 如果有一个权限管理系统需要进行测试，尝试编写一套自动化测试方案进行测试？ 使用Selenium或Appium等自动化测试框架,编写测试脚本,通过不同用户登录系统,并执行各种权限操作,模拟真实用户场景。 构建完整的测试用例,覆盖用户管理、角色管理、资源权限管理、页面访问控制等所有功能点。 通过准备测试数据,预设置不同类型的用户角色、资源权限组合,设置足够的测试场景和案例。 设计高风险测试用例,模拟权限漏洞或绕过场景,如管理员帐号操作、角色继承、权限穿透等情况。 编写API接口的自动化测试脚本,验证各接口的权限控制逻辑。 构建独立的测试环境,保证测试执行不影响线上环境。 垃圾回收机制 垃圾回收机制应用在内存管理中，用于回收不再使用的内存空间。一句话总结就是：引用计数器 为主，标记清除 和 分代回收 为辅。 引用计数器：Python 3 使用了引用计数机制来跟踪内存中的对象，即每个对象创建时都有一个引用计数 refcnt，当对象被引用时，它的引用计数加 1，当对象不被引用时，它的引用计数减 1，当对象的引用计数为 0 时，它就会被垃圾回收机制回收。 标记清除：Python 3 中的垃圾回收机制还有一个循环垃圾回收器，主要是为了解决对象之间相互引用，导致引用计数不为 0 的情况。主要的实现方式是通过遍历以 root 为节点的有向图，如果一个对象入度为 0，那么它就是循环引用的一部分，就应该将其回收。 分代回收：主要是为了解决回收机制的性能问题，控制回收的频次，是一种以时间换空间的操作方式。指的是将对象分为三代，新创建的对象为第 0 代，当第 0 代对象经过一次垃圾回收后，如果没有被回收，那么它就会被提升为第 1 代，以此类推，当第 2 代对象经过一次垃圾回收后，如果没有被回收，那么它就会被提升为第 3 代，第 3 代对象不会再被提升，当第 3 代对象经过一次垃圾回收后，如果没有被回收，那么它就会被放入到一个不可回收的列表中。 Python 3 中的垃圾回收机制还有一个阈值机制，当垃圾回收器检测到第 0 代对象的数量达到了阈值，那么就会执行一次垃圾回收，当垃圾回收器检测到第 1 代对象的数量达到了阈值，那么就会执行一次垃圾回收，以此类推。 import gc print(gc.get_threshold()) # 默认值 (700, 10, 10) gc.set_threshold(700, 10, 10) # 设置阈值 flask 框架中的蓝图是什么？ 蓝图是 flask 框架中的一个组件，它可以将一个应用程序分割成多个模块，每个模块都可以单独编写，然后注册到应用程序中。 蓝图的作用是： 可以将一个复杂的应用程序划分为多个模块，每个模块可以单独管理。 方便代码的管理和维护。 可以将一个应用程序分发给多个开发人员协同开发。 具体代码实现： # 导入蓝图对象 from flask import Blueprint # 创建蓝图对象 app = Blueprint('app', __name__) # 注册蓝图对象到应用程序中 app.register_blueprint(app) 业务线：各个业务线做工具。项目管理工具、素材管理平台 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试实战/深圳十分融易科技有限公司.html":{"url":"经验分享/面试/面试实战/深圳十分融易科技有限公司.html","title":"深圳十分融易科技有限公司.md","keywords":"","body":"深圳十分融易科技有限公司面试题Python 基础数据库相关TreeviewCopyright © aleen42 all right reserved, powered by aleen42 深圳十分融易科技有限公司 面试题 Python 基础 数据库相关 你知道哪些索引引擎吗？ 索引的优势和劣势是什么 联合索引 ABC，我查询 A，会触发联合索引吗？ 深圳十分融易科技有限公司面试题 Python 基础 数据库相关 你知道哪些索引引擎吗？ 索引的优势和劣势是什么 联合索引 ABC，我查询 A，会触发联合索引吗？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试经验/":{"url":"经验分享/面试/面试经验/","title":"面试经验","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试经验/Golang开发面试经验.html":{"url":"经验分享/面试/面试经验/Golang开发面试经验.html","title":"Golang开发面试经验.md","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试经验/Python开发面试经验.html":{"url":"经验分享/面试/面试经验/Python开发面试经验.html","title":"Python开发面试经验.md","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 #面试 Python 2023-08-22 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/":{"url":"经验分享/面试/面试题/","title":"面试题","keywords":"","body":"Python 面试Python 面试Python 服务端工程师每天做什么？ 实现网站后台业务逻辑 为网站/客户端（Android, iOS）提供接口 为产品/运营等提供后台网站工具，比如后台管理系统 Python 服务端工程师有什么特点？ 后端知识又多又杂。编程语言/数据库/算法/网络/架构... 工作多样。写接口/写网站/写工具/写前端/写脚本/运维/测试/部署... 体系： 面试技巧 Python 语言 算法与数据结构 编程范式 操作系统 网络编程 数据库 Web 框架 系统设计 面试经验 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/ai.html":{"url":"经验分享/面试/面试题/ai.html","title":"ai.md","keywords":"","body":"AIchatgptchatgpt 这类大语言模型的应用生态？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 chatgpt chatgpt 这类大语言模型的应用生态？ AIchatgpt chatgpt 这类大语言模型的应用生态？ 原本功能：利用智慧搜索引擎，提供一个对话服务。 通过第三方插件接入应用：代码助手、ppt 等文档处理工具、人工助手、智能知识库检索等 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/hr问题.html":{"url":"经验分享/面试/面试题/hr问题.html","title":"hr问题.md","keywords":"","body":"hr 问题自我介绍做个自我介绍？请你先做个自我介绍吧之前工作经历你上一份工作主要内容是啥？你在的工作中用到了哪些技术和模块？你工作中最记忆犹新的事情是什么？我具体是怎么克服的？请你仔细说说你为什么离职？你离职后做了些什么？本公司问题你了解我们公司是做什么的吗？你认为你有什么优势？你觉得 杭州 这个地方怎么样？你大概预期的薪资是多少？你有什么想问的吗？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 hr 问题 自我介绍 做个自我介绍？ 请你先做个自我介绍吧 之前工作经历 你上一份工作主要内容是啥？ 你在的工作中用到了哪些技术和模块？ 你工作中最记忆犹新的事情是什么？ 我具体是怎么克服的？ 请你仔细说说你为什么离职？ 你离职后做了些什么？ 本公司问题 你了解我们公司是做什么的吗？ 你认为你有什么优势？ 你觉得 杭州 这个地方怎么样？ 你大概预期的薪资是多少？ 你有什么想问的吗？ hr 问题面试 hr 2023-08-22自我介绍 做个自我介绍？ 面试官（们），您（们）好，我叫范茂伟，来自四川，今年满24岁。大学就读于四川师范大学计算机科学学院，学的是计算机科学与技术专业，本科毕业。我第一份工作是在武汉噢易云公司，该公司主要业务是开发以及对外提供云计算服务。我所担任的是 Python 开发工程师，我的工作内容主要是负责公司各产品线迭代版本的需求开发、帮助客户对象处理技术问题、以及解决各类反馈的bug等。我最近的一段工作是前两个月参与并主导了之江实验室网站开发，其中我的工作是负责搭建整个项目 我比较喜欢使用 Python 的 django 和 fastapi 框架去实现一些小项目，也会自己使用前端主要是 vue 去开发所需的页面。最近也学习和使用了 go 的 gin 框架去做一些微服务等。 平时喜欢学习和了解新的技术和方向。空闲时间自己的娱乐活动主要是看书、跑步和篮球。 以上是我的自我介绍。 请你先做个自我介绍吧 （介绍自己的学历、工作经历、工作内容、工作成绩、工作中遇到的问题、自己的优缺点、自己的职业规划等等） 储总，您好，我叫范茂伟，来自四川，今年满24岁。大学就读于四川师范大学计算机科学学院，学的是计算机科学与技术专业，本科毕业。我第一份工作是在武汉噢易云公司，该公司主要业务是开发以及对外提供云计算服务。我所担任的是 Python 开发工程师，我的工作内容主要是负责公司各产品线迭代版本的需求开发、帮助客户对象处理技术问题、以及解决各类反馈的bug等。我于2021年4月到2022年8月，在该公司工作，为期一年多。 我认为我以前的工作成绩主要有以下几点： 第一，职业生活的适应，我在工作中，能够很好的与同事、客户、上级进行沟通，能够很好的理解同事的需求，能够很好的完成工作任务。 第二，技能能力的提升，我在工作中，能够很好的解决和处理各类问题。 第三，工作习惯的养成，我在工作中会经常处理以及编写技术文档、需求分析文档、设计文档等，有一个很好的文档输出习惯。 我认为我以前的工作中，也存在一些不足，比如我认为我在工作中，有时候会有一些想法，但是不太敢于表达出来，我认为这是我以前工作中的一个不足。 之前工作经历 你上一份工作主要内容是啥？ 我当时所在的部门是研发部门，我个人的职位是 Python 开发工程师。 在上一份工作中,我主要与产品、前端、测试和客户四大类人员进行沟通协作。 与产品经理就新版本需求进行讨论，完成需求分析和技术可行性评估。 配合前端开发者完成新需求后端逻辑的编写，并提供 API 支持前端开发。 与测试团队确认需求规格，解决测试过程中发现的 Bug。 面向客户处理技术问题，实现客户定制化功能需求。 通过与多个部门的协作，我担任后端工程师角色，参与需求评估、系统设计、编码实现和质量控制等全流程工作。 具体的内容是担任 Python 后台开发工作，参与 Web 管理台和微信小程序业务开发，主要使用的技术框架是 django 和 fastapi，项目中使用到了 mysql、redis、rabbitmq、nginx、docker、jenkins 等。 你在的工作中用到了哪些技术和模块？ 我在工作中主要使用的技术栈是 Python + Django + FastAPI + MySQL + MyCat + Redis + RabbitMQ + Nginx + Docker + Git + Linux 等。 我使用过装饰器为枚举类型添加方法。 代码设计中我使用过单例模式以及抽象工厂模式。 我基于 CPU 调度算法中 非抢占式优先级调度算法 和 多级队列调度算法 来实现过项目需求开发。 我使用过乐观锁机制来解决并发问题。 你工作中最记忆犹新的事情是什么？ 应该是当我入职了一段时间后，比较熟悉公司的整体业务，公司下发给我了一个新的需求。当我进行详细的需求拆分后，我发现这个需求要实现起来涉及的细节很多，但我的领导还是相信了我，让我独立完成。因为我上一家公司做的是云计算服务，当时的需求简单来说就是给一个学校机房的虚拟桌面提供批量开机服务。关于能否开机就涉及到很多底层资源考量，以及如何启动、启动得优先级是什么等等？关于底层资源考量我当时整理了很多文档，也和对应的同事沟通了很多。关于启动优先级，我复习了计算机组成原理中 CPU 调度算法，参考 非抢占式优先级调度算法 和 多级队列调度算法，最终实现了一个云桌面启动调度算法。自己那段期间学到了很多，也整理了很多文档，最终实现了这个需求，也得到了领导的认可。 我具体是怎么克服的？ 关于资源问题，我会向公司前辈进行请教，关于算法，更多的是查阅网上论坛，复习计算机组成原理相关的知识。 请你仔细说说你为什么离职？ 主要是个人家庭原因，因为去年疫情关系。其次自身也想要换一个环境，换一个城市。所以在离职后处理完家里事情，就一个人去了很多城市，联系了很多当地朋友，包括去了杭州。 具体的话就是，一方面是家里装修出了很多问题，而我父母又抽不开空去协调这些事；还有我爷爷奶奶身体问题，也只有我去处理。 你离职后做了些什么？ 离职后没有在工作，主要自己在做三部分事情： 一是刚开始家里有些事情，有些困难，疫情期间嘛，我主要在家里进行帮忙；家里很多事情要处理，并且我爷爷身体抱恙我也得照顾。 二是自己在进行职业探索和扩展视野，也探索了自己未来想要生活和发展的城市。去了一些想要工作生活的城市旅游，和当地朋友交流。丰富自己认知的同时也在自己确认和完善职业规划； 三就是沉浸下来自我学习，也在看是否有合适的工作机会，会把更多时间投入到读书、学习、运动等，以及每天在观望合适的工作机会。 虽然我离开上一份工作已经将近一年的时间，我理解这段空档期，您或您的团队会对我的工作能力产生疑虑。但我认为自己仍然保有一些独特的优势与质量。 第一，这段时间我并未停止对下一份工作的准备。我与朋友同住,生活作息仍然保持规律。通过与在职朋友的交流,我能及时了解行业动态，保持工作状态。我相信一旦有了新的工作机会,我能迅速投入状态，快速适应工作要求。 第二，通过这段时间的思考，我对自己的职业发展目标更加明确。我体验了不同行业,结识了各界朋友，开拓视野。这让我对自身兴趣和未来方向有了更清晰的规划。 第三，在此期间我并未停止学习。我通过各种项目练习技能，并持续学习新知识以达到行业要求。这保证了我的技能与知识储备不会过时。 第四，我渴望重新投入工作，给予全新的热情。我会努力发挥自己的潜力，为团队做出更大贡献。我相信自己的动力不仅可以推动自我，也能激励团队整体向前。 综上所述，虽然离开工作场景一段时间，但我保持了良好状态，并准备充分。 本公司问题 你了解我们公司是做什么的吗？ 我了解到的贵公司是一家财税技术服务商，提供财税数据 SaaS 服务。 你认为你有什么优势？ 首先我认为有一点很重要，就是我认为一年期的空当不能完全算是我的劣势，反而可以说能成为我的优势。 你觉得 杭州 这个地方怎么样？ 我在今年四月份的时候来过杭州，我这一年也陆陆续续去过很多其他地方，算是对我未来生活城市的一个挑选，我对城市的评判有几个方面： 第一主观印象是绿化，尽管不是第一优先级（这更多基于经济价值的考量），但是城市的优越性并不在于现代化建筑，而是它的宜居程度，绿化和自然风光在其中是最重要的。比如杭州，给我的第一印象是它的街道两旁种植的树，在盛夏的时候是明度很高的绿色，不高但很秀气，有一种杭州这座城市本来的感觉。还有西湖，网络上的图片都是黯淡而且平平无奇的，真正亲眼看到风来雨来的时候，就会知道为什么西湖出文人，出名画。 其次是行人的氛围。在成都赶过早高峰就会知道，后面的人再急也是过不去的，因为前面的大多数人都不会慌。等到我在上海的时候，恰好在地铁的早高峰，有一种如果我不走快点就格格不入而且会被其他人撞飞的感觉。他们真的会每个人把自己收拾得整整齐齐然后在路上健步如飞，几乎马上就要跑起来了。当然，成都的路上也会有人跑起来，只是紧迫感相对较低。相比于杭州的话，杭州反而是中间的状态，不会太慢，也不会太快，大家都是在自己的节奏里走，不会有太多的紧迫感，但是也不会有太多的悠闲感，这种状态我觉得是最好的。当然这与城市经济产业支柱以及人口密度有关，但是这种非绝对工具理性状态是最舒服的生活状态。 另外还有城市规划、交通、气候、物价水平等。总之综合衡量下，我觉得杭州是我心目中的理想城市。 你大概预期的薪资是多少？ 我期望的薪资是 16k 以上。 你有什么想问的吗？ 我想请问下，我如果有幸入职后，在公司内目前的工作内容是什么？我负责的是具体哪个产品线的业务部分？ 我想请问下，公司目前的团队结构是怎样的？ 我想请问下，薪资的结构是怎样的？ 我想请问下，公司的福利待遇是怎样的？ 我想请问下，公司的加班情况是怎样的？ 我想请问下，公司的晋升机制是怎样的？ 其余没啥想问的了，我认为我了解到了很多我想了解的内容。如果我有啥想要补充了解的，我也会同 hr 在微信上沟通的。如果不打扰的话。 后端开发，toc 这一块 软件组 150人 6个小组 交付组（目前面试的是这个） 开发组 运维组 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/python_pep8.html":{"url":"经验分享/面试/面试题/python_pep8.html","title":"python_pep8.md","keywords":"","body":"pep8你知道 pep8 吗？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 你知道 pep8 吗？ pep8你知道 pep8 吗？ pep8 是 python 的编码规范，它是一种编码风格，是 python 程序员之间的一种代码风格约定，它的目的是为了让 python 程序更加易读，易维护。 它的发展历史是：2001 年，Guido van Rossum（python 之父）在 python-dev 邮件列表中提出了 pep8 的想法，2007 年，pep8 正式发布。 pep8 的全称是：Python Enhancement Proposal 8，它是 python 增强提案的第 8 号提案，它的主要内容是：python 代码的编码规范。 pep8 的例子：缩进使用 4 个空格，每行最多 79 个字符，类和函数之间空两行，类中的方法之间空一行，函数中的代码块之间空一行，函数和变量命名使用下划线分隔，类名使用驼峰命名法，文件名使用下划线分隔，文件中的 import 语句放在文件头部，import 语句分为三组，每组之间空一行，import 语句按照标准库、第三方库、自定义库的顺序排列，import 语句中的模块名使用全名，不使用别名，import 语句中的模块名按照字母顺序排列，import 语句中的模块名不要使用通配符，import 语句中的模块名不要使用相对路径，import 语句中的模块名不要使用括号，import 语句中的模块名不要使用多个 import 语句，import 语句中的模块名不要使用多行 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/python_web.html":{"url":"经验分享/面试/面试题/python_web.html","title":"python_web.md","keywords":"","body":"Python WebPython Web 基础Python 常用的应用服务器有哪些？Web 框架工作进程类型有哪些？WSGI、uWSGI 和 uwsgi 是啥？什么是 WSGI？网关接口是啥意思？flaskflask 中的上下文是什么？flask 框架中的蓝图是什么？djangodjango 的 MTV 模式以及 MVC 模式是啥，有啥区别？django 的路由注册是怎么实现的？中间件是什么？它的作用效果是？orm 是什么？django 那些用到了单例模式django 中权限管理是如何实现的？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 Python Web 基础 Python 常用的应用服务器有哪些？ Web 框架工作进程类型有哪些？ WSGI、uWSGI 和 uwsgi 是啥？ 什么是 WSGI？ 网关接口是啥意思？ flask flask 中的上下文是什么？ flask 框架中的蓝图是什么？ django django 的 MTV 模式以及 MVC 模式是啥，有啥区别？ django 的路由注册是怎么实现的？ 中间件是什么？它的作用效果是？ orm 是什么？ django 那些用到了单例模式 django 中权限管理是如何实现的？ Python WebPython Web 基础 Python 常用的应用服务器有哪些？ uWSGI Gunicorn Web 框架工作进程类型有哪些？ sync（默认）：同步工作模型，每个工作进程都是单线程的。它用于处理CPU密集型任务，但在I/O密集型任务中可能不够高效，因为每个工作进程在I/O等待时会被阻塞。 eventlet：使用Eventlet库的协程实现的工作模型。Eventlet允许非阻塞I/O，因此适用于I/O密集型应用程序。工作进程在I/O等待时可以切换到其他任务，提高并发性能。 gevent：使用Gevent库的协程实现的工作模型。 tornado：使用Tornado框架的工作模型。 thread：这是多线程工作模型，每个工作进程包含多个线程。适用于需要并行处理的应用，但注意需要小心线程安全问题。 geventwebsocket：专门用于支持WebSocket协议的工作模型，基于Gevent库。适用于实现WebSocket通信的应用。 WSGI、uWSGI 和 uwsgi 是啥？ WSGI（Web Server Gateway Interface）：WSGI 是一个 Python Web 应用程序与 Web 服务器之间的 接口规范 uWSGI 是一个 Web 服务器，它是一个用 C 语言编写的 Web 应用程序容器，支持运行 Python、Ruby、Perl 等多种编程语言。 uwsgi 是一个 与 uWSGI 服务器相关的协议。uwsgi 协议是一种二进制协议，它定义了 uWSGI 服务器与应用程序之间的通信协议。 什么是 WSGI？ WSGI 是 Web Server Gateway Interface 的缩写，即 Web 服务器网关接口。 WSGI 是 Python Web 服务器和 Web 框架/应用程序之间的一种接口标准，实现了 Web 服务器和 Web 应用程序之间的解耦。 WSGI 的具体规范可以参考 PEP 3333。 WSGI 的本质是一个 callbale，即一个可调用对象，它接收两个参数，一个是包含了 CGI 环境变量的字典，一个是 start_response 回调函数。 网关接口是啥意思？ 网关接口是指 Web 服务器和 Web 应用程序之间的接口。 web 服务器：比如 Nginx、Apache、IIS 等。 Web 应用程序：比如 Django、Flask、Tornado 等。 Web 服务器和 Web 应用程序之间的接口有很多种，比如 CGI、FastCGI、SCGI、WSGI、uWSGI、ASGI 等。 flask flask 中的上下文是什么？ flask 中的上下文是指：请求上下文和应用上下文。 请求上下文： 请求上下文是指：在处理请求之前，flask 会创建一个请求上下文对象，它封装了客户端发送的 HTTP 请求信息，比如请求头、请求体等。 请求上下文对象是一个全局对象，它的生命周期是：在请求开始时创建，在请求结束时销毁。 应用上下文： 应用上下文是指：在处理请求之前，flask 会创建一个应用上下文对象，它封装了 flask 应用程序的信息，比如配置信息、数据库连接等。 应用上下文对象是一个全局对象，它的生命周期是：在应用程序启动时创建，在应用程序结束时销毁。 flask 框架中的蓝图是什么？ 蓝图是 flask 框架中的一个组件，它可以将一个应用程序分割成多个模块，每个模块都可以单独编写，然后注册到应用程序中。 蓝图的作用是： 可以将一个复杂的应用程序划分为多个模块，每个模块可以单独管理。 方便代码的管理和维护。 可以将一个应用程序分发给多个开发人员协同开发。 具体代码实现： # 导入蓝图对象 from flask import Blueprint # 创建蓝图对象 app = Blueprint('app', __name__) # 注册蓝图对象到应用程序中 app.register_blueprint(app) django django 的 MTV 模式以及 MVC 模式是啥，有啥区别？ django 的 MTV 模式是指：Model、Template、View。 MVC 模式是指：Model、View、Controller。 django 的 MTV 模式和 MVC 模式的区别是：django 的 MTV 模式中的 View 和 MVC 模式中的 Controller 的作用是一样的，都是用来处理用户的请求，然后返回响应的。 django 的 MTV 模式和 MVC 模式的相同点是：都是一种软件架构模式。 django 的路由注册是怎么实现的？ django 的路由注册是通过 urls.py 文件实现的。 urls.py 文件中的 urlpatterns 列表中的每个元素都是一个路由对象，每个路由对象都包含了三个属性：path、view、kwargs。 path 属性是一个字符串，表示路由的路径。view 属性是一个可调用对象，表示路由的处理函数。kwargs 属性是一个字典，表示路由的参数。 中间件是什么？它的作用效果是？ 中间件是 django 框架中的一个组件，它是一个可插拔的应用程序，它可以对请求和响应进行拦截和处理。 中间件的作用比如：对请求进行认证、对请求添加日志、对响应进行统一错误处理或统一返回格式等。 orm 是什么？ orm 是 Object Relational Mapping 的缩写，即对象关系映射。 它的作用是：将对象和关系数据库的表之间的映射，将面向对象语言程序中的对象自动持久化到关系数据库中。 orm 框架的优点是：提高了开发效率，同时也提高了程序的可移植性。 django 中的 orm 框架是 django.db 模块。 django 那些用到了单例模式 django 的 settings 模块就是一个单例模式，它的实现代码如下： django 中权限管理是如何实现的？ django 中的权限管理是通过 django.contrib.auth 模块实现的。 实现的原理是： 权限的认证是基于 django.contrib.auth.backends.ModelBackend 模块实现的。 通过继承 ModelBackend 重载 authenticate 方法实现自定义认证。 使用方法是： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/python_基础.html":{"url":"经验分享/面试/面试题/python_基础.html","title":"python_基础.md","keywords":"","body":"Python 语言Python 语言基础谈谈你认为的 Python 语言的优缺点Python 是静态还是动态类型？是强类型还是弱类型？什么是鸭子类型？什么是 socket?什么是 monkey patch？什么是自省（introspection）？你知道 Python 之禅是什么吗？说几条 Python 之禅的内容？Python 2 and Python3Python 2 和 Python 3 的区别Python 3 的改进兼容 2/3 版本的工具Python 3 基础什么是 GIL 吗？常见的线程安全问题有哪些？Python 中如何解决线程安全问题？为什么 Python 有 GIL 也会有线程安全问题？Python 中的多线程和多进程有什么区别？协程是什么，python 是如何实现的？什么是 Python 中的魔法方法？什么是迭代器协议、迭代器、可迭代对象、生成器？什么是 Python 中的迭代器协议？垃圾回收机制字典的合并有哪几种方法？deepcopy 和 copy 的区别？Python 类Python 类的继承顺序什么是构造函数？Python 函数什么是 Python 中的可变对象和不可变对象Python 中 args 和 *kwargs 的作用装饰器主要实现逻辑Python 异常Python 中的异常处理机制为什么自定义异常通常是继承 Exception 而不是继承 BaseExceptionTreeviewCopyright © aleen42 all right reserved, powered by aleen42 Python 语言基础 谈谈你认为的 Python 语言的优缺点 Python 是静态还是动态类型？是强类型还是弱类型？ 什么是鸭子类型？ 什么是 socket? 什么是 monkey patch？ 什么是自省（introspection）？ 你知道 Python 之禅是什么吗？ 说几条 Python 之禅的内容？ Python 2 and Python3 Python 2 和 Python 3 的区别 Python 3 的改进 兼容 2/3 版本的工具 Python 3 基础 什么是 GIL 吗？ 常见的线程安全问题有哪些？ Python 中如何解决线程安全问题？ 为什么 Python 有 GIL 也会有线程安全问题？ Python 中的多线程和多进程有什么区别？ 协程是什么，python 是如何实现的？ 什么是 Python 中的魔法方法？ 什么是迭代器协议、迭代器、可迭代对象、生成器？ 什么是 Python 中的迭代器协议？ 垃圾回收机制 字典的合并有哪几种方法？ deepcopy 和 copy 的区别？ Python 类 Python 类的继承顺序 什么是构造函数？ Python 函数 什么是 Python 中的可变对象和不可变对象 Python 中 *args 和 **kwargs 的作用 装饰器主要实现逻辑 Python 异常 Python 中的异常处理机制 为什么自定义异常通常是继承 Exception 而不是继承 BaseException Python 语言Python 语言基础 谈谈你认为的 Python 语言的优缺点 胶水语言，轮子多，应用广泛。 语言灵活，生产力高 缺点是性能问题、代码维护问题、2/3 版本兼容问题。 Python 是静态还是动态类型？是强类型还是弱类型？ 动态还是静态指的是变量的类型是在编译时确定还是在运行时确定。 Python 是动态类型语言，变量的类型是在运行时确定的。 强类型还是弱类型指的是变量的类型转换是否受限制，会不会发生隐式类型转换。 Python 是强类型语言，不同类型的变量不能直接进行运算，需要进行类型转换。 什么是鸭子类型？ 有一句话是：\"如果你看到一只鸟，走起来像鸭子，游泳起来像鸭子，叫起来也像鸭子，那么这只鸟就可以被称为鸭子。\" 鸭子类型是一种动态类型的风格，是多态的一种形式。 关注的是对象的行为，而不是对象的类型。 常见的应用场景就是：Python 中的迭代器协议，只要对象实现了 __iter__ 和 __next__ 方法，那么这个对象就是可迭代的。 什么是 socket? socket 是应用层与 TCP/IP 协议族通信的中间软件抽象层，它是一组接口。 在设计模式中，socket 其实就是一个门面模式，它把复杂的 TCP/IP 协议族隐藏在 socket 接口后面，对用户来说只需要调用 socket 接口就可以了。 Python 中提供了两个模块来支持 socket 实现，一个是 socket，一个是 asyncio 中的 transports 和 protocols。 什么是 monkey patch？ monkey patch 是指在运行时动态修改一个类或模块，即运行时替换。 import time print(time.time()) def new_time(): return 1234567890.0 # monkey patch time.time = new_time print(time.time()) 比如 gevent 就是通过 monkey patch 来实现协程的。 import socket print(socket.socket) from gevent import monkey monkey.patch_socket() print(socket.socket) 什么是自省（introspection）？ 自省就是运行时判断一个对象类型的能力。 Python 中的自省机制包括：id()、type()、isinstance()、dir()、hasattr()、callable()、issubclass()。 Inspect 模块也提供了很多自省的函数。 自省的应用场景：动态导入模块、动态实例化类、动态获取类的成员。 你知道 Python 之禅是什么吗？ Python 之禅是 Python 的设计哲学，是 Python 语言的核心。 通过 import this 可以查看 Python 之禅。 因为动态语言编写大型项目的可维护性不高，所以 Python 之禅强调的是可读性以及可维护性。 说几条 Python 之禅的内容？ 美胜于丑 明了胜于晦涩 简洁胜于复杂 复杂胜于凌乱 Python 2 and Python3 Python 2 和 Python 3 的区别 Python 2 默认编码是 ASCII，Python 3 默认编码是 UTF-8 Python 2 的 print 是一个语句，Python 3 的 print 是一个函数 Python 2 的整数除法是向下取整返回一个整型，Python 3 的整数除法是向零取整返回一个浮点型 Python 3 的改进 提供了很多方便的语法糖，比如解包、类型注解 内置函数之前返回列表的现在全部返回为迭代器，节省了内存 提供了异步编程的支持 兼容 2/3 版本的工具 six 模块，提供了语法兼容工具 2to3 工具，可以将 Python 2 代码转换为 Python 3 代码 future 模块，可以在 Python 2 中使用 Python 3 的特性 Python 3 基础 什么是 GIL 吗？ GIL 是 Python 解释器的全局解释器锁，它保证了同一时刻只有一个线程在执行 Python 字节码。 由于 GIL 的存在，Python 解释器在执行多线程代码的时候，同一时刻只能有一个线程在执行，所以 Python 的多线程是伪多线程。 前段时间也有说法指出 python 官方已经考虑去除 GIL. GIL 不是 python 的特点，而是 Cpyhton 的特点 GIL 保证的是解释器级别的数据安全 Cpython 中内存管理不是线程安全的，如果不加互斥锁，在给变量赋值的时候，有可能垃圾回收机制也在工作，导致错误 同一进程下多线程无法同时运行，无法利用多核优势，但可以快速切换，伪多线程 解释型语言的通病 针对不同的数据还是要加不同的锁处理(自己加锁是为了避免由于阻塞而自动切换线程) 注释：GIL 本质就是给 python 解释器加了锁，使得线程间只能串行，保证了数据内存的安全 常见的线程安全问题有哪些？ 竞态条件：竞态条件是指多个线程试图同时访问和修改共享数据，但没有适当的同步机制来确保数据的一致性。竞态条件可能导致不可预测的结果，如数据损坏或逻辑错误。 数据竞争：数据竞争是指多个线程尝试同时读取和写入相同的数据，而没有适当的同步。数据竞争可能导致数据不一致、内存泄漏或崩溃。 死锁：死锁是指多个线程在等待对方释放资源或锁的情况下陷入了无限循环，导致应用程序停滞不前。 饥饿：线程饥饿是指某些线程无法获取它们所需的资源或锁，因为其他线程一直占用它们。这可能导致某些线程无法执行，或者执行速度明显变慢。 内存管理问题：多线程应用程序中的内存管理可能涉及到多个线程分配和释放内存，这可能导致内存泄漏或不一致的内存访问。 Python 中如何解决线程安全问题？ Python 提供了线程同步机制，如互斥锁（mutex）、信号量、条件变量等，以确保多个线程可以安全地访问共享资源。 为什么 Python 有 GIL 也会有线程安全问题？ GIL 的颗粒度：GIL 锁定的是 Python 解释器的执行，而不是 Python 应用程序的线程级别。这意味着在某个时刻只有一个线程可以执行 Python 字节码，但多个线程可以交替执行。这限制了多线程应用程序的并发性，但并不提供足够的保护来避免所有线程安全问题。 共享数据和资源：即使有GIL，多线程应用程序仍然可以共享数据和资源。多个线程可能仍然会竞争访问共享数据，而GIL并不能防止这种竞争。 不同线程的执行时机：GIL会导致线程在某些情况下出现长时间的等待，而其他线程在执行。这可能会导致竞态条件和数据竞争问题，因为一个线程可能在等待共享资源时被挂起，而其他线程继续执行。 Python库和扩展模块：Python中的某些库和扩展模块可能会释放GIL，允许它们在某些操作中并行执行。这可能导致多线程应用程序在没有足够同步机制的情况下访问共享数据。 Python 中的多线程和多进程有什么区别？ 多线程是指在同一进程中，有多个线程同时执行，而多进程是指有多个进程同时执行。 多线程之间共享进程的内存空间，而多进程之间不共享内存空间。 多线程之间的切换不会引起系统的上下文切换，而多进程之间的切换会引起系统的上下文切换。 系统的上下文切换指的是：CPU 从一个进程切换到另一个进程时，需要保存当前进程的状态，然后加载新进程的状态，这个过程就是系统的上下文切换。 多线程之间的切换不会引起进程的内存空间的切换，而多进程之间的切换会引起进程的内存空间的切换。 多线程之间的切换速度比多进程之间的快。 多线程之间的通信方式有：共享变量、队列、管道、共享内存、信号量、套接字等。多进程之间的通信方式有：队列、管道、共享内存、套接字等。 协程是什么，python 是如何实现的？ 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。 协程的本质是一个线程，所以协程之间的切换不会引起系统的上下文切换，协程之间的切换只会引起用户态的上下文切换。 协程的实现方式有：yield、generator、asyncio 等。 def func(): print('start') yield print('end') g = func() next(g) # start next(g) # end import asyncio async def func(): print('start') await asyncio.sleep(1) print('end') asyncio.run(func()) # start 什么是 Python 中的魔法方法？ 魔法方法是指 Python 中的一些特殊方法，这些方法的特点是：方法名前后都有两个下划线。 魔法方法的作用是：实现类似于运算符的功能，比如 __add__ 方法实现了 + 运算符的功能。 魔法方法的应用场景有：运算符重载、属性访问控制、对象初始化、对象销毁、迭代器协议等。 什么是迭代器协议、迭代器、可迭代对象、生成器？ 迭代器协议：规定了迭代器必须实现 __iter__() 和 __next__() 方法 迭代器：实现了迭代器协议的类就是迭代器 可迭代对象：所有迭代器生成的对象都是可迭代对象，比如列表 生成器：在函数中使用 yield 来批量返回一系列数据。也同样通过 iter 和 next 方法获取元素。 什么是 Python 中的迭代器协议？ 迭代器协议是指对象需要提供一个 __iter__ 方法，该方法返回一个迭代器对象，迭代器对象需要提供一个 __next__ 方法，该方法返回迭代器中的下一个元素。 迭代器协议的应用场景有：for 循环、列表推导式、生成器表达式、in、map、filter、sum、min、max、sorted、reversed、zip、enumerate 等。 迭代器协议的实现方式有：类实现、生成器函数实现、生成器表达式实现。 垃圾回收机制 垃圾回收机制应用在内存管理中，用于回收不再使用的内存空间。一句话总结就是：引用计数器 为主，标记清除 和 分代回收 为辅。 引用计数器：Python 3 使用了引用计数机制来跟踪内存中的对象，即每个对象创建时都有一个引用计数 refcnt，当对象被引用时，它的引用计数加 1，当对象不被引用时，它的引用计数减 1，当对象的引用计数为 0 时，它就会被垃圾回收机制回收。 标记清除：主要是为了解决对象之间相互引用，导致引用计数不为 0 的情况。主要的实现方式是通过遍历以 root 为节点的有向图，如果一个对象入度为 0，那么它就是循环引用的一部分，就应该将其回收。 分代回收：主要是为了解决回收机制的性能问题，控制回收的频次，是一种以时间换空间的操作方式。指的是将对象分为三代，新创建的对象为第 0 代，当第 0 代对象经过一次垃圾回收后，如果没有被回收，那么它就会被提升为第 1 代，以此类推，当第 2 代对象经过一次垃圾回收后，如果没有被回收，那么它就会被提升为第 3 代，第 3 代对象不会再被提升，当第 3 代对象经过一次垃圾回收后，如果没有被回收，那么它就会被放入到一个不可回收的列表中。 分代回收中有一个阈值机制，当垃圾回收器检测到第 0 代对象的数量达到了阈值，那么就会执行一次垃圾回收，当垃圾回收器检测到第 1 代对象的数量达到了阈值，那么就会执行一次垃圾回收，以此类推。 import gc print(gc.get_threshold()) # 默认值 (700, 10, 10) gc.set_threshold(700, 10, 10) # 设置阈值 字典的合并有哪几种方法？ 使用 update() 方法 d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4} d1.update(d2) print(d1) # {'a': 1, 'b': 2, 'c': 3, 'd': 4} 使用 ** 运算符 d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4} d3 = {**d1, **d2} print(d3) # {'a': 1, 'b': 2, 'c': 3, 'd': 4} 使用 ChainMap 类 from collections import ChainMap d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4} d3 = ChainMap(d1, d2) print(d3) # ChainMap({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) 使用 dict() 函数 d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4} d3 = dict(d1, **d2) print(d3) # {'a': 1, 'b': 2, 'c': 3, 'd': 4} 使用 3.9 版本中提供 | 方法 d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4} d3 = d1 | d2 print(d3) # {'a': 1, 'b': 2, 'c': 3, 'd': 4} 注：以上只有 update 会修改原字典，其他方法都不会修改原字典。可以使用 copy 方法来复制字典。 deepcopy 和 copy 的区别？ copy 浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象。 deepcopy 深拷贝，拷贝对象及其子对象。 相当于 copy 拷贝的是对象的引用，而 deepcopy 拷贝的是对象的值。 Python 类 Python 类的继承顺序 Python 使用 C3 线性化算法来确定类的继承顺序。这是一种保证类在多重继承的情况下，继承关系中的方法解析顺序一致的算法 C3 线性化算法首先遵循深度优先的原则，即首先考虑父类，然后再考虑父类的父类，以此类推。 搜索的顺序就是 方法解析顺序（Method Resolution Order, MRO） 什么是构造函数？ 构造方法（Constructor）是一种特殊的方法，它用于在创建类的实例对象时进行初始化操作。构造方法通常在对象创建时自动调用，以确保对象的属性和状态被正确设置。 在 Python 中，构造函数的名称是 init()，它是特殊的方法，用于初始化对象的属性。 Python 函数 什么是 Python 中的可变对象和不可变对象 可变对象：列表、字典、集合、自定义类 不可变对象：数字、字符串、元组、布尔值、None、frozenset、bytes Python 中一切皆对象，变量是对象的引用。可变对象作为参数传递时，传递的是对象的引用，所以在函数内部修改了可变对象，会影响到函数外部的对象。不可变对象作为参数传递时，传递的是对象的值，所以在函数内部修改了不可变对象，不会影响到函数外部的对象，并且生成了一个新的对象。 Python 中 args 和 *kwargs 的作用 *args：将位置参数打包成 tuple 给函数体调用，可以通过列表或元组解包的方式传递位置参数给函数 **kwargs：将关键字参数打包成 dict 给函数体调用，可以通过字典解包的方式传递关键字参数给函数 装饰器主要实现逻辑 装饰器的本质是一个函数，它接收一个函数作为参数，然后返回一个函数。 装饰器的作用是在不改变原函数的情况下，为原函数添加新的功能。 实现代码如下： def decorator(func): def wrapper(*args, **kwargs): # do something return func(*args, **kwargs) return wrapper @decorator def func(): pass Python 异常 Python 中的异常处理机制 Python 中的异常处理机制是 try-except-else-finally 语句。 为什么自定义异常通常是继承 Exception 而不是继承 BaseException BaseException 是所有内置异常的基类，而 Exception 是所有内置非系统退出异常的基类。 自定义异常通常是继承 Exception，因为 BaseException 包含了系统退出异常，如果自定义异常继承 BaseException，那么这个自定义异常就会被系统退出异常捕获，从而导致程序退出。 BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- ... console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/python_测试.html":{"url":"经验分享/面试/面试题/python_测试.html","title":"python_测试.md","keywords":"","body":"Python 测试测试框架你知道哪些 Python 的测试框架？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 测试框架 你知道哪些 Python 的测试框架？ Python 测试测试框架 你知道哪些 Python 的测试框架？ unittest：Python 自带的单元测试框架 使用方法： 继承 unittest.TestCase 类 以 test_ 开头的方法 assertEqual、assertNotEqual、assertTrue、assertFalse、assertIs、assertIsNot、assertIsNone 等 ```python import unittest class TestStringMethods(unittest.TestCase): def test_upper(self): self.assertEqual('foo'.upper(), 'FOO') def test_isupper(self): self.assertTrue('FOO'.isupper()) self.assertFalse('Foo'.isupper()) def test_split(self): s = 'hello world' self.assertEqual(s.split(), ['hello', 'world']) # check that s.split fails when the separator is not a string with self.assertRaises(TypeError): s.split(2) ``` + `setUp` 和 `tearDown` 方法 ```python import unittest class Test(unittest.TestCase): def setUp(self): print('start') def tearDown(self): print('end') def test_1(self): print('test_1') def test_2(self): print('test_2') if __name__ == '__main__': unittest.main() ``` + `setUpClass` 和 `tearDownClass` 方法 ```python import unittest class Test(unittest.TestCase): @classmethod def setUpClass(cls): print('start') @classmethod def tearDownClass(cls): print('end') def test_1(self): print('test_1') def test_2(self): print('test_2') if __name__ == '__main__': unittest.main() ``` + `setUpModule` 和 `tearDownModule` 方法 ```python import unittest def setUpModule(): print('start') def tearDownModule(): print('end') class Test(unittest.TestCase): def test_1(self): print('test_1') def test_2(self): print('test_2') if __name__ == '__main__': unittest.main() ``` + `skip` 和 `skipIf` 方法 ```python import unittest class Test(unittest.TestCase): @unittest.skip('skip') def test_1(self): print('test_1') @unittest.skipIf(1 > 0, 'skip') def test_2(self): print('test_2') if __name__ == '__main__': unittest.main() ``` + 注意事项： + 测试用例的命名必须以 `test` 开头，否则不会被执行 + 测试用例的执行顺序是按照方法名的字母顺序执行的 + 测试用例中的 `setUp` 和 `tearDown` 方法会在每个测试用例执行前和执行后执行一次 pytest：第三方单元测试框架 使用方法： 以 test_ 开头的方法 assert、assert not、assert a in b、assert a == b 等 def test_upper(): assert 'foo'.upper() == 'FOO' def test_isupper(): assert 'FOO'.isupper() assert not 'Foo'.isupper() def test_split(): s = 'hello world' assert s.split() == ['hello', 'world'] # check that s.split fails when the separator is not a string with pytest.raises(TypeError): s.split(2) 注意事项： 在不指定文件名的情况下运行 pytest 将运行当前目录和子目录中格式为 test_.py 或 _test.py 的所有文件。 Pytest 自动将这些文件识别为测试文件。 我们可以通过明确提及它们来使 pytest 运行其他文件名。 Pytest 要求测试函数名称以 test 开头。 pytest 不将格式不是 test* 的函数名称视为测试函数。 nose：第三方单元测试框架 doctest：Python 自带的文档测试框架 tox：第三方自动化测试框架 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/python_爬虫.html":{"url":"经验分享/面试/面试题/python_爬虫.html","title":"python_爬虫.md","keywords":"","body":"Python 爬虫基础Python 中常见的爬虫库有哪些？什么是 robots.txt 文件？Web 自动化如何处理网页中的动态内容？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 基础 Python 中常见的爬虫库有哪些？ 什么是 robots.txt 文件？ Web 自动化 如何处理网页中的动态内容？ Python 爬虫基础 Python 中常见的爬虫库有哪些？ Requests Beautiful Soup Scrapy Selenium 什么是 robots.txt 文件？ robots.txt 文件是一个网站的根目录下的文本文件，用于指示搜索引擎爬虫哪些页面可以爬取，哪些不可以。它是一种遵循协议的方式，以确保爬虫不会访问不希望被爬取的页面。 Web 自动化 如何处理网页中的动态内容？ 处理动态内容的方法包括使用 Selenium 等工具，模拟浏览器行为，或者分析网页中的 AJAX 请求，然后直接获取数据。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/分布式技术.html":{"url":"经验分享/面试/面试题/分布式技术.html","title":"分布式技术.md","keywords":"","body":"分布式分布式事务理论什么是 CAP 理论？什么是 BASE 理论？选择 CAP 还是 BASE？分布式事务解决方案常见的分布式事务解决方案有哪些？两阶段提交（2PC）的原理是什么？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 分布式事务理论 什么是 CAP 理论？ 什么是 BASE 理论？ 选择 CAP 还是 BASE？ 分布式事务解决方案 常见的分布式事务解决方案有哪些？ 两阶段提交（2PC）的原理是什么？ 分布式分布式事务理论 什么是 CAP 理论？ CAP 理论是分布式系统的理论基石。包括 Consistency（一致性）、Availability（可用性）、Partition tolerance（分区容错性）三个要素。 Consistency（一致性）：所有节点在同一时间具有相同的数据。 Availability（可用性）：保证每个请求不管成功或者失败都有响应。 Partition tolerance（分区容错性）：系统中任意信息的丢失或失败不会影响系统的继续运作。仍然能够对外提供满足一致性和可用性的服务。对于用户而言没有什么体验上的变化。 CAP 理论指的是在分布式存储系统中，必须满足分区容错性，一致性和可用性二者不可同时满足，必须选择一个。 如果只满足 CA，不满足 P，就是传统的单机数据库系统，即关系型数据库（MySQL、Oracle）。 如果只满足 CP，不满足 A，就是一些分布式存储系统，比如 HBase、NoSQL、Redis。 如果只满足 AP，不满足 C，比如 Coach DB、Cassandra、DynamoDB。 一般来说，大型互联网公司都会选择 AP，因为大型互联网公司更关注的是可用性，而不是一致性。 什么是 BASE 理论？ BASE 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于 CAP 定理逐步演化而来的，其核心思想是：即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。 BASE 是 Basically Available（基本可用）、Soft state（软状态）和 Eventually consistent（最终一致性）三个短语的缩写。 Basically Available（基本可用）：基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性，但是仍然能够响应用户的请求。 Soft state（软状态）：软状态指允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。 Eventually consistent（最终一致性）：最终一致性强调的是数据在经过一段时间的同步后，最终能够达到一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。 BASE 理论的核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。 选择 CAP 还是 BASE？ CAP 不可能三者兼顾，最多只能同时满足两点。因此在分布式系统设计的时候，大部分需求都可以参考 BASE 进行设计。 如果追求强一致性，那么只能牺牲可用性，即 CA 系统。 如果追求高可用性，那么只能牺牲一致性，即 AP 系统。 分布式事务解决方案 常见的分布式事务解决方案有哪些？ 两阶段提交（2PC, Two-phase Commit）：两阶段提交是一种典型的同步阻塞事务模型，该模型中，协调者（Coordinator）负责协调参与者（Participant）完成事务操作，协调者需要询问所有参与者是否可以提交事务，参与者根据本地情况决定是否可以提交，然后反馈给协调者，协调者根据反馈情况决定是否要提交事务。 TCC 补偿模式（Try/Confirm/Cancel）：TCC 是一种补偿模式，它将业务操作分为三个阶段：Try 阶段（尝试）、Confirm 阶段（确认）、Cancel 阶段（取消）。TCC 的基本思想是：针对每个业务操作，都要注册一个与其对应的确认（confirm）和取消（cancel）的操作。当业务操作需要执行时，对应的 confirm 操作和 cancel 操作会被一起执行，以此来保证数据的最终一致性。 基于本地消息表实现最终一致性：将分布式事务拆分为本地事务和消息，本地事务和消息的数据要么同时成功，要么同时失败。本地事务成功后，向消息表中插入一条消息记录，然后再由消息中间件异步发送消息，消息消费者消费消息后执行对应的业务操作。如果本地事务失败，那么就不会向消息表中插入消息记录，消息中间件也不会发送消息，这样就保证了本地事务和消息的最终一致性。 最大努力通知：最大努力通知是指在分布式事务中，事务发起方在执行完本地事务后，不等待消息消费者的响应，而是直接返回成功。然后由消息中间件异步通知消息消费者执行对应的业务操作。如果消息消费者执行业务操作失败，那么就会不断重试，直到业务操作成功为止。 基于可靠消息最终一致性：可靠消息最终一致性是指在分布式事务中，事务发起方在执行完本地事务后，不等待消息消费者的响应，而是直接返回成功。然后由消息中间件异步发送消息，消息消费者消费消息后执行对应的业务操作。如果消息消费者执行业务操作失败，那么就会不断重试，直到业务操作成功为止。 两阶段提交（2PC）的原理是什么？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/加密技术.html":{"url":"经验分享/面试/面试题/加密技术.html","title":"加密技术.md","keywords":"","body":"加密哈希算法什么时候会使用TreeviewCopyright © aleen42 all right reserved, powered by aleen42 哈希算法 什么时候会使用 加密哈希算法 什么时候会使用 为了防止数据被篡改 1。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/备份技术.html":{"url":"经验分享/面试/面试题/备份技术.html","title":"备份技术.md","keywords":"","body":"备份技术NAS你知道 NAS 是什么吗？为什么要用 NAS？NAS 有哪些类型？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 NAS 你知道 NAS 是什么吗？ 为什么要用 NAS？ NAS 有哪些类型？ 备份技术NAS 你知道 NAS 是什么吗？ NAS 是网络附加存储（Network Attached Storage）的缩写，是一种专门为数据存储而设计的文件服务器，可以提供文件服务，数据备份，打印服务等。 为什么要用 NAS？ 传统的数据存储方式是将数据存储在本地的计算机上，这样的方式有很多弊端，比如数据安全性低，数据容易丢失，数据无法共享等等。而 NAS 可以解决这些问题，它可以将数据存储在专门的存储设备上，这样的方式可以提高数据的安全性，而且可以实现数据的共享。 NAS 有很多优点，比如数据安全性高，数据共享方便，数据备份方便，数据容量大，数据可靠性高，数据可扩展性强等等。 NAS 有哪些类型？ NAS 有很多类型，比如家用 NAS，企业级 NAS，SOHO NAS，专业级 NAS 等等。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/微服务.html":{"url":"经验分享/面试/面试题/微服务.html","title":"微服务.md","keywords":"","body":"微服务什么是微服务？微服务的优缺点gRPCgRPC 是什么？protobuf 和 json 区别？gRPC 四种通信模式是哪些？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 什么是微服务？ 微服务的优缺点 gRPC gRPC 是什么？ protobuf 和 json 区别？ gRPC 四种通信模式是哪些？ 微服务什么是微服务？ 微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好的完成该任务。每个微服务都有自己的数据库，业务独立，可以有自己的开发团队来维护。 微服务的优缺点 gRPC gRPC 是什么？ gRPC 是谷歌开源的一款 RPC 框架，运行客户端和服务端通过定义消息和服务来进行网络通信。 gRPC 使用默认的 protobuf 作为默认的接口定义语言。 protobuf 和 json 区别？ 他们都是数据传输格式，用于定义数据类型。 protobuf 是二进制的，比起 json 文本的来说数据量更小。 protobuf 提供了一组丰富的数据类型，包括整数、浮点数、字符串、枚举等，以及自定义数据结构，使其更适用于数据建模。 protobuf 通常比 JSON 更高效，因为它的二进制编码更紧凑，序列化和反序列化速度更快。 gRPC 四种通信模式是哪些？ 一元 RPC（Unary RPC）：客户端发送一个请求，服务器返回一个响应。这是最简单的模式，类似于传统的请求-响应模式。 服务器流 RPC（Server Streaming RPC）：客户端发送一个请求，服务器返回一个数据流（多个响应）。客户端可以逐个读取服务器的响应，直到服务器完成。 客户端流 RPC（Client Streaming RPC）：客户端发送一个数据流，服务器返回一个响应。客户端可以将多个请求依次写入数据流，然后等待服务器的响应。 双向流 RPC（Bidirectional Streaming RPC）：客户端和服务器都可以创建数据流，双方可以同时发送和接收消息。这实现了全双工通信。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/数据库.html":{"url":"经验分享/面试/面试题/数据库.html","title":"数据库.md","keywords":"","body":"数据库mysql 基础Mysql 数据库配置管理是什么？什么是事务（Transaction）？事务的四个基本特性是什么？一致性和原子性的区别是什么？事务不进行并发控制，可能会产生的异常情况有哪些？为了解决并发控制异常，数据库提供了四种隔离级别，分别是什么？如何解决高并发场景下的插入重复常用的锁有哪些什么是乐观锁和悲观锁？死锁产生的条件以及如何解决？Mysql 常用的数据类型有哪些？Mysql 常用的两种引擎是什么？什么是左连接和右连接？mysql 索引什么是索引？B+ 树查找时间复杂度索引应用和优化慢 sql 优化redisredis 常用数据类型redis hash 数据类型有什么作用？redis 高可用方案？redis 持久化方案？redis 如何实现分布式锁？缓存优化是什么？Mysql 如何添加分区？添加分区有什么作用？Mysql 性能优化TreeviewCopyright © aleen42 all right reserved, powered by aleen42 mysql 基础 Mysql 数据库配置管理是什么？ 什么是事务（Transaction）？ 事务的四个基本特性是什么？ 一致性和原子性的区别是什么？ 事务不进行并发控制，可能会产生的异常情况有哪些？ 为了解决并发控制异常，数据库提供了四种隔离级别，分别是什么？ 如何解决高并发场景下的插入重复 常用的锁有哪些 什么是乐观锁和悲观锁？ 死锁产生的条件以及如何解决？ Mysql 常用的数据类型有哪些？ Mysql 常用的两种引擎是什么？ 什么是左连接和右连接？ mysql 索引 什么是索引？ B+ 树查找时间复杂度 索引应用和优化 慢 sql 优化 redis redis 常用数据类型 redis hash 数据类型有什么作用？ redis 高可用方案？ redis 持久化方案？ redis 如何实现分布式锁？ 缓存优化是什么？ Mysql 如何添加分区？添加分区有什么作用？ Mysql 性能优化 数据库mysql 基础 Mysql 数据库配置管理是什么？ Mysql 数据库配置管理是指 Mysql 数据库的配置文件 my.cnf my.cnf 文件中包含了 Mysql 数据库的配置信息，如：数据库的端口号、数据库的字符集、数据库的存储路径等。 如何管理：可以通过修改 my.cnf 文件来修改 Mysql 数据库的配置信息。 什么是事务（Transaction）？ 事务是数据库并发控制的基本单位，是用户定义的一个 sql 操作集合，这些操作要么都执行，要么都不执行。 比如转账操作就是典型的事务，A 账户扣钱，B 账户加钱，要么都成功，要么都失败。 事务的四个基本特性是什么？ 事务的四个基本特性是：ACID，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。 原子性（Atomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。 一致性（Consistency）：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。简单来说就是：事务前后数据的完整性必须保持一致。（一般通过锁机制来实现） 隔离性（Isolation）：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。 持久性（Durability）：持久性也称永久性（Permanence），指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。 一致性和原子性的区别是什么？ 原子性关注的是状态，要么全部成功，要么全部失败。 一致性关注的是数据，事务前后数据的完整性必须保持一致。并且中间状态对外部不可见。 事务不进行并发控制，可能会产生的异常情况有哪些？ 会产生四种异常情况，即脏读（Dirty Read）、不可重复读（Non-Repeatable Read）、幻读（Phantom Read）和丢失修改（lost update）。 脏读：一个事务读到了另一个事务未提交的数据。 幻读：一个事务第二次查会出现第一次没有的结果。 非重复读：一个事务重复读两次得到不同的结果。 丢失修改：并发写入造成其中一些修改丢失。 为了解决并发控制异常，数据库提供了四种隔离级别，分别是什么？ 读未提交（Read Uncommitted）：允许脏读，一个事务可以读取另一个未提交事务的数据。 读已提交（Read Committed）：允许不可重复读，一个事务只能读取另一个已提交事务的数据。 可重复读（Repeatable Read）：允许幻读，一个事务在多次读取同一数据时，读取的数据是一致的。（Mysql InnoDB 默认实现可重复读级别） 串行化（Serializable）：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，但是这种方式效率低下，比较耗数据库性能，一般不使用。 如何解决高并发场景下的插入重复 在未使用分库分表的情况下，可以使用唯一索引来解决，但是这样会导致大量的重试，影响性能。 使用异步队列来处理，比如分布式消息队列 kafka，将数据写入到 kafka 中，然后消费 kafka 中的数据写入到数据库中，这样就可以保证数据不会重复。 使用 redis 等实现分布式锁，保证同一时间只有一个线程可以写入数据。 常用的锁有哪些 共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。 排他锁（X）：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。 意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的 IS 锁。 意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的 IX 锁。 记录锁（Record Lock）：在索引记录上的锁，锁定一条记录。 间隙锁（Gap Lock）：锁住索引之间的一个间隙，不包含索引本身。 什么是乐观锁和悲观锁？ 悲观锁是先获取锁，再进行操作。一锁二查三更新。 乐观锁是先进行操作，再获取锁。更新的时候发现数据已经变了就回滚。 悲观锁适用于多写的场景，乐观锁适用于多读的场景。 多写的场景指的是：写操作比较多，读操作比较少，这种情况下使用悲观锁可以保证数据的一致性。 多读的场景指的是：读操作比较多，写操作比较少，这种情况下使用乐观锁可以提高性能。 死锁产生的条件以及如何解决？ 死锁产生的条件是：互斥、请求与保持、不可剥夺、循环等待。 互斥：一个资源每次只能被一个进程使用。 请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放。 不可剥夺：进程已获得的资源，在末使用完之前，不能强行剥夺。 循环等待：若干进程之间形成一种头尾相接的循环等待资源关系。 解决死锁的方法： 预防死锁：破坏死锁产生的四个条件之一。 避免死锁：银行家算法。 检测死锁：检测到死锁后，撤销一些进程，从而解除死锁。 解除死锁：撤销进程，剥夺资源。 Mysql 常用的数据类型有哪些？ 数值类型：整型（int）、浮点型（float）、定点数（decimal）、双精度浮点型（double）、位类型（bit）。 字符串类型：定长字符串（char）、变长字符串（varchar）、二进制字符串（binary）、变长二进制字符串（varbinary）、枚举类型（enum）、集合类型（set）。 日期类型：日期（date）、时间（time）、日期时间（datetime）、时间戳（timestamp）、年（year）。 其他类型：文本（text）、小文本（tinytext）、大文本（longtext）、二进制（blob）、大二进制（longblob）、JSON（json）。 Mysql 常用的两种引擎是什么？ Mysql 常用的两种引擎是 InnoDB 和 MyISAM。 MyISAM 引擎不支持事务，而 InnoDB 支持事务。 MyISAM 引擎不支持外键，而 InnoDB 支持外键。 MyISAM 引擎不支持行级锁，而 InnoDB 支持行级锁。 行级锁的意思是：当一个事务访问一行数据时，其他事务是不能访问该行数据的。 什么是左连接和右连接？ 左连接：左连接是以左表为基础的，左表中的全部数据都会显示出来，而右表中的数据只会显示符合条件的数据。 右连接：右连接是以右表为基础的，右表中的全部数据都会显示出来，而左表中的数据只会显示符合条件的数据。 左连接查询语句：select * from 表1 left join 表2 on 表1.id = 表2.id。 右连接查询语句：select * from 表1 right join 表2 on 表1.id = 表2.id。 mysql 索引 什么是索引？ 索引是一种特殊的文件（InnoDB 数据表上的索引是表空间的一个组成部分），它们包含着对数据表里所有记录的引用指针。 索引是帮助 Mysql 高效获取数据的数据结构。 索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同的存储引擎具有不同的索引类型和实现，如：Mysql 的 MyISAM 和 InnoDB 存储引擎使用的索引就不一样。 Innodb 使用的是聚集索引，MyISAM 使用的是非聚集索引。聚集索引指的是按照每张表的主键构造一颗 B+ 树，同时叶子节点中存放的就是整张表的行记录数据，而非聚集索引指的是叶子节点不包含行记录的全部数据，而是包含相应的主键，这个主键实际上是指向数据所在的物理位置。 索引可以包含一个或多个列，多个列可以叫做联合索引。 索引分为唯一索引和非唯一索引，唯一索引的值必须唯一，但是可以有空值，非唯一索引的值可以不唯一，但是可以有空值。 B+ 树查找时间复杂度 B+ 树是一种多路平衡查找树，它的每个节点最多包含 m 个孩子，m 被称为 B+ 树的阶，m 的大小取决于磁盘页的大小。 B+ 树的查找过程和二分查找类似，都是先取中间节点，然后根据比较结果决定向左还是向右查找，直到找到目标数据。 B+ 树的查找时间复杂度是 O(logn)。 B+ 树的插入、删除、更新时间复杂度也是 O(logn)。 B+ 树的插入、删除、更新操作都是在叶子节点进行的，所以 B+ 树的插入、删除、更新操作不会破坏树的结构，所以 B+ 树的插入、删除、更新操作不会引起树的重构。 索引应用和优化 索引可以加快数据的检索速度，但是会降低数据的写入速度，因为每次写入数据的时候都要维护索引。 索引可以加快数据的排序速度，但是会降低数据的插入速度，因为插入数据时，还要维护索引。 索引的优化： 索引列的选择：选择区分度高的列作为索引列。 索引列的顺序：选择区分度高的列作为索引列，同时将区分度高的列放在前面。 联合索引：选择区分度高的列作为索引列，同时将区分度高的列放在前面。 覆盖索引：索引列包含了查询的字段，这样就不需要回表查询了。 索引列的长度：索引列的长度越小，索引的高度越低，查询的速度越快。 索引列的数据类型：索引列的数据类型越小，索引的高度越低，查询的速度越快。 索引列的顺序：索引列的顺序要和查询条件的顺序一致，这样才能使用到索引。 索引列的范围查询：尽量避免使用范围查询，因为范围查询无法使用到索引。 索引列的 like 查询：尽量避免使用 like 查询，因为 like 查询无法使用到索引。 索引列的 in 查询：尽量避免使用 in 查询，因为 in 查询无法使用到索引。 索引列的 is null 查询：尽量避免使用 is null 查询，因为 is null 查询无法使用到索引。 索引列的排序：尽量避免对索引列进行排序，因为排序会降低查询的速度。 索引列的分组：尽量避免对索引列进行分组，因为分组会降低查询的速度。 索引列的 join：尽量避免对索引列进行 join，因为 join 会降低 慢 sql 优化 使用 explain 命令查看 sql 语句的执行计划，看看是否使用了索引。 使用 show profile 命令查看 sql 语句的执行时间。 使用 show status 命令查看数据库的一些状态信息，如：数据库的连接数、数据库的锁状态等。 使用 show processlist 命令查看数据库的连接信息，如：连接的 id、连接的用户、连接的主机、连接的状态等。 使用 show variables 命令查看数据库的一些配置信息，如：数据库的版本、数据库的字符集等。 使用 show engine innodb status 命令查看数据库的 innodb 状态信息。 redis redis 常用数据类型 String、Hash、List、Set、Sorted Set redis hash 数据类型有什么作用？ hash 数据类型是指一个 key 对应一个字典，字典中的 key 和 value 都是字符串。 hash 数据类型的应用场景是：存储对象、存储用户信息、存储商品信息等。 redis 高可用方案？ redis 持久化方案？ 因为 redis 是个内存数据库，为了确保数据的持久化，Redis 自身提供了两种持久化方案： RDB（Redis Database）持久化： 一种快照持久化方式，定期将内存中的数据快照写入磁盘文件 适用于数据集较大，备份不需要太频繁的情况 AOF（Append-Only File）持久化： 记录每个写操作（包括写、更新、删除操作）的日志文件，以文本文件形式追加到文件末尾 当 Redis 重启时，可以通过重新执行AOF文件中的操作来还原数据 适用于需要高可用性和数据完整性的场景 兼容 RDB 和 AOF 的混合持久化： Redis 4.0 引入了混合持久化，结合了RDB和AOF的优点 数据首先会被写入 AOF 文件，然后 AOF 文件会被重新加载到内存 最后根据需要创建 RDB 快照 redis 如何实现分布式锁？ 使用 setnx 命令，setnx 命令是 set if not exists 的缩写，也就是当 key 不存在时才设置 key 的值。 可以同时通过 expire 添加超时时间。 锁的 value 可以使用 uuid 等随机数，这样可以保证每个线程的锁都是唯一的。 释放锁的时候通过 uuid 判断是否是自己的锁，如果是自己的锁才能释放。 缓存优化是什么？ 缓存优化是指通过缓存来提高系统的性能。 缓存优化的原则是：缓存的数据必须是热点数据，缓存的数据必须是经常读取的数据。 缓存优化的方式有：缓存预热、缓存穿透、缓存击穿、缓存雪崩。 缓存预热：系统上线后，将相关的缓存数据直接加载到缓存系统。 缓存穿透：查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。 缓存穿透问题解决：1、对查询结果为空的情况也进行缓存，缓存时间设置短一点。2、采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被 这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。 缓存击穿：一个存在的 key，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。 缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大的压力，可能会导致系统崩溃。 Mysql 如何添加分区？添加分区有什么作用？ Mysql 添加分区的语法：alter table 表名 add partition (partition 分区名 values in (分区值))。 Mysql 分区表的作用：分区表是一种表结构，它的数据被分成多个分区，每个分区都包含表中的一些数据。分区表的作用是：提高查询效率、提高维护效率、提高可用性。 区分热点数据和冷点数据，将热点数据放到热点分区中，将冷点数据放到冷点分区中，这样可以提高查询效率。 Mysql 性能优化 优化数据库的结构：优化数据库的表结构，如：添加索引、添加分区等。 优化数据库的配置：优化数据库的配置，如：修改数据库的字符集、修改数据库的缓存大小等。 优化数据库的查询：优化数据库的查询，如：优化 sql 语句、优化索引等。 优化数据库的连接：优化数据库的连接，如：优化数据库的连接池、优化数据库的连接数等。 优化数据库的缓存：优化数据库的缓存，如：优化 redis 的缓存、优化 memcached 的缓存等。 优化数据库的硬件：优化数据库的硬件，如：优化数据库的磁盘、优化数据库的内存等。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/服务器.html":{"url":"经验分享/面试/面试题/服务器.html","title":"服务器.md","keywords":"","body":"服务器nginx你知道 nginx 是什么吗？apache你知道 apache 是什么吗？SaaS、PaaS、IaaS 的区别是什么？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 nginx 你知道 nginx 是什么吗？ apache 你知道 apache 是什么吗？ SaaS、PaaS、IaaS 的区别是什么？ 服务器nginx 你知道 nginx 是什么吗？ nginx 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。 nginx 专为性能而设计，性能是 nginx 最重要的考量，其占用内存小，启动快，并且支持高并发，目前 nginx 是最流行的 Web 服务器之一。 apache 你知道 apache 是什么吗？ Apache 是一个模块化的服务器，它提供了一系列的模块来处理不同的请求。Apache 服务器本身只提供核心服务，所有的功能都是由模块来实现的，这些模块可以根据需要进行加载或卸载。 Apache 是一个开源的 Web 服务器，可以在大多数计算机操作系统中运行，由于其跨平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。 SaaS、PaaS、IaaS 的区别是什么？ SaaS：软件即服务，是指将软件以服务的方式提供给用户，用户不需要关心软件的安装和维护，只需要通过网络就可以使用软件。 比如：微信、QQ、钉钉等。 全称：Software as a Service PaaS：平台即服务，是指通过网络提供给用户一种软件运行和开发环境，可以方便用户进行软件开发、测试 比如：阿里云、腾讯云、华为云等。 IaaS：基础设施即服务，是指通过网络提供给用户一种基础的计算资源，包括服务器、存储、网络等。 比如：阿里云、腾讯云、华为云等。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/模块.html":{"url":"经验分享/面试/面试题/模块.html","title":"模块.md","keywords":"","body":"模块Celery你了解 Celery 吗？什么时候需要用到 Celery？Celery 有哪三种任务类型？Celery 的工作原理是什么？什么是消息代理（Message Broker）？Celery支持哪些消息代理？ELK（Elasticsearch、Logstash、Kibana）你知道ELK是什么吗？你知道ELK的原理吗？你知道ELK的优缺点吗？你知道ELK的应用场景吗？你知道ELK的安装和使用吗？MQ你知道 mq 的使用场景吗？Docker你知道Docker是什么吗？你知道Docker的原理吗？docker 副本Kafka你知道Kafka是什么吗？你知道Kafka的原理吗？你知道Kafka的优缺点吗？Hadoop你知道Hadoop是什么吗？Spark你知道Spark是什么吗？Spark 和 Hadopp 的区别是什么？Spark 的优缺点是什么？Flink你知道Flink是什么吗？Flink 和 Spark 的区别是什么？那为什么还有那么多人选择 Spark 而不是 Flink 呢？MongoDB你知道MongoDB是什么吗？Redis你了解 redis 底层数据结构吗？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 Celery 你了解 Celery 吗？ 什么时候需要用到 Celery？ Celery 有哪三种任务类型？ Celery 的工作原理是什么？ 什么是消息代理（Message Broker）？Celery支持哪些消息代理？ ELK（Elasticsearch、Logstash、Kibana） 你知道ELK是什么吗？ 你知道ELK的原理吗？ 你知道ELK的优缺点吗？ 你知道ELK的应用场景吗？ 你知道ELK的安装和使用吗？ MQ 你知道 mq 的使用场景吗？ Docker 你知道Docker是什么吗？ 你知道Docker的原理吗？ docker 副本 Kafka 你知道Kafka是什么吗？ 你知道Kafka的原理吗？ 你知道Kafka的优缺点吗？ Hadoop 你知道Hadoop是什么吗？ Spark 你知道Spark是什么吗？ Spark 和 Hadopp 的区别是什么？ Spark 的优缺点是什么？ Flink 你知道Flink是什么吗？ Flink 和 Spark 的区别是什么？ 那为什么还有那么多人选择 Spark 而不是 Flink 呢？ MongoDB 你知道MongoDB是什么吗？ Redis 你了解 redis 底层数据结构吗？ 模块Celery 你了解 Celery 吗？ Celery 是一个开源的分布式任务队列系统，主要用途是处理异步任务。 Celery 主要用途包括异步任务处理、定时任务调度、处理大量并行任务等。 Celery 核心组件：任务（Tasks）、消息代理（Message Broker）、工作者（Workers）和结果存储（Result Backend）。任务定义了要执行的操作，消息代理负责任务的分发和协调，工作者执行实际的任务，结果存储用于保存任务执行结果。 什么时候需要用到 Celery？ 需要异步执行任务，例如发送电子邮件、处理图像或生成报告。 需要处理大量并行任务，如数据处理。 需要定时任务调度，例如定期备份数据。 需要将任务从主应用程序中解耦以提高性能和响应时间。 Celery 有哪三种任务类型？ 异步任务：使用 @task 装饰器来装饰一个 Python 函数 from celery import Celery app = Celery('myapp', broker='pyamqp://guest@localhost//') @app.task def add(x, y): return x + y 定时任务：使用 Celery 的 beat_schedule 配置来指定任务的执行计划，包括任务名称、执行频率和要运行的函数。 from celery import Celery app = Celery('myapp', broker='pyamqp://guest@localhost//') app.conf.beat_schedule = { 'my-task': { 'task': 'myapp.tasks.my_task', 'schedule': 10.0, # 每10秒执行一次 } } @app.task def my_task(): # 执行你的定时任务操作 pass 周期性任务：是一种特殊的异步任务，它可以周期性地执行，并可以一直运行。 from celery import Celery app = Celery('myapp', broker='pyamqp://guest@localhost//') @app.task def periodic_task(): while True: # 执行周期性任务的操作 pass Celery 的工作原理是什么？ Celery 的工作原理是基于生产者-消费者模式的。任务由生产者发布到消息代理中，工作者从消息代理中获取任务并执行。任务的执行结果可以保存在结果存储中供查询。消息代理是中介，确保任务可靠地传递给工作者。 什么是消息代理（Message Broker）？Celery支持哪些消息代理？ 消息代理是 Celery 中的中介，用于存储和分发任务。Celery 支持多种消息代理，最常用的是 RabbitMQ 和 Redis。这些消息代理负责将任务从生产者传递到工作者，并确保任务在需要时被可靠地分发和执行。 ELK（Elasticsearch、Logstash、Kibana） 你知道ELK是什么吗？ ELK 是 Elasticsearch、Logstash、Kibana 三个开源软件的首字母缩写，这三个软件都是开源软件，它们都有着非常成熟的社区和文档，而且都是用 Java 语言开发的，所以在各个平台上都可以很方便的安装和使用。 Elasticsearch 是一个分布式、可扩展、实时的搜索与数据分析引擎，它可以帮助我们快速的存储、搜索和分析海量数据。 Logstash 是一个数据采集引擎，它具有非常强大的数据采集、过滤、转换能力，可以从多种数据源采集数据，并将数据转换为统一的格式输出到多种输出源。 Kibana 是一个开源的分析和可视化平台，它可以对 Elasticsearch 中存储的数据进行搜索、查看、交互操作。 你知道ELK的原理吗？ Logstash 从各种数据源采集数据，经过过滤、转换后，输出到 Elasticsearch 中，然后 Kibana 从 Elasticsearch 中读取数据，进行可视化展示。 你知道ELK的优缺点吗？ 优点：ELK 是一个开源的日志分析解决方案，它具有非常强大的数据采集、存储、搜索、分析能力，而且它的安装和使用都非常简单，而且它的社区非常活跃，有着非常丰富的文档和资源。 缺点：ELK 作为一个日志分析解决方案，它的数据采集、存储、搜索、分析能力都非常强大，但是它的数据采集能力相对来说比较弱，它只能采集日志数据，而且它的数据采集能力也不是很强大，它只能采集一些常见的数据源，如果要采集一些非常特殊的数据源，就需要自己开发插件了。 你知道ELK的应用场景吗？ ELK 作为一个日志分析解决方案，它的应用场景非常广泛，比如：日志分析、系统监控、业务分析、数据可视化等等。 你知道ELK的安装和使用吗？ 安装：ELK 的安装非常简单，只需要下载对应的安装包，然后解压即可。 使用：ELK 的使用也非常简单，只需要启动对应的服务，然后访问对应的地址即可。 MQ 你知道 mq 的使用场景吗？ mq 作为一个消息中间件，它的使用场景比如：异步处理、流量削峰、解耦系统、消息通知等等。 Docker 你知道Docker是什么吗？ Docker 是一个开源的应用容器引擎，它可以让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 你知道Docker的原理吗？ Docker 使用的是 Linux 内核中的一些特性，比如：Namespace、Cgroups、UnionFS 等等，这些特性可以实现进程的隔离、资源的隔离、文件系统的隔离等等，这样就可以实现虚拟化。 Docker 使用的是 Linux 内核中的一些特性，所以它只能在 Linux 平台上运行，但是 Docker 提供了一些工具，可以在 Windows 和 Mac 平台上运行。 Docker 使用的是 Linux 内核中的一些特性，所以它的性能非常高，而且它的启动速度非常快，只需要几秒钟就可以启动一个容器。 docker 副本 Kafka 你知道Kafka是什么吗？ Kafka 是一个分布式的消息队列，它可以实现消息的发布和订阅，它的性能非常高，可以支持每秒钟几十万条消息的处理。 你知道Kafka的原理吗？ Kafka 是一个分布式的消息队列，它的数据存储在多个节点上，每个节点都有多个副本，当有一个节点宕机时，就会自动切换到其他节点上。 你知道Kafka的优缺点吗？ 优点：Kafka 是一个分布式的消息队列，它的性能非常高，可以支持每秒钟几十万条消息的处理，而且它的数据存储在多个节点上，每个节点都有多个副本，当有一个节点宕机时，就会自动切换到其他节点上，所以它的可靠性非常高。 缺点：Kafka 是一个分布式的消息队列，它的安装和使用都比较复杂，而且它的数据存储在多个节点上，每个节点都有多个副本，所以它的资源消耗比较大。 Hadoop 你知道Hadoop是什么吗？ Hadoop 是一个开源的分布式计算平台，它可以帮助我们快速的存储、处理海量数据。 Hadoop 由 HDFS 和 MapReduce 两个部分组成，HDFS 是一个分布式文件系统，它可以将数据存储在多个节点上，MapReduce 是一个分布式计算框架，它可以将计算任务分发到多个节点上。 Spark 你知道Spark是什么吗？ Spark 是一个开源的分布式计算框架，它可以帮助我们快速的处理海量数据。 Spark 和 Hadopp 的区别是什么？ Hadoop 是一个分布式计算平台，它由 HDFS 和 MapReduce 两个部分组成，HDFS 是一个分布式文件系统，它可以将数据存储在多个节点上，MapReduce 是一个分布式计算框架，它可以将计算任务分发到多个节点上。 Spark 是一个分布式计算框架，它可以将计算任务分发到多个节点上，而且它的计算效率比 MapReduce 高很多。 Spark 和 Hadoop 都是分布式计算框架，但是 Spark 的计算效率比 Hadoop 高很多，而且 Spark 还支持流式计算、机器学习、图计算等等。 Spark 的优缺点是什么？ 优点：Spark 是一个分布式计算框架，它可以将计算任务分发到多个节点上，而且它的计算效率比 MapReduce 高很多，而且 Spark 还支持流式计算、机器学习、图计算等等。 缺点：Spark 是一个分布式计算框架，它的安装和使用都比较复杂，而且它的计算效率比 MapReduce 高很多，但是它的计算效率还是比不上 Flink。 Flink 你知道Flink是什么吗？ Flink 是一个开源的分布式计算框架，它可以帮助我们快速的处理海量数据。 Flink 和 Spark 的区别是什么？ Flink 比 Spark 更早的出现，它的计算效率比 Spark 高很多，而且 Flink 还支持流式计算、机器学习、图计算等等。 那为什么还有那么多人选择 Spark 而不是 Flink 呢？ 因为 Spark 的生态圈比 Flink 更加的完善，而且 Spark 的使用也比 Flink 更加的简单。 MongoDB 你知道MongoDB是什么吗？ MongoDB 是一个开源的 NoSQL 文档型数据库，它可以帮助我们快速的存储海量数据。 Redis 你了解 redis 底层数据结构吗？ Redis 的底层数据结构有五种，分别是：String、List、Hash、Set、ZSet。 String：字符串，可以是字符串、整数或者浮点数。 ZSet: 有序集合，字符串成员（member）与浮点数分值（score）之间的有序映射，元素的排列顺序由分值的大小决定。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/系统设计.html":{"url":"经验分享/面试/面试题/系统设计.html","title":"系统设计.md","keywords":"","body":"系统设计设计模式你知道有哪些设计模式吗？什么是创建型模式、结构型模式、行为型模式？你知道有哪些设计原则吗？谈谈单例模式请你谈谈你的系统设计经验TreeviewCopyright © aleen42 all right reserved, powered by aleen42 设计模式 你知道有哪些设计模式吗？ 什么是创建型模式、结构型模式、行为型模式？ 你知道有哪些设计原则吗？ 谈谈单例模式 请你谈谈你的系统设计经验 系统设计设计模式 你知道有哪些设计模式吗？ 创建型模式 工厂方法模式 抽象工厂模式 单例模式 建造者模式 原型模式 结构型模式 适配器模式 桥接模式 装饰器模式 组合模式 外观模式 享元模式 代理模式 行为型模式 模板方法模式 命令模式 迭代器模式 观察者模式 中介者模式 备忘录模式 解释器模式 状态模式 策略模式 职责链模式 访问者模式 什么是创建型模式、结构型模式、行为型模式？ 创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。 结构型模式是处理类或对象的组合的设计模式。 行为型模式是对在不同的对象之间划分责任和算法的抽象化。 你知道有哪些设计原则吗？ 单一职责原则：一个类只负责一个功能领域中的相应职责。 开闭原则：软件实体应对扩展开放，而对修改关闭。 里氏代换原则：所有引用基类对象的地方能够透明地使用其子类的对象。 依赖倒转原则：依赖于抽象而不是具体。 接口隔离原则：不应当将一个大而全的接口放在应用层，应用层的接口应当设计得比较小，并且要考虑到客户端的具体需要。 迪米特法则：一个实体应当尽量少地与其他实体之间发生相互作用，使系统功能模块相对独立。 合成复用原则：尽量使用合成/聚合的方式，而不是使用继承。 谈谈单例模式 单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 Python 中应用单例模式的实际场景： 数据库连接池 日志记录器 线程池 全局配置对象 对象缓存 Python 中实现单例模式的方法有很多，可以使用模块、装饰器、元类等： 使用模块 # mysingleton.py class My_Singleton(object): def foo(self): pass my_singleton = My_Singleton() # to use from mysingleton import my_singleton my_singleton.foo() 使用装饰器 from functools import wraps def singleton(cls): instances = {} @wraps(cls) def getinstance(*args, **kwargs): if cls not in instances: instances[cls] = cls(*args, **kwargs) return instances[cls] return getinstance @singleton class MyClass(object): pass 使用元类 class Singleton(type): def __init__(cls, name, bases, dict): super(Singleton, cls).__init__(name, bases, dict) cls._instance = None def __call__(cls, *args, **kwargs): if cls._instance is None: cls._instance = super(Singleton, cls).__call__(*args, **kwargs) return cls._instance class MyClass(object): __metaclass__ = Singleton 请你谈谈你的系统设计经验 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/自动化测试.html":{"url":"经验分享/面试/面试题/自动化测试.html","title":"自动化测试.md","keywords":"","body":"自动化测试django如果 django 项目中有一个权限管理系统需要进行测试，尝试编写一套自动化测试方案进行测试：TreeviewCopyright © aleen42 all right reserved, powered by aleen42 django 如果 django 项目中有一个权限管理系统需要进行测试，尝试编写一套自动化测试方案进行测试： 自动化测试django 如果 django 项目中有一个权限管理系统需要进行测试，尝试编写一套自动化测试方案进行测试： 1.编写测试用例 1.1 编写测试用例的步骤： 1.1.1 编写测试用例的类，继承 django.test.TestCase 类 1.1.2 编写测试用例的方法，方法名以 test_ 开头 1.1.3 在测试用例的方法中编写测试逻辑 1.2 测试用例的执行顺序 1.2.1 按照测试用例的方法名的字母顺序执行 1.2.2 每个测试用例方法执行前都会执行 setUp 方法 1.2.3 每个测试用例方法执行后都会执行 tearDown 方法 1.3 测试用例的执行结果 1.3.1 测试用例方法执行成功，返回 None 1.3.2 测试用例方法执行失败，抛出异常 2.编写测试脚本 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/计算机_操作系统.html":{"url":"经验分享/面试/面试题/计算机_操作系统.html","title":"计算机_操作系统.md","keywords":"","body":"操作系统动态库和静态库区别？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 动态库和静态库区别？ 操作系统动态库和静态库区别？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"经验分享/面试/面试题/计算机_网络.html":{"url":"经验分享/面试/面试题/计算机_网络.html","title":"计算机_网络.md","keywords":"","body":"网络TCPTCP 三次握手和四次握手区别？游戏选 TCP 还是 UDP？TreeviewCopyright © aleen42 all right reserved, powered by aleen42 TCP TCP 三次握手和四次握手区别？ 游戏选 TCP 还是 UDP？ 网络TCP TCP 三次握手和四次握手区别？ 游戏选 TCP 还是 UDP？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"计划安排/归档/":{"url":"计划安排/归档/","title":"归档","keywords":"","body":"归档归档规则TreeviewCopyright © aleen42 all right reserved, powered by aleen42 归档 归档规则 归档归档规则 每日晚上写第二天计划，每周周日晚上额外整理当周归档 每周归档结构命名规范： . ├── 0821-0827 │ ├── 0821.md │ ├── ... │ └── 0827.md ├── 0828-0903 ... 如果跨年，需要进行年归档 . ├── 2022 │ ├── 1221-1227 │ │ └── ... ├── 2023 ... console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"计划安排/归档/2023-06.html":{"url":"计划安排/归档/2023-06.html","title":"2023-06.md","keywords":"","body":"6.29 日TreeviewCopyright © aleen42 all right reserved, powered by aleen42 6.29 日锻炼第 4 天，晚上八点跑步 30 分钟，俯卧撑坚持做，腹肌训练在洗澡后床上坚持。 hackerrank 刷题 leetcode 刷题 boss 直聘 找工作 # console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"计划安排/本周/":{"url":"计划安排/本周/","title":"本周","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"计划安排/本周/0828.html":{"url":"计划安排/本周/0828.html","title":"0828.md","keywords":"","body":"08-28感悟实际执行TreeviewCopyright © aleen42 all right reserved, powered by aleen42 08-28 感悟 实际执行 08-28计划 2023-08-28 01:43:00 [ ] 将要面试的公司整理到文档中 日常记录>面试>面试记录.md，并且预先整理好推荐自己的话，推销自己。并随时记录每家接下来的情况整理到表格中 表格大致内容：公司，岗位，投递时间，地点、薪资、对话内容、... [ ] 将这些经验整理到文档中 经验分享>面试>面试经验：如何推销，如何做好计划，如何整理投递简历的企业。 [ ] 整理职业规划：要学哪些？参考哪些岗位职责？几年要学完？要入职什么企业以后？评估数字游民方式可行性 感悟 3 周周期的项目，报酬 2w+，通过后续多联系之江实验室杜承垚随时看有没有项目能接（这次一定要好好表现自己）。并且考虑是否从此刻能开启自己的数字游民身份。 Python 的一大优势就是可以独立开发，成为数字游民。这种企业独立出来的项目/产品，本身他们实验室就是做算法的，做 web 开发的人很少，只有临时拼凑组合，考虑外包成本又可能比较大、安全性不太好（而且刚好这个项目是国家安全相关）。本身有个全资子公司谛听科技作为开发团队，但是盈利和招人一直不太理想（我之前面试过，也给了我 offer，但我最终拒绝了）。之前给我技术面试的之江实验室杜承垚关注了我 github 并联系到了我，希望我可以接这个小项目。谛听科技本身盈利不好、招不到团队，承接不了这样的项目，之江实验室负责人就单独联系到我去开发，说来也很凑巧！但我预计本身经费是开的很高的（毕竟最上面是国家拨款）所以全资子公司谛听给我的薪资也是一年 20w 左右，他现在只出 2w，就可以让我给他开发一个月，完成这样的产品，其实他们本身不亏。 而且一年没工作，一直在大量花钱，刚好这段时间也缺钱，正好能填补一下经济。 实际执行 复盘分析系统 [x] 评估之江实验室项目-> 复盘分析系统，并准备签署合同（明天） [x] 将要面试的公司整理到文档中 日常记录>面试>面试记录.md console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"计划安排/本周/0829.html":{"url":"计划安排/本周/0829.html","title":"0829.md","keywords":"","body":"08-29感悟实际执行TreeviewCopyright © aleen42 all right reserved, powered by aleen42 08-29 感悟 实际执行 08-29计划 2023-08-29 02:43:00 [ ] 将要面试的公司整理到文档中 日常记录>面试>面试记录.md，并且预先整理好推荐自己的话，推销自己。并随时记录每家接下来的情况整理到表格中 [ ] 将这些经验整理到文档中 经验分享>面试>面试经验：如何推销，如何做好计划，如何整理投递简历的企业。 [ ] 整理职业规划：要学哪些？参考哪些岗位职责？几年要学完？要入职什么企业以后？评估数字游民方式可行性 [ ] 之江实验室项目开发 感悟 实际执行 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"TermAnother termTreeviewCopyright © aleen42 all right reserved, powered by aleen42 Another term Term Definition for this term Another term With it's definition, this can contain bold text and all other kinds of inline markup ... console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}